{"version":3,"sources":["theme/globalTheme.js","actions/index.js","actions/types.js","styles/themedStyles.js","components/training/worker.js","components/training/TrainingWorker.js","helpers/TextData.js","components/training/Training.js","components/constants/descriptionStrings.js","components/constants/global.js","components/dialogs/elements/DescriptionItem.js","components/dialogs/elements/FormulaItem.js","components/dialogs/elements/DescriptionElement.js","components/dialogs/ComplexDialog.js","components/visualisation/dialogs/CellDialogs.js","components/visualisation/dialogs/HeadingDialogs.js","components/visualisation/sketches/model/Heading.js","components/visualisation/sketches/model/cellview/elements/Connection.js","components/visualisation/sketches/model/cellview/elements/Item.js","components/visualisation/sketches/model/cellview/LSTM.js","helpers/Cookies.js","helpers/OnboardingState.js","components/visualisation/sketches/model/overview/layerplots/Layer.js","components/visualisation/sketches/model/overview/layerplots/FakeLayer.js","components/visualisation/sketches/model/overview/Network.js","components/visualisation/sketches/model/overview/subplots/TextPlot.js","components/visualisation/sketches/model/overview/subplots/FunctionPlot.js","components/visualisation/sketches/model/overview/subplots/IncomingData.js","components/visualisation/sketches/model/overview/subplots/DataExplanation.js","components/visualisation/sketches/model/overview/NetworkPlot.js","components/visualisation/sketches/model/overview/Input.js","components/visualisation/sketches/model/cellview/subplots/TextPlot.js","components/visualisation/sketches/model/cellview/subplots/FunctionPlot.js","components/visualisation/sketches/model/cellview/subplots/BackpropExplanation.js","components/visualisation/sketches/model/cellview/CellPlot.js","components/visualisation/sketches/NetworkSketch.js","components/constants/animation.js","components/constants/typography.js","components/constants/colors.js","components/visualisation/VisualWrapper.js","components/controls/panels/ProcessPanel.js","components/controls/comps/StyledButton.js","components/controls/panels/ControlPanel.js","components/controls/panels/SliderPanel.js","components/controls/comps/DescriptionElement.js","components/controls/panels/DescriptionPanel.js","components/controls/BottomComponent.js","components/AlertSnack.js","components/dialogs/OnboardingDialog.js","components/MainComponent.js","AppRouter.js","components/controls/comps/StyledSelect.js","components/controls/TopBarComponent.js","reducers/initialState.js","reducers/index.js","reducers/NetworkReducer.js","reducers/TrainingReducer.js","reducers/UIReducer.js","reducers/AppStateReducer.js","reducers/AlertSnackReducer.js","reducers/TextDataReducer.js","reducers/CookiesStateReducer.js","App.js","registerServiceWorker.js","index.js"],"names":["createMuiTheme","palette","primary","main","blueGrey","dark","light","off","secondary","grey","superLight","overview","blue","detail","orange","toggleTraining","training","type","stopTraining","updateUI","ui","updateAppState","appState","updateNetwork","network","updateTraining","updateAlertSnack","alertSnack","updateTextData","textData","updateCookiesState","cookiesState","styles","theme","fullWidth","width","panelWrapper","height","background","smallPanelWrapper","marginLeft","marginRight","oVheader","cVheader","typoStd","color","fontSize","typoStdBig","margin","typoOv","marginTop","typoOvOff","typoOvBig","typoCv","typoCvOff","typoCvSmall","typoCvOffSmall","typoCvBig","typoHeader","typoOvHighlighted","typoCvHighlighted","icon_cell","icon_net","button_cell","button_net","button_top","text_button_net","text_button_cell","text_button_net_inverted","text_button_cell_inverted","defSlider","select","spacing","borderColor","selectIcon","fill","self","addEventListener","e","data","cmd","importScripts","tf","setBackend","initializing","initialize","postMessage","values","predictions","testOutputs","params","fitting","generating","model","fit","mem","in","out","epochs","batchSize","then","_","reset","generateDataWith","addDataToMemory","chartIn","chartDataInput","chartOut","chartDataOutput","chartPred","chartPredictionInput","testInput","length","createModel","predicting","pred","createPrediction","inputType","undefined","createComplexModel","charSetSize","layers","cells","optimizer","train","rmsprop","learningRate","compile","loss","add","trainInput","trainOutput","timeSteps","vocab","labels","blockSize","sequential","i","lstm","units","returnSequences","inputShape","dense","activation","generateTextData","generateFunctionData","stepSize","size","noise","preds","prediction","inputBuff","output","newInput","step","push","tensor3d","predict","Array","from","arraySync","element","hasOwnProperty","call","Math","round","splice","funcs","plotLength","setSize","trainInputBuff","trainOutputBuff","testInputBuff","PI","maxNoise","partialSetSize","trainData","testData","setOffsetRatio","startOffset","random","trainInputSequence","start","j","noiseVal","val","func","dataFunc","currentOutSequence","tensor2d","testInputSequence","offset","x","y","sin","numExamples","generateExampleBeginIndices","textTrainData","textTestData","sampleLen","exampleBeginIndices","examplePosition","indices","valueArray","textLen","textOutputs","util","shuffle","WebWorker","worker","code","toString","blob","Blob","Worker","URL","createObjectURL","TextData","textString","this","getCharSet","convertAllTextToIndices","text","charSet","indexOf","Uint16Array","textToIndices","index","arr","isArray","max","char","getFromCharSet","Training","onmessage","buff","props","actions","running","iterate","workerReady","addDataToNetwork","addPredictionToNetwork","TrainingWorker","dataTypes","dataSetSize","prevProps","this_","setTimeout","ready","animStep","netAnim","lstmStep","trainingStep","state","iteration","textSample","fetch","r","resetModel","layerSize","addDataToUI","oldNetwork","chartInput","chartOutput","chartPrediction","oldUI","pop","unshift","animate","React","Component","connect","dispatch","bindActionCreators","ENG","epoch","welcome","inputOnboarding","networkOnboarding","startTrainingOnboarding","outputOnboarding","cellTransitionOnboarding","detailOutputOnboarding","detailCellOnboarding","processOnboarding","slidersOnboarding","headingExplanation","forward","validation","backward","layerInputStep","gateStep","updateStep","outputStep","layerInput","inputGate","forgetGate","outputGate","stateUpdate","memoryCell","inputHeading","networkHeading","predictionHeading","cellHeading","cellPlotHeading","title","strings","controlsTitle","lossTitle","plotInput","plotOutput","plotPrediction","tooltipCell","tooltipDelete","tooltipAdd","dataExplanation","backpropExplanation","description","descriptionStrings","onboarding","buttonTitles","skip","next","arrow","style","position","top","left","input","startTraining","bottom","cellTransition","detailOutput","detailCell","detailProcess","sliders","trainSteps","id","longDescription","lstmSteps","headings","identifier","lstmGates","types","name","disabled","inputTypes","languages","small","default","header","key","min","marks","value","label","DescriptionItem","className","descriptionItem","classes","Typography","display","withStyles","options","displayAlign","formulas","map","formula","DescriptionElement","Grid","item","descriptionElement","FormulaItem","ComplexDialog","Dialog","onClose","closeFunction","open","DialogTitle","DialogContent","dividers","container","directiton","CellDialogs","handleClose","cellDialog","global","globalConstants","language","gate","ownProps","HeadingDialogs","headingDialog","heading","Heading","s","dialog","active","hover","clicked","textAlign","LEFT","CENTER","textSize","typography","fontsizelarge","colors","darkgrey","noStroke","textWidth","cursor","HAND","noFill","stroke","strokeWeight","line","Connection","verts","goesTo","negativeActivation","activeInputs","drawingContext","lineDashOffset","frameCount","setLineDash","cellAnim","back","detaillight","strokeJoin","ROUND","beginShape","v","vertex","endShape","addActiveInput","Item","cell","ingoing","horBuf","verBuf","connections","maxIngoingConnections","currentActivatedConnecions","imgSize","lightgrey","layer","clickedBlock","hasPrev","hasNext","w","h","rect","white","ellipse","image","receive","save","forget","cellImage","mx","my","tooltipoffset","detailProps","right","inputStep","predictionStep","error","c","dist","clickedItem","dialogs","LSTM","items","verRatio","horRatio","crossInput","crossForget","crossOutput","crossCell","ghostFirst","ghostLast","ghostInput","bus","toInput","toForget","toOutput","addToSave","forgetToSave","saveToCell","cellOut","cellToForget","cellToOutput","recurrent","ghostOutput","titleOffsetRatio","rectMode","midX","midY","draw","forced","frame","pause","sendActivations","updateActivation","errorStep","maxErrorSteps","showBackStep","backStep","maxBackSteps","deactivate","addNegativeInput","maxSteps","mouseMoved","ret","checkClick","getIntroState","Cookies","get","setIntroState","set","removeIntroState","remove","getNextIntroState","introState","action","newIntroState","intro","Layer","nodes","layerwidth","layerType","hover_left","hover_right","netProps","clSize","bluegrey","rev","darkbluegrey","red","fontsize","includes","anim","FakeLayer","d","alpha","setAlpha","Network","fakeLayers","layercount","netScale","updatePause","netPredFrames","updatePauseRev","netTrainFrames","netFrame","netLossFrames","update","activate","TextPlot","showSteps","plotAnim","plotFrame","plotMoveFrames","plotScanFrames","total","vis","translate","cx","halfW","cy","stepWidth","black","BOTTOM","Object","prototype","getFromOneHot","RIGHT","TOP","FunctionPlot","halfH","textStyle","BOLD","overviewlight","dataPred","dataOut","to","ratio","plotIncomingData","originX","outProps","originY","bezierVertex","CLOSE","CORNER","bezier","plotDataExplanation","fontsizesmall","NetworkPlot","scale","abs","plotWidth","plotHeight","textPlot","functionPlot","plotHeading","drawTextPlot","drawFunctionPlot","Input","inProps","buttons","steps","noises","Button","pos","maxPos","textType","bot","overviewdark","startX","startY","range","x_","oldTypes","newTypes","message","scanPlot","dataIndex","concat","cellPlotProps","leftIndex","rightIndex","NORMAL","buffX","endIndex","truth","detailStepWidth","groundTruth","ellipseMode","tween","errorRatio","detaildark","plotBackpropExplanation","CellPlot","lossValues","constants","scaleImage","transition","transitionSpeed","lstmAnim","currfps","sideRatioLeft","sideRatioLoss","sideRatioRight","detailRatio","ctrRatio","globalScale","setupDone","lightbluegrey","getColors","setup","netDiv","document","getElementById","valDiv","appDiv","barDiv","cnv","createCanvas","offsetWidth","offsetHeight","mouseClicked","click","move","updateMemory","frameRate","sideWidthLeft","sideWidthRight","lossProps","net","cellPlot","outputPlot","MAX_NET_FRAMES","plotStayFrames","netPause","MAX_PLOT_FRAMES","imageMode","ARROW","detailSpeed","drawPlots","drawInput","drawNetwork","drawCell","drawCellPlot","preload","loadImage","trigger","prepareError","prepareBackprop","windowResized","resizeCanvas","window","innerHeight","inLeft","drawLoss","cb","outLeft","cellAlpha","sendTrainStep","help","mouseX","mouseY","VisualWrapper","networkSketch","p5","direction","justify","xs","ProcessPanel","inputDialog","direcion","alignItems","align","Link","getClass","href","onClick","event","variant","properties","icon","IconButton","ControlPanel","resetButtonPressed","nextStep","plusButtonPressed","newSpeed","minusButtonPressed","epochDialog","StyledButton","SliderPanel","handleSliderChange","sliderId","pow","sliderDialog","actual","log","floor","toFixed","slider","Slider","log10","valueLabelDisplay","valueLabelFormat","getFormattedValue","ValueLabelComponent","onChange","children","popperRef","current","LightTooltip","PopperProps","enterTouchDelay","placement","tooltip","backgroundColor","common","boxShadow","shadows","Tooltip","stepDialog","DescriptionPanel","onJump","elementStep","BottomPanel","Divider","orientation","flexItem","AlertSnack","reason","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","ContentProps","aria-label","OnboardingDialog","handleNext","handleSkip","onProps","uiState","trainingState","networkState","getCurrentOnboardingElementProps","Paper","Box","p","text_button_detail","text_button_overview","endIcon","Main","AppRouter","Toolbar","exact","path","component","other","flexGrow","Select","inputProps","TopBar","handleKeyDown","callDefault","preventDefault","updateDataTypes","inputTypeSelect","newDataTypes","target","resetOnboarding","AppBar","StyledSelect","MenuItem","startIcon","aboutDialog","faqDialog","impressumDialog","combineReducers","initialState","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","combinedReducers","applyMiddleware","thunk","App","CssBaseline","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","catch","ReactDOM","render","process","origin","response","status","headers","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2693f871.chunk.js","sourcesContent":["import {createMuiTheme} from '@material-ui/core/styles';\nimport {grey, orange, blue, blueGrey} from '@material-ui/core/colors';\n\n// The color palette of the application\nexport default createMuiTheme({\n  palette: {\n    primary: {\n      main: blueGrey[800],\n      dark: blueGrey[900],\n      light: blueGrey[700],\n      off: blueGrey[400],\n    },\n    secondary: {\n      main: grey[500],\n      dark: grey[700],\n      light: grey[100],\n      superLight: grey[50],\n      off: grey[700],\n    },\n    overview: {\n      main: blue[500],\n      light: blue[300],\n      dark: blue[700],\n    },\n    detail: {\n      main: orange[500],\n      light: orange[300],\n      dark: orange[700],\n    },\n  },\n});\n","import * as types from './types';\n\n/**\n * Switches training from on to off, or off to on\n *\n * @param {object} training the new training object\n * @return {object} a redux state update\n */\nexport function toggleTraining(training) {\n  return {type: types.TOGGLE_TRAINING, training};\n}\n\n/**\n * Stops the training of the current model\n *\n * @param {object} training the new training object\n * @return {object} a redux state update\n */\nexport function stopTraining(training) {\n  return {type: types.STOP_TRAINING, training};\n}\n\n/**\n * Updates the internal UI values\n *\n * @param {object} ui the object holding the new ui values\n * @return {object} a redux state update\n */\nexport function updateUI(ui) {\n  return {type: types.UPDATE_UI, ui};\n}\n\n/**\n * Updates the internal appState values\n *\n * @param {object} appState the object holding the new appState values\n * @return {object} a redux state update\n */\nexport function updateAppState(appState) {\n  return {type: types.UPDATE_APP_STATE, appState};\n}\n\n/**\n * Updates the network values of the RNN model\n *\n * @param {object} network the object holding the new network values\n * @return {object} a redux state update\n */\nexport function updateNetwork(network) {\n  return {type: types.UPDATE_NETWORK, network};\n}\n\n/**\n * Updates the internal training values\n *\n * @param {object} training the object holding the new training values\n * @return {object} a redux state update\n */\nexport function updateTraining(training) {\n  return {type: types.UPDATE_TRAINING, training};\n}\n\n/**\n *  Updates the state of the AlertSnack\n *\n * @param {object} alertSnack the changed alertSnack object\n * @return {object} a redux state update\n */\nexport function updateAlertSnack(alertSnack) {\n  return {type: types.UPDATE_ALERT_SNACK, alertSnack};\n}\n\n/**\n * Updates the TextData state\n * @param {object} textData the new text data object for the app\n * @return {object} a redux state update\n */\nexport function updateTextData(textData) {\n  return {type: types.UPDATE_TEXT_DATA, textData};\n}\n\n/**\n * Updates the cookiesState values\n *\n * @param {object} cookiesState the object holding the new cookiesState values\n * @return {object} a redux state update\n */\nexport function updateCookiesState(cookiesState) {\n  return {type: types.UPDATE_COOKIES_STATE, cookiesState};\n}\n","// types for the update functions in index.js and the relevant redux reducers\nexport const UPDATE_TRAINING = 'UPDATE_TRAINING';\nexport const UPDATE_NETWORK = 'UPDATE_NETWORK';\nexport const UPDATE_APP_STATE = 'UPDATE_APP_STATE';\nexport const TOGGLE_TRAINING = 'TOGGLE_TRAINING';\nexport const STOP_TRAINING = 'STOP_TRAINING';\nexport const UPDATE_UI = 'UPDATE_UI';\nexport const UPDATE_ALERT_SNACK = 'UPDATE_ALERT_SNACK';\nexport const UPDATE_TEXT_DATA = 'UPDATE_TEXT_DATA';\nexport const UPDATE_COOKIES_STATE = 'UPDATE_COOKIES_STATE';\n","// The globally used styles for the application\nconst styles = (theme) => ({\n  fullWidth: { // Full width for an element\n    width: '100%',\n  },\n  panelWrapper: { // Mainly for the control area\n    height: '40vh',\n    background: theme.palette.secondary.light,\n  },\n  smallPanelWrapper: { // Panels left and right of the control area\n    marginLeft: '20px',\n    marginRight: '20px',\n    height: '40vh',\n  },\n  oVheader: { // Header element for the AppBar\n    background: theme.palette.overview.main,\n  },\n  cVheader: { // Header element for the AppBar\n    background: theme.palette.detail.main,\n  },\n  typoStd: { // The standard front used e.g. in the process panel\n    color: 'black',\n    width: '100%',\n    fontSize: '14px',\n  },\n  typoStdBig: { // Big text, such as the epoch number\n    color: 'black',\n    width: '90%',\n    margin: '5px',\n    fontSize: '30px',\n  },\n  typoOv: { // Overview typography\n    color: theme.palette.overview.main,\n    marginTop: '5px',\n    fontSize: '18px',\n    width: 'auto',\n  },\n  typoOvOff: { // Overview typography for deactivated components\n    color: theme.palette.secondary.dark,\n    marginTop: '5px',\n    fontSize: '18px',\n    width: 'auto',\n  },\n  typoOvBig: { // Overview typography for big text\n    color: theme.palette.overview.main,\n    marginTop: '5px',\n    fontSize: '24px',\n  },\n  typoCv: { // Cell view typography\n    color: theme.palette.detail.main,\n    marginTop: '5px',\n    fontSize: '18px',\n  },\n  typoCvOff: { // Cell view typography for deactivated components\n    color: theme.palette.secondary.dark,\n    marginTop: '5px',\n    fontSize: '18px',\n  },\n  typoCvSmall: { // Cell view typography\n    color: theme.palette.detail.main,\n    marginTop: '5px',\n    fontSize: '16px',\n  },\n  typoCvOffSmall: { // Cell view typography for deactivated components\n    color: theme.palette.secondary.dark,\n    marginTop: '5px',\n    fontSize: '16px',\n  },\n  typoCvBig: { // Cell view typography for big text\n    color: theme.palette.detail.main,\n    marginTop: '5px',\n    fontSize: '24px',\n  },\n  typoHeader: { // Header typography when in overview\n    color: 'white',\n    fontSize: '20px',\n  },\n  typoOvHighlighted: {\n    'color': theme.palette.overview.main,\n  },\n  typoCvHighlighted: {\n    'color': theme.palette.detail.main,\n  },\n  icon_cell: {\n    'color': theme.palette.detail.main,\n  },\n  icon_net: {\n    'color': theme.palette.overview.main,\n  },\n  button_cell: { // Button in the cell view\n    'margin': '10px',\n    'color': 'white',\n    'borderRadius': '50%',\n    'background': theme.palette.detail.main,\n    '&:hover': {\n      'background': theme.palette.detail.dark,\n    },\n  },\n  button_net: { // Button in the overview\n    'margin': '10px',\n    'color': 'white',\n    'borderRadius': '50%',\n    'background': theme.palette.overview.main,\n    '&:hover': {\n      'background': theme.palette.overview.dark,\n    },\n  },\n  button_top: { // Button in the top bar\n    'color': 'white',\n  },\n  text_button_net: {\n    'color': 'white',\n    'margin': '10px',\n    'background': theme.palette.overview.main,\n    '&:hover': {\n      'background': theme.palette.overview.dark,\n    },\n  },\n  text_button_cell: {\n    'color': 'white',\n    'margin': '10px',\n    'background': theme.palette.detail.main,\n    '&:hover': {\n      'background': theme.palette.detail.dark,\n    },\n  },\n  text_button_net_inverted: {\n    'background': 'white',\n    'color': theme.palette.overview.main,\n    '&:hover': {\n      'background': 'lightgrey',\n    },\n  },\n  text_button_cell_inverted: {\n    'background': 'white',\n    'color': theme.palette.detail.main,\n    '&:hover': {\n      'background': 'lightgrey',\n    },\n  },\n  defSlider: { // Slider styling\n    width: '90%',\n    marginLeft: '5%',\n    marginRight: '5%',\n    color: 'black',\n    marginTop: '5px',\n  },\n  select: { // Select components in the header\n    'marginLeft': theme.spacing(4),\n    '&:before': {\n      borderColor: 'white',\n    },\n    '&:hover': {\n      borderColor: 'white',\n    },\n    '&:after': {\n      borderColor: 'white',\n    },\n    'minWidth': 120,\n    'color': 'white',\n    'align': 'left',\n  },\n  selectIcon: { // Icon in the select component\n    fill: 'white',\n  },\n});\n\nexport default styles;\n","/* eslint-disable guard-for-in */\n/* eslint-disable no-restricted-globals */\n/* global tf, importScripts */\nexport default () => {\n  self.addEventListener('message', (e) => {\n    if (!e) return;\n    switch (e.data.cmd) {\n      case 'init': // worker should be initialized\n        importScripts(\n            'https://cdn.jsdelivr.net/npm/setimmediate@1.0.5/setImmediate.min.js');\n        importScripts(\n            'https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@1.2.7/dist/tf.min.js');\n        tf.setBackend('cpu');\n        self.initializing = true;\n        self.initialize();\n        self.initializing = false;\n        postMessage({cmd: 'init', values: {\n          values: self.values,\n          predictions: self.testOutputs,\n        }});\n        break;\n      case 'text':\n        self.textData = e.data.params.textData;\n        break;\n      case 'fit': // worker trains network for one epoch\n        if (self.fitting) return;\n        while (self.generating || self.initializing); // prevent inconsistencies\n        self.fitting = true;\n        self.model.model.fit(self.mem[0].in,\n            self.mem[0].out, {\n              epochs: e.data.params.epochs,\n              batchSize: e.data.params.batchSize,\n            }\n        ).then((_) => {\n          self.fitting = false;\n          postMessage({cmd: 'fit', reset: e.data.params.reset});\n        });\n        break;\n      case 'data': // a new data set shall be generated\n        self.generating = true;\n        self.generateDataWith(e.data.params);\n        self.generating = false;\n        self.addDataToMemory();\n        postMessage({cmd: 'data', values: {\n          chartIn: self.chartDataInput,\n          chartOut: self.chartDataOutput,\n          chartPred: self.chartPredictionInput,\n          values: self.testInput.length,\n          predictions: self.testOutputs,\n        }});\n        break;\n      case 'model': // the network model shall be generated\n        self.createModel(e.data.params);\n        break;\n      case 'pred': // determine a prediction for the current test data\n        if (self.predicting) return;\n        while (self.generating || self.initializing); // prevent inconsistencies\n        self.predicting = true;\n        postMessage({cmd: 'pred', values: {\n          pred: self.createPrediction(e.data.params.inputType),\n        }});\n        self.predicting = false;\n        break;\n      default:\n    }\n  });\n\n  /**\n   * Initializes the worker thread with all necessary values and objects\n   */\n  self.initialize = () => {\n    self.model = undefined;\n    self.mem = [];\n    self.fitting = false;\n    self.predicting = false;\n    self.generating = false;\n  };\n\n  /**\n   * Creates the network model and compiles it\n   *\n   * @param {object} params The model parameters from the received message\n   */\n  self.createModel = (params) => {\n    if (params.training.inputType === 'Text Data') {\n      self.createComplexModel(20, self.textData.charSetSize,\n          self.textData.charSetSize, params.layers, params.cells);\n      const optimizer = tf.train.rmsprop(params.learningRate);\n      self.model.compile({loss: 'categoricalCrossentropy',\n        optimizer: optimizer});\n    } else {\n      self.createComplexModel(self.values, 1, 1, params.layers, params.cells);\n      const optimizer = tf.train.rmsprop(params.learningRate);\n      self.model.compile({loss: 'meanSquaredError', optimizer: optimizer});\n    }\n  };\n\n  /**\n   * Adds the previously generated data to the worker memory\n   */\n  self.addDataToMemory = () => {\n    const add = {in: self.trainInput,\n      out: self.trainOutput,\n      pred: self.testInput};\n    self.mem = [add];\n  };\n\n  /**\n   * Creates a more complex lstm network model with multiple\n   * hidden layers and possibly multiple blocks per layer\n   *\n   * @param {number} timeSteps the amount of input time steps\n   * @param {number} vocab the vocabulary size, = 1 for numerical input\n   * functions (meaning the vocabulary is 'one number' with any value)\n   * @param {number} labels the output labels, or output dimensionality, for us,\n   * one number\n   * @param {number} layers the amount of hidden lstm layer size\n   * @param {number} blockSize the amount of cell states within a lstm block\n   * @return {object} the complex network model based on the input values\n   */\n  self.createComplexModel = (timeSteps, vocab, labels, layers, blockSize) => {\n    self.model = tf.sequential();\n    // Add all LSTM layers\n    for (let i = 0; i < layers; i++) {\n      self.model.add(\n          tf.layers.lstm({\n            units: blockSize,\n            returnSequences: i < layers - 1,\n            inputShape: i === 0 ? [timeSteps, vocab] : undefined,\n          })\n      );\n    }\n    // Add the head to make a prediction\n    self.model.add(\n        tf.layers.dense({\n          units: labels,\n          activation: labels > 1 ? 'softmax' : 'tanh',\n        })\n    );\n    return self.model;\n  };\n\n  /**\n   * Helper function for generating the data sets used for training\n   *\n   * @param {object} params parameters used for generating the correct data\n   */\n  self.generateDataWith = (params) => {\n    if (params.inputType === 'Text Data') {\n      self.generateTextData(256);\n    } else {\n      self.generateFunctionData(params.type, 3, params.stepSize, params.size,\n          params.noise);\n    }\n  };\n\n  /**\n   * This function creates a continous array of single prediction values\n   * for the current test input values. The predicted values are being added\n   * to the values so that the model needs to predict the function with its\n   * own previous predictions\n   *\n   * @param {array} inputType the type of data the network is operating on\n   * @return {number[]} the predicition array\n   */\n  self.createPrediction = (inputType) => {\n    const output = [];\n    let preds;\n    let prediction;\n    let inputBuff;\n    const newInput = [];\n    for (const step in self.testInput) {\n      newInput.push(self.testInput[step]);\n    }\n    // For a number of outputs, create predictions to draw as the network output\n    for (let i = 0; i < self.testOutputs; i++) {\n      inputBuff = tf.tensor3d([newInput]);\n      prediction = self.model.predict(inputBuff);\n      preds = Array.from(prediction.arraySync());\n      output.push(preds[0]);\n      if (inputType === 'Text Data') {\n        for (const element in preds[0]) {\n          if ({}.hasOwnProperty.call(preds[0], element)) {\n            preds[0][element] = Math.round(preds[0][element]);\n          }\n        }\n      }\n      newInput.splice(0, 1);\n      newInput.push(preds[0]);\n    }\n    return output;\n  };\n\n  /** Function Data Functions *************************************************/\n  /**\n   * The actual function for generating the data sets used for training\n   *\n   * @param {string} funcs the type of function the network should be trained on\n   * @param {number} plotLength the size of the interval of the input values\n   * @param {number} stepSize the distance between two values in the data set\n   * @param {number} setSize amount of individual training data within the set\n   * @param {number} noise amount of noise added onto the training data (0-2)\n   */\n  self.generateFunctionData = (funcs, plotLength, stepSize, setSize,\n      noise = 0) => {\n    self.trainInputBuff = [];\n    self.trainOutputBuff = [];\n    self.testInputBuff = [];\n    self.values = Math.round(plotLength / stepSize);\n    self.testOutputs = 2 * Math.PI / stepSize;\n    self.stepSize = stepSize;\n    self.chartPredictionInput = [];\n    self.chartDataInput = [];\n    self.chartDataOutput = [];\n    self.maxNoise = 0.2;\n    if (funcs === undefined || funcs.length === 0) {\n      return;\n    }\n    // Train data\n    // How many sets to generate per function\n    const partialSetSize = setSize / funcs.length;\n    self.trainData(stepSize, partialSetSize, funcs, noise);\n    // Test data\n    self.testData(stepSize, funcs, noise);\n  };\n\n  /**\n   * A helper function that creates a specific amount of training data\n   * for a certain input function\n   *\n   * @param {number} stepSize the distance between two values in the data set\n   * @param {number} partialSetSize the size of the current part of the\n   * training set\n   * @param {string} funcs the functions to be used for calculating the input\n   * values\n   * @param {number} noise the percentage of noise to be added to the input\n   */\n  self.trainData = (stepSize, partialSetSize, funcs, noise) => {\n    const setOffsetRatio = (2 * Math.PI) / partialSetSize;\n    const startOffset = 2 * Math.PI * Math.random();\n    for (let i = 0; i < partialSetSize; i++) {\n      const trainInputSequence = [];\n      const start = i * setOffsetRatio + startOffset;\n      for (let j = 0; j < self.values; j++) {\n        const noiseVal = - noise + (2 * noise * Math.random());\n        let val = 1;\n        for (const func in funcs) {\n          val = val * self.dataFunc(start + (j * stepSize), funcs[func]) +\n          noiseVal;\n        }\n        trainInputSequence.push([val]);\n      }\n      self.trainInputBuff.push(trainInputSequence);\n      const currentOutSequence = [];\n      let val = 1;\n      for (const func in funcs) {\n        val = val * self.dataFunc(self.values * stepSize + start, funcs[func]);\n      }\n      currentOutSequence.push(val);\n      self.trainOutputBuff.push(currentOutSequence);\n    }\n    self.trainInput = tf.tensor3d(self.trainInputBuff);\n    self.trainOutput = tf.tensor2d(self.trainOutputBuff);\n  };\n\n  /**\n   * A helper function that creates the test data for a network epoch\n   *\n   * @param {number} stepSize the distance between two values in the data set\n   * @param {array} funcs the functions to be used for calculating the input\n   * values\n   * @param {number} noise the percentage of noise to be added to the input\n   */\n  self.testData = (stepSize, funcs, noise) => {\n    const testInputSequence = [];\n    // Choose a random offset\n    const offset = Math.random() * Math.PI;\n    // Generate the test input data\n    for (let j = 0; j < self.values; j++) {\n      // Add noise to the input data\n      const noiseVal = - noise + (2 * noise * Math.random());\n      let val = 1;\n      for (const func in funcs) {\n        val = val * self.dataFunc(j * stepSize + offset, funcs[func]) +\n        noiseVal;\n      }\n      testInputSequence.push([val]);\n      self.chartDataInput.push(val);\n      self.chartPredictionInput.push(val);\n    }\n    self.testInputBuff.push(testInputSequence);\n    const currentOutSequence = [];\n    let x;\n    for (let j = 0; j < self.testOutputs; j++) {\n      x = (self.values + j) * stepSize;\n      let val = 1;\n      for (const func in funcs) {\n        val = val * self.dataFunc(x + offset, funcs[func]);\n      }\n      currentOutSequence.push(val);\n      self.chartDataOutput.push(val);\n    }\n    self.chartDataInput.push();\n    self.chartPredictionInput.push();\n    self.testInput = testInputSequence;\n  };\n\n  /**\n   * A helper function that represents the currently chosen input function\n   *\n   * @param {number} x the current input value\n   * @param {string} type the type of function that should be applied to\n   *  the input values\n   * @return {number} y = type(x)\n   */\n  self.dataFunc = (x, type) => {\n    let y = Math.sin(x); // standard sin function\n    if (type === 'sinc') {\n      y = (Math.sin(1.5*x) + Math.sin(4.5 * x)) / 1.5; // composite sin function\n    }\n    if (type === 'saw') {\n      y = -1 + 2 * ((x % Math.PI) / Math.PI); // sawtooth function\n    }\n    if (type === 'sqr') {\n      y = Math.sin((Math.PI/2)*x) >= 0 ? 1 : -1; // squarewave\n    }\n    return y;\n  };\n\n  /** Text Data Functions *****************************************************/\n  /**\n   * The actual function for generating the data sets used for training\n   *\n   * @param {number} numExamples Number of examples to generate.\n   */\n  self.generateTextData = (numExamples) => {\n    self.generateExampleBeginIndices(20);\n    self.trainInputBuff = [];\n    self.trainOutputBuff = [];\n    self.testInputBuff = [];\n    self.testOutputs = 5;\n    self.chartPredictionInput = [];\n    self.chartDataInput = [];\n    self.chartDataOutput = [];\n    self.maxNoise = 0.2;\n    // Train data\n    self.textTrainData(numExamples, 20);\n    // Test data\n    self.textTestData(20);\n  };\n\n  /**\n   * A helper function that creates a specific amount of training data\n   * for a certain input function\n   *\n   * @param {number} numExamples Number of examples to generate.\n   * @param {number} sampleLen the length of a training example in characters\n   */\n  self.textTrainData = (numExamples, sampleLen) => {\n    for (let i = 0; i < numExamples; i++) {\n      const trainInputSequence = [];\n      const start = self.textData.exampleBeginIndices[\n          self.textData.examplePosition %\n          self.textData.exampleBeginIndices.length];\n      for (let j = 0; j < sampleLen; j++) {\n        const val = self.textData.indices[start + j];\n        const valueArray = new Array(self.textData.charSetSize).fill(0);\n        valueArray[val] = 1;\n        trainInputSequence.push(valueArray);\n      }\n      self.trainInputBuff.push(trainInputSequence);\n      const val = self.textData.indices[sampleLen + start];\n      const valueArray = new Array(self.textData.charSetSize).fill(0);\n      valueArray[val] = 1;\n      self.trainOutputBuff.push(valueArray);\n      self.textData.examplePosition++;\n    }\n    self.trainInput = tf.tensor3d(self.trainInputBuff);\n    self.trainOutput = tf.tensor2d(self.trainOutputBuff);\n  };\n\n  /**\n   * A helper function that creates the test data for a network epoch\n   *\n   * @param {number} sampleLen the length of a training example in characters\n   */\n  self.textTestData = (sampleLen) => {\n    let val = 0;\n    const testInputSequence = [];\n    let offset = self.textData.exampleBeginIndices[0];\n    // If we exceed the end of the book, go back a little\n    if ((offset + sampleLen + self.testOutputs) >= self.textData.textLen) {\n      offset = offset - self.textOutputs;\n    }\n    // Generate the test input data\n    for (let j = 0; j < sampleLen; j++) {\n      // Add noise to the input data\n      val = self.textData.indices[j + offset];\n      const valueArray = new Array(self.textData.charSetSize).fill(0);\n      valueArray[val] = 1;\n      testInputSequence.push(valueArray);\n      self.chartDataInput.push(valueArray);\n      self.chartPredictionInput.push(valueArray);\n    }\n    self.testInputBuff.push(testInputSequence);\n    const currentOutSequence = [];\n    let x;\n    for (let j = 0; j < self.testOutputs; j++) {\n      x = sampleLen + j + offset;\n      val = self.textData.indices[x];\n      const valueArray = new Array(self.textData.charSetSize).fill(0);\n      valueArray[val] = 1;\n      currentOutSequence.push(valueArray);\n      self.chartDataOutput.push(valueArray);\n    }\n    self.chartDataInput.push();\n    self.chartPredictionInput.push();\n    self.testInput = testInputSequence;\n  };\n\n  /**\n   * Generate the example-begin indices; shuffle them randomly.\n   *\n   * @param {number} sampleLen the length of a training example in characters\n   */\n  self.generateExampleBeginIndices = (sampleLen) => {\n    // Prepare beginning indices of examples.\n    self.textData.exampleBeginIndices = [];\n    for (let i = 0; i < self.textData.textLen - sampleLen - 1; i += 1) {\n      self.textData.exampleBeginIndices.push(i);\n    }\n    // Randomly shuffle the beginning indices.\n    tf.util.shuffle(self.textData.exampleBeginIndices);\n    self.textData.examplePosition = 0;\n  };\n};\n","/**\n * A necessary helper class to set up the worker thread\n */\nexport default class WebWorker {\n  /**\n     * Adds the worker's code to the global context so that it can be accessed\n     * within the application\n     *\n     * @param {*} worker the worker thread handling the network model\n     */\n  constructor(worker) {\n    const code = worker.toString();\n    const blob = new Blob(['(' + code + ')()']);\n    return new Worker(URL.createObjectURL(blob));\n  }\n}\n","/**\n * A class for text data.\n *\n * This class manages the following:\n *\n * - Converting training data (as a string) into one-hot encoded vectors.\n * - Drawing random slices from the training data. This is useful for training\n *   models and obtaining the seed text for model-based text generation.\n */\nexport class TextData {\n  /**\n   * Constructor of TextData.\n   *\n   * @param {string} textString The training text data.\n   */\n  constructor(textString) {\n    this.textString = textString;\n    this.textLen = textString.length;\n    this.getCharSet();\n    this.convertAllTextToIndices();\n  }\n\n  /**\n   * Convert text string to integer indices.\n   *\n   * @param {string} text Input text.\n   * @return {number[]} Indices of the characters of `text`.\n   */\n  textToIndices(text) {\n    const indices = [];\n    for (let i = 0; i < text.length; ++i) {\n      indices.push(this.charSet.indexOf(text[i]));\n    }\n    return indices;\n  }\n\n  /**\n   * Get the set of unique characters from text.\n   */\n  getCharSet() {\n    this.charSet = [];\n    for (let i = 0; i < this.textLen; ++i) {\n      if (this.charSet.indexOf(this.textString[i]) === -1) {\n        this.charSet.push(this.textString[i]);\n      }\n    }\n    this.charSetSize = this.charSet.length;\n  }\n\n  /**\n   * Convert all training text to integer indices.\n   */\n  convertAllTextToIndices() {\n    this.indices = new Uint16Array(this.textToIndices(this.textString));\n  }\n\n  /**\n   * Get the unique character at given index from the character set.\n   *\n   * @param {number} index\n   * @return {string} The unique character at `index` of the character set.\n   */\n  getFromCharSet(index) {\n    return this.charSet[index];\n  }\n\n  /**\n   * Get a character from a one-hot array.\n   *\n   * @param {array} arr the one-hot encoding of the character index\n   * @return {String} the character that is most activated\n   */\n  getFromOneHot(arr) {\n    if (Array.isArray(arr)) {\n      const index = arr.indexOf(Math.max(...arr));\n      let char = this.getFromCharSet(index);\n      if (char === ' ') {\n        char = '␣';\n      }\n      return char ? char : '';\n    } else {\n      return '';\n    }\n  }\n}\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport PropTypes from 'prop-types';\n\nimport * as actions from '../../actions';\n\nimport worker from './worker.js';\nimport TrainingWorker from './TrainingWorker';\nimport {TextData} from '../../helpers/TextData';\n\n/**\n * This class handles the generation, compilation and training of the\n * used recurrent neural network\n */\nclass Training extends React.Component {\n  /**\n   * This method gets called when this component has been mounted and then\n   * initializes all necessary objects used for the training steps\n   */\n  async componentDidMount() {\n    // Get and init the worker that is used for async training\n    this.worker = new TrainingWorker(worker);\n    this.worker.onmessage = this.onmessage;\n    this.worker.postMessage({\n      cmd: 'init',\n      params: {\n        type: this.props.training.dataTypes,\n        noise: this.props.training.noise,\n        size: this.props.training.dataSetSize,\n        stepSize: this.props.training.stepSize,\n      },\n    });\n    this.reset();\n  }\n\n  /**\n   * Handles messages from the worker thread\n   *\n   * @param {event} e the event that sends the message\n   */\n  onmessage = (e) => {\n    const buff = e.data.values;\n    let network = this.props.network;\n    switch (e.data.cmd) {\n      case 'init': // worker has been initialized\n        this.props.actions.updateTraining({\n          ...this.props.training,\n          values: buff.values,\n          predictions: buff.predictions,\n        });\n        break;\n      case 'fit': // worker has trained the network for one epoch\n        if (this.props.training.running) {\n          this.iterate(true);\n        }\n        this.props.actions.updateTraining({\n          ...this.props.training,\n          workerReady: true,\n        });\n        break;\n      case 'data': // worker has generated a new data set\n        network = this.addDataToNetwork(this.props.network, buff.chartIn,\n            buff.chartOut, buff.chartPred);\n        this.props.actions.updateNetwork(network);\n        this.props.actions.updateTraining({\n          ...this.props.training,\n          workerReady: true,\n          values: buff.values,\n          predictions: buff.predictions,\n        });\n        break;\n      case 'pred': // worker has calculated prediction for the current test data\n        network = this.addPredictionToNetwork(this.props.network, buff.pred);\n        this.props.actions.updateNetwork(network);\n        break;\n      default:\n        break;\n    }\n  };\n\n  /**\n   * This function is called if the state props have been changed and\n   * then it checks if the training should be updated\n   *\n   * @param {object} prevProps the previous properties\n   */\n  componentDidUpdate(prevProps) {\n    const this_ = this;\n    if (this.props.training.running !== prevProps.training.running) {\n      if (this.props.training.running) {\n        // new training phase has started\n        setTimeout(function() {\n          this_.iterate(true);\n        }, 100);\n      }\n    } else if (this.props.training.running && this.props.ui.ready) {\n      // the app is ready for a new fit call in the current training phase\n      setTimeout(function() {\n        this_.iterate(true);\n      }, 100);\n    }\n    if (this.props.training.reset) {\n      // the network/training values shall be regenerated with current values\n      this.reset();\n      this.props.actions.updateTraining(\n          {...this.props.training, reset: false, running: false,\n            workerReady: false}\n      );\n      this.props.actions.updateUI(\n          {...this.props.ui, reset: true,\n            ready: true,\n            running: false,\n            animStep: false,\n            netAnim: false,\n            lstmStep: 0,\n            trainingStep: 0,\n            state: [true, false, false],\n          }\n      );\n    }\n    if (this.props.training.step) {\n      // training shall continue for one epoch\n      this.iterate(false);\n      this.props.actions.updateUI(\n          {...this.props.ui, reset: true,\n            ready: true,\n            running: false,\n            animStep: false,\n            netAnim: false,\n            lstmStep: 0,\n            trainingStep: 0,\n            state: [true, false, false],\n          }\n      );\n      this.props.actions.updateTraining(\n          {...this.props.training, reset: false, step: false, running: false,\n            workerReady: !this.props.ui.ready,\n          }\n      );\n    }\n    // If in detail view, and no completed epoch, advance for one to get data\n    if (this.props.ui.detail && this.props.network.iteration === 0) {\n      this_.iterate(false);\n    }\n  }\n\n  /**\n   * Reseet the model depending on the Input Type\n   */\n  reset() {\n    if (this.props.training.inputType === 'Text Data') {\n      let textSample = 'data/abab.txt';\n      if (this.props.training.dataTypes[0] === 'lorem') {\n        textSample = 'data/lipsum.txt';\n      }\n      fetch(textSample)\n          .then((r) => r.text())\n          .then((text) => {\n            const textData = new TextData(text);\n            this.props.actions.updateTextData(textData);\n            this.worker.postMessage({\n              cmd: 'text',\n              params: {\n                textData: textData,\n              },\n            });\n            this.resetModel();\n          });\n    } else {\n      this.resetModel();\n    }\n  }\n\n  /**\n   * This method will currently create a new model with all new network\n   * values and also reset all saved data in the input, output and\n   * prediction arrays/tensors\n   */\n  resetModel() {\n    // Generate the model used for training\n    this.worker.postMessage({\n      cmd: 'model',\n      params: {\n        layers: this.props.network.layers,\n        cells: this.props.network.layerSize,\n        learningRate: this.props.network.learningRate,\n        training: this.props.training,\n      },\n    });\n    this.worker.postMessage({\n      cmd: 'data',\n      params: {\n        type: this.props.training.dataTypes,\n        inputType: this.props.training.inputType,\n        noise: this.props.training.noise,\n        size: this.props.training.dataSetSize,\n        stepSize: this.props.training.stepSize,\n      },\n    });\n    this.worker.postMessage({\n      cmd: 'pred',\n      params: {\n        type: this.props.training.inputType,\n      },\n    });\n    let ui = this.props.ui;\n    let network = this.props.network;\n    const training = {...this.props.training, workerReady: false};\n    // reset the datasets and create the new data for the upcoming training\n    network = {...network, iteration: 0};\n    network = this.addDataToNetwork(network, [], [], []);\n    network = this.addPredictionToNetwork(network, []);\n    ui = this.addDataToUI(ui, network);\n    this.props.actions.updateNetwork(network);\n    this.props.actions.updateUI(ui);\n    this.props.actions.updateTraining(training);\n  }\n\n  /**\n   * This function takes all current generated data values used for training\n   * the network and saves them in the global state object\n   *\n   * @param {object} oldNetwork the previous network object from the state\n   * @param {number[]} chartInput the input values to be drawn on the screen\n   * @param {number[]} chartOutput the output values to be drawn on the screen\n   * @param {number[]} chartPrediction the prediction input\n   *  values to be drawn on the screen\n   * @return {object} the new network object with the updated data\n   */\n  addDataToNetwork(oldNetwork, chartInput, chartOutput,\n      chartPrediction) {\n    const data = {\n      chartInput: chartInput,\n      chartOutput: chartOutput,\n      chartPrediction: chartPrediction,\n    };\n    const network = {...oldNetwork, data: data};\n    return network;\n  }\n\n  /**\n   * Adds the net prediction for the current time step to the global state\n   *\n   * @param {object} oldNetwork the previous network object from the state\n   * @param {number[]} prediction the prediciton values predicted by\n   *  the neural network\n   * @return {object} the new network object with the updated data\n   */\n  addPredictionToNetwork(oldNetwork, prediction) {\n    const data = oldNetwork.data;\n    data.prediction = prediction;\n    const network = {...oldNetwork, data: data};\n    return network;\n  }\n\n  /**\n   * This funtion adds the current training values with the current prediction\n   * to the ui object, so the plots can be drawn accurately\n   *\n   * @param {object} oldUI the previous ui object from the state\n   * @param {object} network the current network object from the state\n   * @return {object} the new ui object with the updated data\n   */\n  addDataToUI(oldUI, network) {\n    const data = oldUI.data;\n    data.pop();\n    data.unshift(network.data);\n    data[2] = network.data;\n    const newUI = {...oldUI, data: data};\n    return newUI;\n  }\n\n  /**\n   * This is the main function for training the neural network, the datasets\n   * for the current time step are generated according to the user input\n   * values, a prediction for the current input is computed and then the\n   * network is trained by comparing predicted output to actual output\n   *\n   * @param {boolean} animate true, if the output should be animated\n   */\n  async iterate(animate) {\n    let network = this.props.network;\n    if (this.props.ui.ready) {\n      let ui = this.props.ui;\n      ui = this.addDataToUI(ui, network);\n      this.props.actions.updateUI({...ui, ready: !animate, running: animate});\n    } else {\n      return;\n    }\n    this.props.actions.updateTraining(\n        {...this.props.training, step: false, ready: false, workerReady: false}\n    );\n    // Prepare the data\n    this.worker.postMessage({\n      cmd: 'data',\n      params: {\n        type: this.props.training.dataTypes,\n        inputType: this.props.training.inputType,\n        noise: this.props.training.noise,\n        size: this.props.training.dataSetSize,\n        stepSize: this.props.training.stepSize,\n      },\n    });\n    this.worker.postMessage({\n      cmd: 'pred',\n      params: {\n        type: this.props.training.inputType,\n      },\n    });\n    this.worker.postMessage({\n      cmd: 'fit',\n      params: {\n        epochs: 1,\n        batchSize: this.props.training.batchSize,\n        reset: false,\n      },\n    });\n    network = {...network, iteration: this.props.network.iteration + 1};\n    this.props.actions.updateNetwork(network);\n  }\n\n  /**\n   * An empty render function needed for react\n   *\n   * @return {object} null\n   */\n  render() {\n    return null;\n  }\n}\n\nTraining.propTypes = {\n  network: PropTypes.object.isRequired,\n  training: PropTypes.object.isRequired,\n  ui: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired,\n};\n\n/**\n * Map the states from redux to this property.\n *\n * @param {object} state - the global redux state.\n * @return {object} - the new props of this component.\n */\nfunction mapStateToProps(state) {\n  return {\n    network: state.network,\n    training: state.training,\n    ui: state.ui,\n  };\n}\n\n/**\n * Maps the actions to this property.\n *\n * @param {function} dispatch - the function that is used to call an action.\n * @return {object} - the actions that can be used in this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Training);\n","const descriptionsENG = {\n  epoch: [\n    [\n      {\n        'type': 'plain',\n        'text': 'When training a Neural Network, a lot of data used to learn ' +\n        'how to change the weights is fed into the network. This data ' +\n        'is usually ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'fed into the network in small batches.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'Once all batches in the whole dataset have been processed, ' +\n        'one ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'epoch ',\n      },\n      {\n        'type': 'plain',\n        'text': 'is finished. This means that the network has been trained on ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'each item in the dataset once',\n      },\n      {\n        'type': 'plain',\n        'text': '.',\n      },\n    ],\n  ],\n  welcome: [\n    [\n      {\n        'type': 'plain',\n        'text': 'This application is designed so you can experiment with, and ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'learn about recurrent neural networks ',\n      },\n      {\n        'type': 'plain',\n        'text': '(RNNs).',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'In contrast to fully connected or ' +\n        'convolutional neural networks, RNNs are designed to work with ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'sequential data. ',\n      },\n      {\n        'type': 'plain',\n        'text': 'Thus, they are used for tasks such as ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'translation, image captioning, and next element prediction.',\n      },\n    ],\n  ],\n  inputOnboarding: [\n    [\n      {\n        'type': 'plain',\n        'text': 'In this application, you can experiment with ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'function and text data. ',\n      },\n      {\n        'type': 'plain',\n        'text': 'Here on the left, you can select which dataset you want to ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'train on.',\n      },\n    ],\n  ],\n  networkOnboarding: [\n    [\n      {\n        'type': 'plain',\n        'text': 'This is the network that you can train. ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'Feel free to modify it.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'You can ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'add layers by clicking the + between the layers ',\n      },\n      {\n        'type': 'plain',\n        'text': 'and ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'remove them by hovering and clicking the red x.',\n      },\n    ],\n  ],\n  startTrainingOnboarding: [\n    [\n      {\n        'type': 'plain',\n        'text': 'Now, lets ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'start the training by hitting the play button!',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'If the network is paused, you can also advance individual ' +\n        'epochs using the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'forward button.',\n      },\n    ],\n  ],\n  outputOnboarding: [\n    [\n      {\n        'type': 'plain',\n        'text': 'To show how your network ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'currently performs',\n      },\n      {\n        'type': 'plain',\n        'text': ', we visualize ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'the prediction for a random dataset example',\n      },\n      {\n        'type': 'plain',\n        'text': ' in each epoch.',\n      },\n    ],\n  ],\n  cellTransitionOnboarding: [\n    [\n      {\n        'type': 'plain',\n        'text': 'Now that we have trained the network for a while, lets look ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'into one of these layers',\n      },\n      {\n        'type': 'plain',\n        'text': '. Clicking on one of them will show you the workings of a ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'LSTM cell.',\n      },\n    ],\n  ],\n  detailOutputOnboarding: [\n    [\n      {\n        'type': 'plain',\n        'text': 'In this plot, you can can see ' +\n        'the cell build up its ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'internal memory from the input values in the grey box.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'The network then makes a prediction based on this ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'internal state.',\n      },\n    ],\n  ],\n  detailCellOnboarding: [\n    [\n      {\n        'type': 'plain',\n        'text': 'In this, more detailed view, the training progresses in ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'slow-motion.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'This is a LSTM cell, which is used throughout the network. ' +\n        'To look into what ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'individual components of this cell do',\n      },\n      {\n        'type': 'plain',\n        'text': ', simply click one of the compute elements, to get a ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'detailed description.',\n      },\n    ],\n  ],\n  processOnboarding: [\n    [\n      {\n        'type': 'plain',\n        'text': 'Here, you can see the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'processing steps',\n      },\n      {\n        'type': 'plain',\n        'text': ' of the network you are currently training.',\n      },\n    ],\n  ],\n  slidersOnboarding: [\n    [\n      {\n        'type': 'plain',\n        'text': 'By interacting with these sliders, you can ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'change even more training parameters',\n      },\n      {\n        'type': 'plain',\n        'text': ' and see in the network overivew, how ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'the model reacts',\n      },\n      {\n        'type': 'plain',\n        'text': ' during training.',\n      },\n    ],\n  ],\n  headingExplanation: [\n    [\n      {\n        'type': 'plain',\n        'text': 'To get more information of individual components of this ' +\n        'app, ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'simply click any ⓘ',\n      },\n      {\n        'type': 'plain',\n        'text': ' in this visualization.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'Now, have fun ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'exploring RNNs!',\n      },\n    ],\n  ],\n  learningRate: [\n    [\n      {\n        'type': 'plain',\n        'text': 'The learning rate specifies, ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'how much the network weights are updated.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'High learning rates mean, that the prediction error leads to ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'bigger updates, ',\n      },\n      {\n        'type': 'plain',\n        'text': 'changing the network a lot. In practice, this means, that ' +\n        'the network learns faster. However, when the learning rate is ' +\n        'too high, the network will overshoot, and ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'never get to an optimal state.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'If the learning rate is super low, the chance that the ' +\n        'network finds the optimal solution is ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'higher',\n      },\n      {\n        'type': 'plain',\n        'text': ', but it will learn much ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'slower.',\n      },\n    ],\n  ],\n  batchSize: [\n    [\n      {\n        'type': 'plain',\n        'text': 'If we would train on every item individually, training would ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'take very long',\n      },\n      {\n        'type': 'plain',\n        'text': '. To circumvent this, we calculate the error for ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'multiple dataset items simultaneously.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'Here, you can set how many training items are ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'combined in a so-called batch',\n      },\n      {\n        'type': 'plain',\n        'text': '. Weight updates are then made based on the error for the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'whole batch.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'Larger batches ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'speed up training',\n      },\n      {\n        'type': 'plain',\n        'text': ', but can lead to ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'a loss of focus on individual training samples.',\n      },\n    ],\n  ],\n  noise: [\n    [\n      {\n        'type': 'plain',\n        'text': 'If we only check if the net can recreate given functions ' +\n        'we are prone to ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'overfitting',\n      },\n      {\n        'type': 'plain',\n        'text': '. Meaning the network only works well on the specific ' +\n        'data used in the training process.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'In real world scenarios, measurements are almost ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'never perfect',\n      },\n      {\n        'type': 'plain',\n        'text': ', and we want the network to generalize to ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'unseen data.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'To give the network a more challenging and realistic task, ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'you can distort the input values',\n      },\n      {\n        'type': 'plain',\n        'text': '. The higher this noise is the harder it is for the network ' +\n        ' to recognize the underlying function.',\n      },\n    ],\n  ],\n  forward: [\n    [\n      {\n        'type': 'plain',\n        'text': 'To teach the network how to continue a sequence, one needs ' +\n        'to first ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'give the network data it can learn from.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'The network then makes predictions based on this data, ' +\n        'suggesting how it ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'currently thinks, the sequence would continue.',\n      },\n    ],\n  ],\n  validation: [\n    [\n      {\n        'type': 'plain',\n        'text': 'After a prediction is made on the training data, we can ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'calculate the prediction error.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'This is done by ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'comparing the prediction with what would actually be correct',\n      },\n      {\n        'type': 'plain',\n        'text': '. This is also referred to as comparing the prediction to ' +\n        'the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'ground truth.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'This difference is then used as the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'loss',\n      },\n      {\n        'type': 'plain',\n        'text': ', which is important for the backward step.',\n      },\n    ],\n  ],\n  backward: [\n    [\n      {\n        'type': 'plain',\n        'text': 'After making predictions and calculating the loss, the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'network weights get updated.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'This is done by ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'backpropagating the error through the network',\n      },\n      {\n        'type': 'plain',\n        'text': ', and for RNNs, also ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'through time.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'Here, the network learns, how weights for ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'individual layers ',\n      },\n      {\n        'type': 'plain',\n        'text': '(backpropagation through network), but also for individual ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'timesteps of the input function ',\n      },\n      {\n        'type': 'plain',\n        'text': '(backpropagation through time), should be changed to ' +\n        'the predictions.',\n      },\n    ],\n  ],\n  layerInputStep: [\n    [\n      {\n        'type': 'plain',\n        'text': 'To inform the gates of the cell about which information ' +\n        'is relevant to be ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'integrated into the cell state',\n      },\n      {\n        'type': 'plain',\n        'text': ', what aprt of the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'previous cell state can be forgotten',\n      },\n      {\n        'type': 'plain',\n        'text': ', and what part of the cell state is ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'output as the cell activation, ',\n      },\n      {\n        'type': 'plain',\n        'text': 'LSTM cells use both, the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'input to this cell',\n      },\n      {\n        'type': 'plain',\n        'text': ', and the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'activation of this cell from the previous time step.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'This combined input information is referred to as the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'layer input.',\n      },\n    ],\n  ],\n  gateStep: [\n    [\n      {\n        'type': 'plain',\n        'text': 'Using the information that is combined as the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'layer input',\n      },\n      {\n        'type': 'plain',\n        'text': ', all three gates use their own weights and biases to ' +\n        'compute the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'gate activation',\n      },\n      {\n        'type': 'plain',\n        'text': ', which determines what part of information is used for ' +\n        'updating the cell state and calculating the cell activation.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'The ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'input gate',\n      },\n      {\n        'type': 'plain',\n        'text': ' filters what part of the layer input is used to ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'update the cell state',\n      },\n      {\n        'type': 'plain',\n        'text': 'with new information.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'The ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'forget gate',\n      },\n      {\n        'type': 'plain',\n        'text': ' filters what part of the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'cell state can be forgotten.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'The ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'output gate',\n      },\n      {\n        'type': 'plain',\n        'text': ' filters what part of the cell state is used to ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'compute the cell activation.',\n      },\n    ],\n  ],\n  updateStep: [\n    [\n      {\n        'type': 'plain',\n        'text': 'Using the filters of the input gate and the forget gate, ' +\n        'the cell state is updated with ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'a mix of new information and information from the old cell ' +\n        'state.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'The ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'input gate',\n      },\n      {\n        'type': 'plain',\n        'text': ' is used in combination with the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'layer input',\n      },\n      {\n        'type': 'plain',\n        'text': ' to determine what new information gets added to the ' +\n        'cell state.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'The ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'forget gate',\n      },\n      {\n        'type': 'plain',\n        'text': ' is used in combination with the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'previous cell state',\n      },\n      {\n        'type': 'plain',\n        'text': ' to determine what information from the previous cell ' +\n        'state can be forgotten.',\n      },\n    ],\n  ],\n  outputStep: [\n    [\n      {\n        'type': 'plain',\n        'text': 'Finally, the cell needs to output an ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'activation value',\n      },\n      {\n        'type': 'plain',\n        'text': ', which can be used as ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'an input to the next cell, or as a prediction output.',\n      },\n      {\n        'type': 'plain',\n        'text': 'It is also used ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'recurrently',\n      },\n      {\n        'type': 'plain',\n        'text': ' as an input to this cell for the next time step.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'The activation is computed as ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'filtered information',\n      },\n      {\n        'type': 'plain',\n        'text': ' from the cell state. Here, the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'output gate',\n      },\n      {\n        'type': 'plain',\n        'text': ' is used for this filtering.',\n      },\n    ],\n  ],\n  layerInput: [\n    [\n      {\n        'type': 'plain',\n        'text': 'For informing all the gates, ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'both, the current input to the cell ',\n      },\n      {\n        'type': 'plain',\n        'text': 'and ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'the activation of the previous timestep ',\n      },\n      {\n        'type': 'plain',\n        'text': 'are needed.',\n      },\n    ],\n  ],\n  inputGate: [\n    [\n      {\n        'type': 'plain',\n        'text': 'The input gate is used as a measure for ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'what part of the input is used for updating the cell state ',\n      },\n      {\n        'type': 'plain',\n        'text': 'with new information.',\n      },\n      {\n        'type': 'formulas',\n        'formulas': [\n          'i^t = sigmoid(W_{ix}x^t + W_{ia}a^{t-1} + b_i)',\n        ],\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'It is used to calculate the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'filtered input ',\n      },\n      {\n        'type': 'plain',\n        'text': 'to update the internal cell state.',\n      },\n      {\n        'type': 'formulas',\n        'formulas': [\n          '\\\\text{filtered_input} = i^t \\\\circ tanh(W_{cx}x^t + ' +\n          'W_{ca}a^{t-1} + b_c)',\n        ],\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': '',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': '',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'Symbols:',\n      },\n      {\n        'type': 'formulas',\n        'formulas': [\n          'i^t: \\\\text{the input gate}',\n          'x^t: \\\\text{the input from the previous cell at time step t}',\n          'a^{t-1}: \\\\text{the activation of this cell from the previous ' +\n            'time step}',\n          'W: \\\\text{trainable weight parameters}',\n          'b: \\\\text{trainable bias parameters}',\n        ],\n      },\n    ],\n  ],\n  forgetGate: [\n    [\n      {\n        'type': 'plain',\n        'text': 'The forget gate determines ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'what part of the old cell state can be forgotten.',\n      },\n      {\n        'type': 'formulas',\n        'formulas': [\n          'f^t = sigmoid(W_{fx}x^t + W_{fa}a^{t-1} + b_f)',\n        ],\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'It is used to calculate the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'filtered state ',\n      },\n      {\n        'type': 'plain',\n        'text': 'to update the internal cell.',\n      },\n      {\n        'type': 'formulas',\n        'formulas': [\n          '\\\\text{filtered_state} = f^t \\\\circ c^{t-1}',\n        ],\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': '',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': '',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'Symbols:',\n      },\n      {\n        'type': 'formulas',\n        'formulas': [\n          'f^t: \\\\text{the forget gate}',\n          'x^t: \\\\text{the input from the previous cell at time step t}',\n          'a^{t-1}: \\\\text{the activation of this cell from the previous ' +\n            'time step}',\n          'c^{t-1}: \\\\text{the cell state from the previous time step}',\n          'W: \\\\text{trainable weight parameters}',\n          'b: \\\\text{trainable bias parameters}',\n        ],\n      },\n    ],\n  ],\n  outputGate: [\n    [\n      {\n        'type': 'plain',\n        'text': 'The output gate is responsible for filtering ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'what part of the current cell state is used as the output ' +\n        'activation ',\n      },\n      {\n        'type': 'plain',\n        'text': 'of the cell.',\n      },\n      {\n        'type': 'formulas',\n        'formulas': [\n          'o^t = sigmoid(W_{ox}x^t + W_{oa}a^{t-1} + b_o)',\n        ],\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'Using the output gate, one can then ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'compute the cell activation',\n      },\n      {\n        'type': 'plain',\n        'text': ', which is used as input to the next cell, as well as ' +\n          'recurrently in the same cell at the next time step.',\n      },\n      {\n        'type': 'formulas',\n        'formulas': [\n          'a^t = o^t \\\\circ tanh(c^t)',\n        ],\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': '',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': '',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'Symbols:',\n      },\n      {\n        'type': 'formulas',\n        'formulas': [\n          'o^t: \\\\text{the output gate}',\n          'a^t: \\\\text{the activation of this cell for the current timestep}',\n          'x^t: \\\\text{the input from the previous cell at time step t}',\n          'a^{t-1}: \\\\text{the activation of this cell from the previous ' +\n            'time step}',\n          'c^{t}: \\\\text{the current cell state}',\n          'W: \\\\text{trainable weight parameters}',\n          'b: \\\\text{trainable bias parameters}',\n        ],\n      },\n    ],\n  ],\n  stateUpdate: [\n    [\n      {\n        'type': 'plain',\n        'text': 'To update the cell state, ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'the filtered input ',\n      },\n      {\n        'type': 'plain',\n        'text': 'is combined with ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'the filtered state ',\n      },\n      {\n        'type': 'plain',\n        'text': 'of the previous time step.',\n      },\n    ],\n  ],\n  memoryCell: [\n    [\n      {\n        'type': 'plain',\n        'text': 'The ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'cell state ',\n      },\n      {\n        'type': 'plain',\n        'text': 'is the heart of any LSTM cell. By having a cell state, and ' +\n        'deciding how to update it based on ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'the filtered input and previous state',\n      },\n      {\n        'type': 'plain',\n        'text': ', LSTM cells are able to ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'capture long-term dependencies.',\n      },\n      {\n        'type': 'formulas',\n        'formulas': [\n          'c^t = \\\\text{filtered_input} + \\\\text{filtered_state}',\n        ],\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': '',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': '',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'Symbols:',\n      },\n      {\n        'type': 'formulas',\n        'formulas': [\n          'c^t: \\\\text{the cell state at timestep t}',\n        ],\n      },\n    ],\n  ],\n  inputHeading: [\n    [\n      {\n        'type': 'plain',\n        'text': 'The input to a recurrent neural network can be ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'sequential data.',\n      },\n      {\n        'type': 'plain',\n        'text': ' We use ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'periodic functions ',\n      },\n      {\n        'type': 'plain',\n        'text': 'and ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'simple text snippets ',\n      },\n      {\n        'type': 'plain',\n        'text': 'to illustrate this.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'For other tasks, such as ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'image captioning',\n      },\n      {\n        'type': 'plain',\n        'text': ', which does not include sequential input data, the network ' +\n        'only gets an input value for the first time step, and then has to ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'recurrently build a caption ',\n      },\n      {\n        'type': 'plain',\n        'text': 'by outputting one word at a time, which, again, makes it a ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'sequential task.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'This way, recurrent neural networks can be used for tasks ' +\n        'with ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'sequential input and non-sequential output (many-to-one)',\n      },\n      {\n        'type': 'plain',\n        'text': ', such as next element prediction. Tasks with ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'sequential input and sequential output (many-to-many)',\n      },\n      {\n        'type': 'plain',\n        'text': ', such as translation. As well as tasks with ',\n      },\n      {\n        'type': 'highlighted',\n        'text': ' non-sequential input and sequential output (one-to-many)',\n      },\n      {\n        'type': 'plain',\n        'text': ', such as image captioning.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'As the general concepts for these tasks does not differ, ' +\n        'we focus on ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'next element prediction',\n      },\n      {\n        'type': 'plain',\n        'text': ' in this application, which is a many-to-one task.',\n      },\n    ],\n  ],\n  networkHeading: [\n    [\n      {\n        'type': 'plain',\n        'text': 'a recurrent neural network is built up in a similar way as ' +\n        'convolutional or fully connected neural networks, where ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'multiple layers',\n      },\n      {\n        'type': 'plain',\n        'text': ' are connected to extract information from the input.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'The great speciality of recurrent neural networks is, ' +\n        'that they also use ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'information from previous time steps',\n      },\n      {\n        'type': 'plain',\n        'text': ' for their predictions.',\n      },\n      {\n        'type': 'plain',\n        'text': ' This is visualized by the loops in their network glyphs.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'To achieve this, they have weights not only for how ' +\n        'information is processed throughout layers, but also for how ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'information from previous time steps',\n      },\n      {\n        'type': 'plain',\n        'text': ' is processed.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'During trianing, this means that the error is not only ' +\n        'backpropagated through the layers, but also ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'through time',\n      },\n      {\n        'type': 'plain',\n        'text': ', to update the weights responsible for determining how ' +\n        'information from previous time steps is processed.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'This can be thought of as the error ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'flowing backwards through the loops',\n      },\n      {\n        'type': 'plain',\n        'text': ' in the network, as well as through the lines connecting ' +\n        'the layers.',\n      },\n    ],\n  ],\n  predictionHeading: [\n    [\n      {\n        'type': 'plain',\n        'text': 'The prediction visualization shows how the network performs ' +\n        'on a ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'random example ',\n      },\n      {\n        'type': 'plain',\n        'text': 'from the dataset.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'The ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'grey area',\n      },\n      {\n        'type': 'plain',\n        'text': ' shows, how many previous data points the network needs for ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'building up its internal state',\n      },\n      {\n        'type': 'plain',\n        'text': '. The network will then make a prediction after these inputs' +\n        ' have been processed.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'The ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'prediction accuracy',\n      },\n      {\n        'type': 'plain',\n        'text': ' will normally get ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'worse for later predictions',\n      },\n      {\n        'type': 'plain',\n        'text': '. This comes from the fact, that the network first builds ' +\n        'its internal state from ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'training data',\n      },\n      {\n        'type': 'plain',\n        'text': ', whereas later, it needs to obtain its internal state from ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'previous predictions.',\n      },\n    ],\n  ],\n  cellHeading: [\n    [\n      {\n        'type': 'plain',\n        'text': 'A LSTM (long short-term memory) cell consists of ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'different gates',\n      },\n      {\n        'type': 'plain',\n        'text': ', that determine what information is used to update its ' +\n        'internal ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'cell state',\n      },\n      {\n        'type': 'plain',\n        'text': ', and what information within this cell state is used to ' +\n        'calculate the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'output activation.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'To learn more about the gates and memory of this cell, ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'click on one of the elements',\n      },\n      {\n        'type': 'plain',\n        'text': ' in this visualization.',\n      },\n    ],\n  ],\n  cellPlotHeading: [\n    [\n      {\n        'type': 'plain',\n        'text': 'The network first builds up its internal state, visualized ' +\n        'by the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'grey box',\n      },\n      {\n        'type': 'plain',\n        'text': ', before making a prediction.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'This prediction is then used, to ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'calculate the loss.',\n      },\n    ],\n    [\n      {\n        'type': 'plain',\n        'text': 'To make further predictions, as when generating text or ' +\n        'continuing a function, one can feed the network ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'its own prediction values',\n      },\n      {\n        'type': 'plain',\n        'text': ', to again build up the internal state with the ',\n      },\n      {\n        'type': 'highlighted',\n        'text': 'same number of time steps',\n      },\n      {\n        'type': 'plain',\n        'text': ' as at the beginning, where known datapoints were used.',\n      },\n    ],\n  ],\n};\n\nexport default {ENG: descriptionsENG};\n","import descriptionStrings from './descriptionStrings';\n\n// This file declares the global strings and values used in the application\nconst globalENG = {\n  title: 'exploRNN',\n  strings: {\n    controlsTitle: 'Controls',\n    lossTitle: 'Error',\n    plotInput: 'Input',\n    plotOutput: 'Target',\n    plotPrediction: 'Prediction',\n    tooltipCell: 'click for detail',\n    tooltipDelete: 'remove layer',\n    tooltipAdd: 'add layer',\n    dataExplanation: 'A random 🎲 element of the dataset\\nis shown for each ' +\n    'epoch.',\n    backpropExplanation: 'A series of predictions is shown, however,\\nfor ' +\n    'backpropagation, only the first prediction is considered.',\n    epoch: {\n      title: 'Epochs ⓘ',\n      description: descriptionStrings['ENG'].epoch,\n    },\n    // Onboarding\n    onboarding: {\n      welcome: {\n        title: 'Welcome to exploRNN!',\n        description: descriptionStrings['ENG'].welcome,\n        buttonTitles: {\n          skip: 'Skip Intro',\n          next: 'Next',\n        },\n        arrow: 'none',\n        style: {\n          position: 'absolute',\n          top: ' 300px',\n          left: 'calc(50% - 250px)',\n        },\n      },\n      input: {\n        title: 'Training Input',\n        description: descriptionStrings['ENG'].inputOnboarding,\n        buttonTitles: {\n          skip: 'Skip Intro',\n          next: 'Next',\n        },\n        arrow: 'left',\n        style: {\n          position: 'absolute',\n          top: ' 200px',\n          left: '10%',\n        },\n      },\n      network: {\n        title: 'Network',\n        description: descriptionStrings['ENG'].networkOnboarding,\n        buttonTitles: {\n          skip: 'Skip Intro',\n          next: 'Next',\n        },\n        arrow: 'up',\n        style: {\n          position: 'absolute',\n          top: 'calc(100% - 45vh)',\n          left: 'calc(35% - 250px)',\n        },\n      },\n      startTraining: {\n        title: 'Start Training',\n        description: descriptionStrings['ENG'].startTrainingOnboarding,\n        buttonTitles: {\n          skip: 'Skip Intro',\n          next: 'Lets Go!',\n        },\n        arrow: 'down',\n        style: {\n          position: 'absolute',\n          bottom: '26vh',\n          left: 'calc(50% - 250px)',\n        },\n      },\n      output: {\n        title: 'Validation',\n        description: descriptionStrings['ENG'].outputOnboarding,\n        buttonTitles: {\n          skip: 'Skip Intro',\n          next: 'Ok',\n        },\n        arrow: 'right',\n        style: {\n          position: 'absolute',\n          top: '200px',\n          left: 'calc(60% - 535px)',\n        },\n      },\n      cellTransition: {\n        title: 'LSTM Cells',\n        description: descriptionStrings['ENG'].cellTransitionOnboarding,\n        buttonTitles: {\n          skip: 'Skip Intro',\n          next: 'Sure!',\n        },\n        arrow: 'up',\n        style: {\n          position: 'absolute',\n          top: 'calc(100% - 45vh)',\n          left: 'calc(35% - 250px)',\n        },\n      },\n      detailOutput: {\n        title: 'Data Processing per Cell',\n        description: descriptionStrings['ENG'].detailOutputOnboarding,\n        buttonTitles: {\n          skip: 'Skip Intro',\n          next: 'Ok',\n        },\n        arrow: 'right',\n        style: {\n          position: 'absolute',\n          top: '200px',\n          left: 'calc(50% - 535px)',\n        },\n      },\n      detailCell: {\n        title: 'Cell Components',\n        description: descriptionStrings['ENG'].detailCellOnboarding,\n        buttonTitles: {\n          skip: 'Skip Intro',\n          next: 'Nice!',\n        },\n        arrow: 'left',\n        style: {\n          position: 'absolute',\n          top: '200px',\n          left: '50%',\n        },\n      },\n      detailProcess: {\n        title: 'Process',\n        description: descriptionStrings['ENG'].processOnboarding,\n        buttonTitles: {\n          skip: 'Skip Intro',\n          next: 'Ok',\n        },\n        arrow: 'down',\n        style: {\n          position: 'absolute',\n          bottom: '40vh',\n          left: 'calc(21% - 250px)',\n        },\n      },\n      sliders: {\n        title: 'Sliders',\n        description: descriptionStrings['ENG'].slidersOnboarding,\n        buttonTitles: {\n          skip: 'Skip Intro',\n          next: 'Ok',\n        },\n        arrow: 'down',\n        style: {\n          position: 'absolute',\n          bottom: '40vh',\n          left: 'calc(79% - 250px)',\n        },\n      },\n      headingExplanation: {\n        title: 'Explore',\n        description: descriptionStrings['ENG'].headingExplanation,\n        buttonTitles: {\n          skip: 'Skip Intro',\n          next: 'Explore',\n        },\n        arrow: 'none',\n        style: {\n          position: 'absolute',\n          top: ' 300px',\n          left: 'calc(50% - 250px)',\n        },\n      },\n    },\n    // Training steps in both views\n    trainSteps: [\n      {\n        id: 0,\n        title: 'Forward ⓘ',\n        description: 'Data is shown to the network value by value to build ' +\n        'up the internal state. After a fixed number of data points has been ' +\n        'processed, the network can make a prediction on how this sample ' +\n        'would continue.',\n        longDescription: descriptionStrings['ENG'].forward,\n      },\n      {\n        id: 1,\n        title: 'Validation ⓘ',\n        description: 'The predicted values are compared to the correct ' +\n        'values (ground truth) from the training dataset. The difference is ' +\n        'used to calculate the loss.',\n        longDescription: descriptionStrings['ENG'].validation,\n      },\n      {\n        id: 2,\n        title: 'Backward ⓘ',\n        description: 'The calculated loss is backpropagated through the ' +\n        'network as well as through time (reverting the input timesteps), to ' +\n        'find out where the prediction error came from and update the ' +\n        'network variables for the next iteration.',\n        longDescription: descriptionStrings['ENG'].backward,\n      },\n    ],\n    // Steps in the pane at the bottom left of the cell view\n    lstmSteps: [\n      {\n        id: 0,\n        title: 'Layer Input ⓘ',\n        description: 'The inputs from the previous layer is combined with ' +\n        'the output of this layer from the last time step. The layer input ' +\n        'is then used in all gates.',\n        longDescription: descriptionStrings['ENG'].layerInputStep,\n      },\n      {\n        id: 1,\n        title: 'Gate Activation ⓘ',\n        description: 'All gates are using the layer input to determine what ' +\n        'information should be use to update the cell state with, and what ' +\n        'part of the cell state should be output from this cell.',\n        longDescription: descriptionStrings['ENG'].gateStep,\n      },\n      {\n        id: 2,\n        title: 'Cell Update ⓘ',\n        description: 'The input gate filters the layer input to update the ' +\n        'cell state, whereas the forget gate determines what old cell state ' +\n        'values should be forgotten.',\n        longDescription: descriptionStrings['ENG'].updateStep,\n      },\n      {\n        id: 3,\n        title: 'Output ⓘ',\n        description: 'The cell state is filtered by the output gate to ' +\n        'compute the output activation and send it as a input to the next ' +\n        'layer.',\n        longDescription: descriptionStrings['ENG'].outputStep,\n      },\n    ],\n    // Headings throughout the application\n    headings: [\n      {\n        id: 1,\n        identifier: 'input',\n        title: 'Input ⓘ',\n        description: descriptionStrings['ENG'].inputHeading,\n      },\n      {\n        id: 2,\n        identifier: 'network',\n        title: 'Network ⓘ',\n        description: descriptionStrings['ENG'].networkHeading,\n      },\n      {\n        id: 3,\n        identifier: 'prediction',\n        title: 'Prediction ⓘ',\n        description: descriptionStrings['ENG'].predictionHeading,\n      },\n      {\n        id: 4,\n        identifier: 'cell',\n        title: 'LSTM Cell ⓘ',\n        description: descriptionStrings['ENG'].cellHeading,\n      },\n      {\n        id: 5,\n        identifier: 'cellPlot',\n        title: 'Network Data ⓘ',\n        description: descriptionStrings['ENG'].cellPlotHeading,\n      },\n    ],\n    // Elements in the cell view\n    lstmGates: [\n      {\n        id: 0,\n        title: 'Layer Input',\n        description: descriptionStrings['ENG'].layerInput,\n      },\n      {\n        id: 1,\n        title: 'Input Gate',\n        description: descriptionStrings['ENG'].inputGate,\n      },\n      {\n        id: 2,\n        title: 'Forget Gate',\n        description: descriptionStrings['ENG'].forgetGate,\n      },\n      {\n        id: 3,\n        title: 'Output Gate',\n        description: descriptionStrings['ENG'].outputGate,\n      },\n      {\n        id: 4,\n        title: 'State Update',\n        description: descriptionStrings['ENG'].stateUpdate,\n      },\n      {\n        id: 5,\n        title: 'Memory Cell',\n        description: descriptionStrings['ENG'].memoryCell,\n      },\n    ],\n  },\n  types: [\n    {name: 'RNN', disabled: true},\n    {name: 'LSTM', disabled: false},\n    {name: 'GRU', disabled: true},\n  ],\n  inputTypes: [\n    {name: 'Text Data', disabled: false},\n    {name: 'Function Data', disabled: false},\n  ],\n  languages: [\n    {name: 'ENG'},\n    {name: 'GER'},\n  ],\n  fontSize: {\n    small: 14,\n    default: 16,\n    title: 18,\n    header: 20,\n  },\n  // Sliders for the training parameters\n  sliders: [\n    {\n      key: 0,\n      title: 'Learning Rate ⓘ',\n      description: descriptionStrings['ENG'].learningRate,\n      step: 0.01,\n      min: -3,\n      max: 1,\n      marks: [\n        {\n          value: -3,\n          label: 0.0001,\n        },\n        {\n          value: -2,\n          label: 0.001,\n        },\n        {\n          value: -1,\n          label: 0.01,\n        },\n        {\n          value: 0,\n          label: 0.1,\n        },\n        {\n          value: 1,\n          label: 1,\n        },\n      ],\n    },\n    {\n      key: 1,\n      title: 'Batch Size ⓘ',\n      description: descriptionStrings['ENG'].batchSize,\n      step: 1,\n      min: 5,\n      max: 50,\n      marks: [\n        {\n          value: 5,\n          label: '5',\n        },\n        {\n          value: 25,\n          label: '25',\n        },\n        {\n          value: 50,\n          label: '50',\n        },\n      ],\n    },\n    {\n      key: 2,\n      title: 'Noise ⓘ',\n      description: descriptionStrings['ENG'].noise,\n      step: 0.01,\n      min: 0.0,\n      max: 0.4,\n      marks: [\n        {\n          value: 0,\n          label: '0.0',\n        },\n        {\n          value: 0.2,\n          label: '0.2',\n        },\n        {\n          value: 0.4,\n          label: '0.4',\n        },\n      ],\n    },\n  ],\n};\n\nexport default {ENG: globalENG};\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport styles from '../../../styles/themedStyles';\nimport {withStyles} from '@material-ui/core/styles';\nimport {Typography} from '@material-ui/core';\n\n/**\n * ComplexDialog is used to explain components of the App.\n */\nclass DescriptionItem extends React.Component {\n  /**\n   * Renders the Onboarding Screen inside the App.\n   *\n   * @return {object} AlertSnack component to be rendered\n   */\n  render() {\n    let className = '';\n    if (this.props.descriptionItem.type === 'highlighted') {\n      if (this.props.ui.detail) {\n        className = this.props.classes.typoCvHighlighted;\n      } else {\n        className = this.props.classes.typoOvHighlighted;\n      }\n    }\n    return (\n      <Typography display='inline' className={className}>\n        {this.props.descriptionItem.text}\n      </Typography>\n    );\n  }\n}\n\n// Prop Types holding all the Preferences\nDescriptionItem.propTypes = {\n  ui: PropTypes.object.isRequired,\n  descriptionItem: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n};\n\n/**\n * Map the State to the Properties of this Component\n *\n * @param {object} state the state that is to be mapped to this component\n * @param {object} _ the props of this component\n * @return {object} the props that this component holds\n */\nfunction mapStateToProps(state, _) {\n  return {\n    ui: state.ui,\n  };\n}\n\nexport default connect(mapStateToProps)(withStyles(styles)(DescriptionItem));\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {Node, Context} from 'react-mathjax2';\n\n/**\n * ComplexDialog is used to explain components of the App.\n */\nclass DescriptionItem extends React.Component {\n  /**\n   * Renders the Onboarding Screen inside the App.\n   *\n   * @return {object} AlertSnack component to be rendered\n   */\n  render() {\n    return (\n      <Context input='tex' options={{displayAlign: 'left'}}>\n        <span>\n          {\n            this.props.formulas.map((formula) => (\n              <Node key={formula}>\n                {formula}\n              </Node>\n            ))\n          }\n        </span>\n      </Context>\n    );\n  }\n}\n\n// Prop Types holding all the Preferences\nDescriptionItem.propTypes = {\n  ui: PropTypes.object.isRequired,\n  formulas: PropTypes.array.isRequired,\n};\n\n/**\n * Map the State to the Properties of this Component\n *\n * @param {object} state the state that is to be mapped to this component\n * @param {object} _ the props of this component\n * @return {object} the props that this component holds\n */\nfunction mapStateToProps(state, _) {\n  return {\n    ui: state.ui,\n  };\n}\n\nexport default connect(mapStateToProps)(DescriptionItem);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport {Grid} from '@material-ui/core';\n\nimport DescriptionItem from './DescriptionItem';\nimport FormulaItem from './FormulaItem';\n\n/**\n * ComplexDialog is used to explain components of the App.\n */\nclass DescriptionElement extends React.Component {\n  /**\n   * Renders the Onboarding Screen inside the App.\n   *\n   * @return {object} AlertSnack component to be rendered\n   */\n  render() {\n    return (\n      <Grid item style={{width: '100%'}}>\n        {\n          this.props.descriptionElement.map((descriptionItem, index) => (\n            descriptionItem.type !== 'formulas' ?\n              <DescriptionItem key={index} descriptionItem={descriptionItem}/> :\n              <FormulaItem key={index} formulas={descriptionItem.formulas}/>\n          ))\n        }\n      </Grid>\n    );\n  }\n}\n\n// Prop Types holding all the Preferences\nDescriptionElement.propTypes = {\n  ui: PropTypes.object.isRequired,\n  descriptionElement: PropTypes.array.isRequired,\n};\n\n/**\n * Map the State to the Properties of this Component\n *\n * @param {object} state the state that is to be mapped to this component\n * @param {object} _ the props of this component\n * @return {object} the props that this component holds\n */\nfunction mapStateToProps(state, _) {\n  return {\n    ui: state.ui,\n  };\n}\n\nexport default connect(mapStateToProps)(DescriptionElement);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport {Dialog, DialogTitle, DialogContent, Grid} from '@material-ui/core';\n\nimport DescriptionElement from './elements/DescriptionElement';\n\n/**\n * ComplexDialog is used to explain components of the App.\n */\nclass ComplexDialog extends React.Component {\n  /**\n   * Renders the Onboarding Screen inside the App.\n   *\n   * @return {object} AlertSnack component to be rendered\n   */\n  render() {\n    return (\n      <Dialog onClose={this.props.closeFunction} open={this.props.open}>\n        <DialogTitle>\n          {this.props.title}\n        </DialogTitle>\n        <DialogContent dividers>\n          <Grid container directiton='column' spacing={2}>\n            {\n              this.props.description.map((descriptionElement, index) => (\n                <DescriptionElement key={index}\n                  descriptionElement={descriptionElement} />\n              ))\n            }\n          </Grid>\n        </DialogContent>\n      </Dialog>\n    );\n  }\n}\n\n// Prop Types holding all the Preferences\nComplexDialog.propTypes = {\n  ui: PropTypes.object.isRequired,\n  closeFunction: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  title: PropTypes.string.isRequired,\n  description: PropTypes.array.isRequired,\n};\n\n/**\n * Map the State to the Properties of this Component\n *\n * @param {object} state the state that is to be mapped to this component\n * @param {object} _ the props of this component\n * @return {object} the props that this component holds\n */\nfunction mapStateToProps(state, _) {\n  return {\n    ui: state.ui,\n  };\n}\n\nexport default connect(mapStateToProps)(ComplexDialog);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport PropTypes from 'prop-types';\n\nimport * as actions from '../../../actions';\nimport globalConstants from '../../constants/global';\nimport ComplexDialog from '../../dialogs/ComplexDialog';\n\n/**\n * This class is responsible for handling the dialogs corresponding to the\n * cell components in the detail view of the application\n */\nclass CellDialogs extends React.Component {\n  /**\n   * Handles the closing of a dialog and updates the global state accordingly\n   */\n  handleClose = () => {\n    this.props.actions.updateAppState({\n      ...this.props.appState,\n      cellDialog: [false, false, false, false, false, false],\n    });\n  }\n\n  /**\n   * Creates all necessary dialog components that can later be shown when\n   * interacting with the cell view elements\n   *\n   * @return {object} the rendered react component\n   */\n  render() {\n    const global = globalConstants[this.props.appState.language];\n    return (\n      <div>\n        {\n          global.strings.lstmGates.map((gate) => (\n            <ComplexDialog key={gate.id} closeFunction={this.handleClose}\n              open={this.props.appState.cellDialog[gate.id]} title={gate.title}\n              description={gate.description}/>\n          ))\n        }\n      </div>\n    );\n  }\n}\n\nCellDialogs.propTypes = {\n  network: PropTypes.object.isRequired,\n  training: PropTypes.object.isRequired,\n  ui: PropTypes.object.isRequired,\n  appState: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired,\n};\n\n/**\n * Map the states from redux to this property.\n *\n * @param {object} state - the global redux state.\n * @param {object} ownProps - the properties of this component.\n * @return {object} - the new props of this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    network: state.network,\n    training: state.training,\n    ui: state.ui,\n    appState: state.appState,\n  };\n}\n/**\n * Maps the actions to this property.\n *\n * @param {function} dispatch - the function that is used to call an action.\n * @return {object} - the actions that can be used in this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(CellDialogs);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport PropTypes from 'prop-types';\n\nimport * as actions from '../../../actions';\nimport globalConstants from '../../constants/global';\nimport ComplexDialog from '../../dialogs/ComplexDialog';\n\n/**\n * This class is responsible for handling the dialogs corresponding to the\n * cell components in the detail view of the application\n */\nclass HeadingDialogs extends React.Component {\n  /**\n   * Handles the closing of a dialog and updates the global state accordingly\n   */\n  handleClose = () => {\n    this.props.actions.updateAppState({\n      ...this.props.appState,\n      headingDialog: '',\n    });\n  }\n\n  /**\n   * Creates all necessary dialog components that can later be shown when\n   * interacting with the cell view elements\n   *\n   * @return {object} the rendered react component\n   */\n  render() {\n    const global = globalConstants[this.props.appState.language];\n    return (\n      <div>\n        {\n          global.strings.headings.map((heading) => (\n            <ComplexDialog key={heading.id} closeFunction={this.handleClose}\n              open={this.props.appState.headingDialog === heading.identifier}\n              title={heading.title} description={heading.description} />\n          ))\n        }\n      </div>\n    );\n  }\n}\n\nHeadingDialogs.propTypes = {\n  network: PropTypes.object.isRequired,\n  training: PropTypes.object.isRequired,\n  ui: PropTypes.object.isRequired,\n  appState: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired,\n};\n\n/**\n * Map the states from redux to this property.\n *\n * @param {object} state - the global redux state.\n * @param {object} ownProps - the properties of this component.\n * @return {object} - the new props of this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    network: state.network,\n    training: state.training,\n    ui: state.ui,\n    appState: state.appState,\n  };\n}\n/**\n * Maps the actions to this property.\n *\n * @param {function} dispatch - the function that is used to call an action.\n * @return {object} - the actions that can be used in this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(HeadingDialogs);\n","/**\n * This class represents a heading in the p5 visualizations\n */\nexport class Heading {\n  /**\n   * The construcor function of the layer class\n   *\n   * @param {object} s the p5 sketch\n   * @param {number} x the x position of the heading\n   * @param {number} y the y position of the heading\n   * @param {String} dialog the dialog that this heading should show\n   */\n  constructor(s, x, y, dialog) {\n    this.s = s;\n    this.active = false;\n    this.hover = false;\n    this.clicked = false;\n    this.x = x;\n    this.y = y;\n    this.width = 0;\n    this.height = 0;\n    this.dialog = dialog;\n  }\n\n  /**\n   * This function is responsible of drawing the current layer onto\n   * the p5 canvas\n   *\n   * @param {String} title the title that should be displayed\n   */\n  draw(title) {\n    const s = this.s;\n    s.push();\n    s.textAlign(s.LEFT, s.CENTER);\n    s.textSize(s.typography.fontsizelarge);\n    s.fill(s.colors.darkgrey);\n    s.noStroke();\n    s.text(title, this.x, this.y);\n    this.width = s.textWidth(title);\n    this.height = s.textSize(title);\n    if (this.hover) {\n      s.cursor(s.HAND);\n      s.noFill();\n      s.stroke(s.colors.darkgrey);\n      s.strokeWeight(1);\n      s.line(this.x, this.y + (this.height / 2) - 2, this.x+this.width,\n          this.y + (this.height / 2) - 2);\n    }\n    s.pop();\n  }\n\n  /**\n   * This function gets called if the mouse has been moved and checks\n   * if this current layer is being hovered over\n   *\n   * @param {number} x the x position of the cursor\n   * @param {number} y the y position of the cursor\n   */\n  mouseMoved(x, y) {\n    if (x > this.x && x < this.x + this.width &&\n        y > this.y - this.height / 2 && y < this.y + this.height / 2) {\n      this.hover = true;\n    } else {\n      this.hover = false;\n    }\n  }\n\n  /**\n   * This function is called when the user clicks on the canvas, it then\n   * checks if this layer is being clicked on\n   *\n   * @return {boolean} whether the click was actually on this component\n   */\n  checkClick() {\n    // If this layer is hovered, handle the click\n    if (this.hover) {\n      this.s.props.actions.updateAppState(\n          {...this.s.props.appState, headingDialog: this.dialog}\n      );\n      return true;\n    }\n    this.hover = false;\n    return false;\n  }\n}\n","/**\n * This class represents a connection between two or more items\n * in the lstm cell model\n */\nexport class Connection {\n  /**\n   * The constructor function of the connection\n   *\n   * @param {array} verts the vertices of the connection line\n   * @param {Item} goesTo the item this connection connects to\n   * @param {object} s the p5 sketch\n   */\n  constructor(verts, goesTo, s) {\n    this.verts = verts;\n    this.next = goesTo;\n    this.s = s;\n    this.active = false;\n    this.negativeActivation = false;\n    this.hover = false;\n    this.activeInputs = 0;\n  }\n\n  /**\n   * The drawing function of connection class, responsible for drawing\n   * the connection line according to the set values\n   */\n  draw() {\n    const s = this.s;\n    s.noFill();\n    s.stroke(s.colors.grey);\n    s.strokeWeight(1);\n    if (this.active) {\n      s.stroke(s.colors.detail);\n      s.strokeWeight(4);\n      s.drawingContext.lineDashOffset = -s.frameCount/2;\n      s.drawingContext.setLineDash([10, 10]);\n    } else if (s.cellAnim.back && this.negativeActivation) {\n      s.stroke(s.colors.detail);\n      s.strokeWeight(4);\n      s.drawingContext.lineDashOffset = s.frameCount/2;\n      s.drawingContext.setLineDash([10, 10]);\n    }\n    if (this.hover) {\n      s.stroke(s.colors.detaillight);\n      s.drawingContext.lineDashOffset = -s.frameCount/2;\n      s.drawingContext.setLineDash([10, 10]);\n    }\n    s.strokeJoin(s.ROUND);\n    s.beginShape();\n    for (const v of this.verts) {\n      s.vertex(v.x, v.y);\n    }\n    s.endShape();\n    s.drawingContext.setLineDash([]);\n  }\n\n  /**\n   * Increases the amount of active inputs, since connections only can\n   * have one active input this function is equal to setting the connection\n   * to active\n   */\n  addActiveInput() {\n    this.activeInputs += 1;\n  }\n\n  /**\n   * Increases the amount of active inputs, since connections only can\n   * have one active input this function is equal to setting the connection\n   * to active\n   */\n  addNegativeInput() {\n    this.negativeActivation = true;\n  }\n\n  /**\n   * Removes the current activations\n   */\n  deactivate() {\n    this.active = false;\n    this.negativeActivation = false;\n    this.activeInputs = 0;\n  }\n\n  /**\n   * If this current connection is active it will activate all following\n   * items, meaning all items this connection connects to\n   */\n  sendActivations() {\n    if (this.active && this.next && this.next.length > 0) {\n      for (const n of this.next) {\n        n.addActiveInput();\n      }\n    }\n  }\n\n  /**\n   * this function is responsible for always keeping the activation status\n   * of this connection up to date, getting called at the end of each updating\n   * cycle to make sure no connection stays active/inactive when it\n   * shouldn't be\n   */\n  updateActivation() {\n    if (this.active) {\n      this.active = false;\n      this.activeInputs = 0;\n    } else {\n      if (this.activeInputs !== 0) {\n        this.active = true;\n      }\n    }\n  }\n}\n","/**\n * This class represents all the items in a lstm cell model\n */\nexport class Item {\n  /**\n   * The constructor function of the item class\n   *\n   * @param {object} cell the constant cell values\n   * @param {string} type the item type represented as a string\n   * @param {number} x realtive x position of this item\n   * @param {number} y the relative y position of this item\n   * @param {number} ingoing the amount of ingoing connections\n   * @param {number} step the corresponding description step\n   * @param {number} id the corresponding item id used for dialog handling\n   */\n  constructor(cell, type, x, y, ingoing, step, id) {\n    this.s = cell.s;\n    this.type = type;\n    this.cell = cell;\n    this.x = cell.left + x * cell.horBuf;\n    this.y = cell.top + y * cell.verBuf;\n    this.step = step;\n    this.id = id;\n    this.hover = false;\n    this.clicked = false;\n    this.active = false;\n    this.negativeActivation = false;\n    this.connections = [];\n    this.maxIngoingConnections = ingoing;\n    this.currentActivatedConnecions = 0;\n\n    switch (type) {\n      case 'fst':\n      case 'lst':\n      case 'sav':\n      case 'rec':\n        this.r = (cell.width)/20;\n        break;\n      case 'glt':\n      case 'gft':\n        this.r = (cell.width)/30;\n        break;\n      case 'crs':\n        this.r = (cell.width)/50;\n        break;\n      default:\n        this.r = (cell.width)/10;\n    }\n  }\n\n  /**\n   * This function is responsible for drawing the item on the\n   * drawing canvas\n   */\n  draw() {\n    const s = this.s;\n    let size = this.r;\n    let imgSize = 0.6 * this.r;\n    if (this.active || (s.cellAnim.back && this.negativeActivation)) {\n      size = this.r * 1.2;\n      imgSize = 0.6 * this.r * 1.2;\n    }\n    this.s.fill(s.colors.lightgrey);\n    if (this.type === 'gft' || this.type === 'glt') {\n      this.s.fill(s.colors.grey);\n    }\n    this.s.noStroke();\n    if (this.active || (s.cellAnim.back && this.negativeActivation)) {\n      s.fill(s.colors.detail);\n    } else if (this.currentActivatedConnecions !== 0) {\n      s.fill(s.colors.detail);\n    }\n    if (this.hover &&\n        !(this.type === 'fst' || this.type === 'lst' || this.type === 'crs' ||\n        this.type === 'gft' || this.type === 'glt')) {\n      s.fill(s.colors.detaillight);\n      s.cursor(s.HAND);\n    }\n    const layer = s.clickedBlock;\n    const hasPrev = layer ? (layer.i !== 1) : false;\n    const hasNext = layer ? (layer.i !== layer.layers) : false;\n    if ((this.type === 'gft' && hasPrev) ||\n        (this.type === 'glt' && hasNext)) {\n      const w = 0.05 * s.width;\n      const h = 0.8 * w;\n      s.noStroke();\n      if (this.active || (s.cellAnim.back && this.negativeActivation)) {\n        s.fill(s.colors.detail);\n      } else {\n        s.fill(s.colors.darkgrey);\n      }\n      s.rect(this.x, this.y, w, h);\n      s.noStroke();\n      s.fill(s.colors.white);\n      const left = this.x - w/2;\n      const top = this.y - h/2;\n      for (let i = 0; i < 5; i++) {\n        s.ellipse(left + (i+1) * w / 6, top + h / 3,\n            w / (i === 0 || i === 2 ? 20 : 10));\n      }\n      s.rect(left + (3) * w / 6, top + 2 * h / 3, w / (10), w / (10));\n    } else if (this.type === 'cel') {\n      this.s.rect(this.x, this.y, size, size);\n    } else {\n      this.s.ellipse(this.x, this.y, size);\n    }\n    switch (this.type) {\n      case 'rec':\n        this.s.image(this.s.receive, this.x, this.y, imgSize*2, imgSize*2);\n        break;\n      case 'add':\n        this.s.image(this.s.add, this.x, this.y, imgSize, imgSize);\n        break;\n      case 'sav':\n        this.s.image(this.s.save, this.x, this.y, imgSize*2, imgSize*2);\n        break;\n      case 'los':\n        this.s.image(this.s.forget, this.x, this.y, imgSize, imgSize);\n        break;\n      case 'cel':\n        this.s.image(this.s.cellImage, this.x, this.y, imgSize, imgSize);\n        break;\n      case 'out':\n        this.s.image(this.s.output, this.x, this.y, imgSize, imgSize);\n        break;\n      default:\n    }\n    if (this.hover &&\n        !(this.type === 'fst' || this.type === 'lst' || this.type === 'crs' ||\n        this.type === 'gft' || this.type === 'glt')) {\n      s.textAlign(s.CENTER, s.CENTER);\n      s.fill(0, 150);\n      s.rect(s.mx, s.my + s.typography.tooltipoffset, 110, 30);\n      s.fill(255);\n      s.text(this.s.global.strings.lstmGates[this.id].title,\n          s.mx, s.my + s.typography.tooltipoffset\n      );\n    }\n    s.stroke(s.colors.lightgrey);\n    s.strokeWeight(2);\n    s.line(s.detailProps.right, 0, s.detailProps.right, s.detailProps.height);\n  }\n\n  /**\n   * This function increases the amount of active inputs by one, if the\n   * maximum amount of input activtaions is reached this item will fire\n   * an activation trigger in the next update cycle\n   */\n  addActiveInput() {\n    this.currentActivatedConnecions += 1;\n  }\n\n  /**\n   * This function sets the negativeActivation parameter to true, meaning it\n   * will be displayed as active in the backprop animation\n   */\n  addNegativeInput() {\n    this.negativeActivation = true;\n  }\n\n  /**\n   * Removes the current activations\n   */\n  deactivate() {\n    this.active = false;\n    this.negativeActivation = false;\n    this.currentActivatedConnecions = 0;\n  }\n\n  /**\n   * This funtion will send an activation call to all outgoing connections\n   * if the item has enough activation inputs\n   */\n  sendActivations() {\n    const s = this.s;\n    if (this.active && this.connections && this.connections.length > 0) {\n      if (this.type === 'glt') {\n        s.cellAnim.inputStep++;\n        if (s.cellAnim.inputStep === this.s.props.training.values) {\n          s.cellAnim.inputStep = 0;\n          s.cellAnim.predictionStep++;\n          if (s.cellAnim.predictionStep >= this.s.props.training.predictions) {\n            s.cellAnim.predictionStep = 0;\n            s.cellAnim.error = true;\n            s.cellAnim.forward = false;\n            this.s.props = {...this.s.props, ui: {...this.s.props.ui,\n              state: [false, true, false]}};\n          }\n        }\n      }\n      for (const c of this.connections) {\n        if (c) {\n          c.addActiveInput();\n        }\n      }\n    }\n  }\n\n  /**\n   * This function makes sure that the item is always correctly labeled\n   * active or inactive and gets called at the end of each update cycle\n   */\n  updateActivation() {\n    const s = this.s;\n    if (this.active) {\n      this.active = false;\n      this.currentActivatedConnecions = 0;\n    } else {\n      if (this.currentActivatedConnecions >= this.maxIngoingConnections) {\n        this.active = true;\n        if (this.step >= 0) {\n          this.s.props = {...this.s.props, ui: {...this.s.props.ui,\n            lstmStep: this.step}};\n        }\n        if (this.type === 'gft') {\n          s.cellAnim.step = 0;\n        } else {\n          s.cellAnim.step++;\n        }\n      }\n    }\n  }\n\n  /**\n   * This function is called if the user has moved the mouse across the\n   * canvas and checks if this item is being hovered over\n   *\n   * @param {number} x the x position of the mouse cursor\n   * @param {number} y the y position of the mouse cursor\n   */\n  mouseMoved(x, y) {\n    if (this.s.dist(x, y, this.x, this.y) < this.r/2) {\n      this.hover = true;\n    } else {\n      this.hover = false;\n    }\n    if (this.type === 'gft' || this.type === 'glt') {\n      this.hover = false;\n    }\n    for (const c of this.connections) {\n      c.hover = this.hover;\n    }\n  }\n\n  /**\n   * This function is called when the user clicks on the canvas and checks\n   * if the current item is being clicked on\n   *\n   * @return {boolean} true, if this item is being clicked on\n   */\n  checkClick() {\n    if (this.hover) {\n      this.s.clickedItem = this;\n      const dialogs = [false, false, false, false, false, false];\n      dialogs[this.id] = true;\n      this.s.props.actions.updateAppState(\n          {...this.s.props.appState, cellDialog: dialogs}\n      );\n    }\n    return this.clicked = this.hover;\n  }\n}\n","import {Heading} from '../Heading';\nimport {Connection} from './elements/Connection';\nimport {Item} from './elements/Item';\n\n/**\n * This class represents the model for a LSTM cell in the sketch canvas\n * of the network\n *\n * An idea for future work could be outsourcing the cell structure to a json\n * file and writing a generation and parsing logic to handle different\n * RNN structures more efficiently\n */\nexport class LSTM {\n  /**\n   * This is the constructor for the LSTM cell model, initialising all\n   * components and connections within the cell\n   *\n   * @param {object} s the p5 sketch\n   * @param {boolean} hasPrev true, if this LSTM layer has a previous layer\n   * @param {boolean} hasNext true, if this LSTM layer has a next layer\n   */\n  constructor(s, hasPrev, hasNext) {\n    // defining general global values\n    this.s = s;\n    this.items = [];\n    this.connections = [];\n    this.hasPrev = hasPrev;\n    this.hasNext = hasNext;\n    this.height = s.detailProps.height * s.detailProps.verRatio;\n    this.width = s.detailProps.width * s.detailProps.horRatio;\n    const left = s.detailProps.left +\n        ((1 - s.detailProps.horRatio) * s.detailProps.width) / 2;\n    const top = ((1 - s.detailProps.verRatio) * s.detailProps.height) / 2;\n    const horBuf = (1/6) * this.width;\n    const verBuf = (1/3) * this.height;\n    s.clickedItem = undefined;\n    const cell = {\n      s: s,\n      hasPrev: hasPrev,\n      hasNext: hasNext,\n      horBuf: horBuf,\n      verBuf: verBuf,\n      left: left,\n      top: top,\n      height: this.height,\n      width: this.width,\n    };\n\n    // creating the cell components of the lstm cell\n    this.items.push(this.receive = new Item(cell, 'rec', 1, 1, 2, 0, 0));\n    this.items.push(this.add = new Item(cell, 'add', 2, 1, 1, 2, 1));\n    this.items.push(this.save = new Item(cell, 'sav', 3, 1, 2, 2, 4));\n    this.items.push(this.forget = new Item(cell, 'los', 4, 1, 2, 1, 2));\n    this.items.push(this.output = new Item(cell, 'out', 5, 1, 2, 3, 3));\n    this.items.push(this.cell = new Item(cell, 'cel', 3, 2, 1, 2, 5));\n    this.items.push(this.crossInput = new Item(cell, 'crs', 2, 0.5, 1, -1));\n    this.items.push(this.crossForget = new Item(cell, 'crs', 4, 0.5, 1, -1));\n    this.items.push(this.crossOutput = new Item(cell, 'crs', 5, 0.5, 1, -1));\n    this.items.push(this.crossCell = new Item(cell, 'crs', 4.5, 1, 1, -1));\n    this.items.push(this.ghostFirst = new Item(cell, 'gft', -1, 1, 1, 0));\n    this.items.push(this.ghostLast = new Item(cell, 'glt', 7, 1, 1, 0));\n\n    // setting up the connections between the lstm cell items\n    this.connections.push(this.ghostInput = new Connection([\n      {x: this.ghostFirst.x, y: this.ghostFirst.y},\n      {x: this.receive.x, y: this.receive.y}], [this.receive], s));\n    this.connections.push(this.bus = new Connection([\n      {x: this.receive.x, y: this.receive.y},\n      {x: this.receive.x, y: this.crossOutput.y},\n      {x: this.crossOutput.x, y: this.crossOutput.y}], [], s));\n    this.connections.push(this.toInput = new Connection([\n      {x: this.crossInput.x, y: this.crossInput.y},\n      {x: this.add.x, y: this.add.y}], [this.add], s));\n    this.connections.push(this.toForget = new Connection([\n      {x: this.crossForget.x, y: this.crossForget.y},\n      {x: this.forget.x, y: this.forget.y}], [this.forget], s));\n    this.connections.push(this.toOutput = new Connection([\n      {x: this.crossOutput.x, y: this.crossOutput.y},\n      {x: this.output.x, y: this.output.y}], [this.output], s));\n    this.connections.push(this.addToSave = new Connection([\n      {x: this.add.x, y: this.add.y},\n      {x: this.save.x, y: this.save.y}], [this.save], s));\n    this.connections.push(this.forgetToSave = new Connection([\n      {x: this.forget.x, y: this.forget.y},\n      {x: this.save.x, y: this.save.y}], [this.save], s));\n    this.connections.push(this.saveToCell = new Connection([\n      {x: this.save.x, y: this.save.y},\n      {x: this.cell.x, y: this.cell.y}], [this.cell], s));\n    this.connections.push(this.cellOut = new Connection([\n      {x: this.cell.x, y: this.cell.y},\n      {x: this.crossCell.x, y: this.cell.y},\n      {x: this.crossCell.x, y: this.crossCell.y}], [], s));\n    this.connections.push(this.cellToForget = new Connection([\n      {x: this.crossCell.x, y: this.crossCell.y},\n      {x: this.forget.x, y: this.forget.y}], [this.forget], s));\n    this.connections.push(this.cellToOutput = new Connection([\n      {x: this.crossCell.x, y: this.crossCell.y},\n      {x: this.output.x, y: this.output.y}], [this.output], s));\n    this.connections.push(this.recurrent = new Connection([\n      {x: this.output.x, y: this.output.y},\n      {x: this.output.x, y: top + 2.5 * verBuf},\n      {x: this.receive.x, y: top + 2.5 * verBuf},\n      {x: this.receive.x, y: this.receive.y}], [this.receive], s));\n    this.connections.push(this.ghostOutput = new Connection([\n      {x: this.output.x, y: this.output.y},\n      {x: this.ghostLast.x, y: this.ghostLast.y}], [this.ghostLast], s));\n\n    // defining which items have which outgoing connections\n    this.ghostFirst.connections.push(this.ghostInput);\n    this.receive.connections.push(this.bus);\n    this.receive.connections.push(this.crossInput);\n    this.receive.connections.push(this.crossForget);\n    this.receive.connections.push(this.crossOutput);\n    this.receive.connections.push(this.toInput);\n    this.receive.connections.push(this.toForget);\n    this.receive.connections.push(this.toOutput);\n    this.add.connections.push(this.addToSave);\n    this.save.connections.push(this.saveToCell);\n    this.forget.connections.push(this.forgetToSave);\n    this.cell.connections.push(this.cellOut);\n    this.cell.connections.push(this.crossCell);\n    this.cell.connections.push(this.cellToForget);\n    this.cell.connections.push(this.cellToOutput);\n    this.output.connections.push(this.ghostOutput);\n    this.output.connections.push(this.recurrent);\n    this.ghostLast.connections.push(this.ghostFirst);\n\n    // activating some items to start off the animation sequence\n    this.ghostFirst.addActiveInput();\n    this.recurrent.addActiveInput();\n    this.forget.addActiveInput();\n\n    this.heading = new Heading(this.s, this.s.detailProps.left + 20,\n        this.s.height * this.s.typography.titleOffsetRatio / 2, 'cell');\n  }\n\n  /**\n   * The drawing function of the lstm model that gets called every frame\n   * the lstm cell should be visible on the p5 sketch canvas\n   */\n  draw() {\n    const s = this.s;\n    s.rectMode(s.CENTER);\n    s.fill(s.colors.darkgrey);\n    s.rect(s.detailProps.midX, s.detailProps.midY,\n        s.detailProps.width * s.detailProps.horRatio,\n        s.detailProps.height * s.detailProps.verRatio, 10);\n    for (const c of this.connections) {\n      c.draw();\n    }\n    for (const i of this.items) {\n      i.draw();\n    }\n    this.heading.draw(s.global.strings.headings[3].title);\n  }\n\n  /**\n   * This function sends an update trigger to all items and connections\n   * to check if one of them needs to forward their activation\n   *\n   * @param {boolean} forced true, if the update should be done independently\n   * from the framecount\n   */\n  update(forced) {\n    const s = this.s;\n    if (s.cellAnim.forward) {\n      s.cellAnim.frame++;\n    }\n    if (s.cellAnim.forward && (s.cellAnim.frame % s.pause === 0 || forced)) {\n      for (const c of this.connections) {\n        c.sendActivations();\n      }\n      for (const i of this.items) {\n        i.sendActivations();\n      }\n      for (const c of this.connections) {\n        c.updateActivation();\n      }\n      for (const i of this.items) {\n        i.updateActivation();\n      }\n    } else if (s.cellAnim.error && (s.frameCount % 2 === 0 || forced)) {\n      // animate error calculation\n      s.cellAnim.errorStep++;\n      if (s.cellAnim.errorStep >= this.s.cellAnim.maxErrorSteps) {\n        s.cellAnim.errorStep = 0;\n        s.cellAnim.error = false;\n        s.cellAnim.back = true;\n        this.showBackStep(0);\n        this.s.props = {...this.s.props, ui: {...this.s.props.ui,\n          state: [false, false, true]}};\n      }\n    } else if (s.cellAnim.back && (s.frameCount % 5 === 0 || forced)) {\n      // animate BPTT\n      s.cellAnim.backStep++;\n      this.showBackStep(s.cellAnim.backStep);\n      if (s.cellAnim.backStep > s.cellAnim.maxBackSteps) {\n        s.cellAnim.backStep = 0;\n        s.cellAnim.back = false;\n        this.s.props = {\n          ...this.s.props,\n          ui: {\n            ...this.s.props.ui,\n            state: [true, false, false],\n          },\n        };\n        this.s.props.actions.updateTraining(\n            {...this.s.props.training, step: true}\n        );\n      }\n    }\n    this.s.props.actions.updateUI({...this.s.props.ui});\n  }\n\n  /**\n   * Since activations can currently only be sent in one direction the\n   * backpropagation has to be worked around. This function determines for\n   * the current backprop step which elements/data flow lines have to be\n   * active to create the right animation.\n   *\n   * @param {number} step the current step in the backprop animation\n   */\n  showBackStep(step) {\n    for (const c of this.connections) {\n      c.deactivate();\n    }\n    for (const i of this.items) {\n      i.deactivate();\n    }\n    // special cases\n    if (step === 0) {\n      this.ghostLast.addNegativeInput();\n      return;\n    }\n    if (step === 1) {\n      this.ghostOutput.addNegativeInput();\n      return;\n    }\n    if (step === 2) {\n      this.output.addNegativeInput();\n      return;\n    }\n    if (step === 3) {\n      this.cellOut.addNegativeInput();\n      this.cellToOutput.addNegativeInput();\n      this.crossCell.addNegativeInput();\n      this.toOutput.addNegativeInput();\n      return;\n    }\n    if (step === this.s.cellAnim.maxBackSteps) {\n      this.ghostFirst.addNegativeInput();\n      return;\n    }\n    step -= 2;\n    // the bptt animation logic\n    switch (step % 12) {\n      case 0:\n        this.output.addNegativeInput();\n        this.ghostFirst.addNegativeInput();\n        this.forget.addNegativeInput();\n        break;\n      case 1:\n        this.cellOut.addNegativeInput();\n        this.cellToOutput.addNegativeInput();\n        this.cellToForget.addNegativeInput();\n        this.crossCell.addNegativeInput();\n        this.toOutput.addNegativeInput();\n        break;\n      case 2:\n        this.cell.addNegativeInput();\n        this.crossOutput.addNegativeInput();\n        break;\n      case 3:\n        this.saveToCell.addNegativeInput();\n        this.crossOutput.addNegativeInput();\n        break;\n      case 4:\n        this.save.addNegativeInput();\n        this.crossOutput.addNegativeInput();\n        break;\n      case 5:\n        this.addToSave.addNegativeInput();\n        this.forgetToSave.addNegativeInput();\n        this.crossOutput.addNegativeInput();\n        break;\n      case 6:\n        this.add.addNegativeInput();\n        this.forget.addNegativeInput();\n        this.crossOutput.addNegativeInput();\n        break;\n      case 7:\n        if (this.s.cellAnim.maxBackSteps - 12 > step) {\n          this.forget.addNegativeInput();\n        }\n        this.toInput.addNegativeInput();\n        this.toForget.addNegativeInput();\n        this.crossOutput.addNegativeInput();\n        break;\n      case 8:\n        if (this.s.cellAnim.maxBackSteps - 12 > step) {\n          this.forget.addNegativeInput();\n        }\n        this.crossOutput.addNegativeInput();\n        this.crossInput.addNegativeInput();\n        this.crossForget.addNegativeInput();\n        break;\n      case 9:\n        if (this.s.cellAnim.maxBackSteps - 12 > step) {\n          this.forget.addNegativeInput();\n        }\n        this.bus.addNegativeInput();\n        break;\n      case 10:\n        this.receive.addNegativeInput();\n        if (this.s.cellAnim.maxBackSteps - 12 > step) {\n          this.forget.addNegativeInput();\n        }\n        break;\n      case 11:\n        if (this.s.cellAnim.maxBackSteps - 12 > step) {\n          this.forget.addNegativeInput();\n          this.recurrent.addNegativeInput();\n        }\n        this.ghostInput.addNegativeInput();\n        break;\n      default:\n    }\n  }\n\n  /**\n   * Resets the animation object with the necessary values to then animate\n   * the backpropagation\n   */\n  prepareBackprop() {\n    const s = this.s;\n    s.cellAnim = {\n      maxSteps: 11,\n      maxErrorSteps: 50,\n      maxBackSteps: 62,\n      step: 0,\n      frame: 0,\n      inputStep: 0,\n      predictionStep: 0,\n      errorStep: 0,\n      backStep: 0,\n      forward: false,\n      error: false,\n      back: true,\n    };\n    s.pause = 10;\n    this.showBackStep(0);\n  }\n\n  /**\n   * Resets the animation object with the necessary values to then animate\n   * the error calculation\n   */\n  prepareError() {\n    const s = this.s;\n    s.cellAnim = {\n      maxSteps: 11,\n      maxErrorSteps: 50,\n      maxBackSteps: 62,\n      step: 0,\n      frame: 0,\n      inputStep: 0,\n      predictionStep: 0,\n      errorStep: 0,\n      backStep: 0,\n      forward: false,\n      error: true,\n      back: false,\n    };\n    s.pause = 1;\n    for (const c of this.connections) {\n      c.deactivate();\n    }\n    for (const i of this.items) {\n      i.deactivate();\n    }\n    for (const c of this.connections) {\n      c.updateActivation();\n    }\n    for (const i of this.items) {\n      i.updateActivation();\n    }\n  }\n\n  /**\n   * Resets all activations to 0 and sets the starting items to 1\n   */\n  reset() {\n    const s = this.s;\n    s.cellAnim = {\n      maxSteps: 11,\n      maxErrorSteps: 50,\n      maxBackSteps: 62,\n      step: 0,\n      frame: 0,\n      inputStep: 0,\n      predictionStep: 0,\n      errorStep: 0,\n      backStep: 0,\n      forward: true,\n      error: false,\n      back: false,\n    };\n    for (const c of this.connections) {\n      c.deactivate();\n    }\n    for (const i of this.items) {\n      i.deactivate();\n    }\n    // activating some items to start of the animation sequence\n    this.ghostFirst.addActiveInput();\n    this.recurrent.addActiveInput();\n    this.forget.addActiveInput();\n    for (const c of this.connections) {\n      c.updateActivation();\n    }\n    for (const i of this.items) {\n      i.updateActivation();\n    }\n  }\n\n  /**\n   * A function that gets called if the user moves the mouse over the canvas\n   * and sends the trigger to all interactable items on the screen\n   *\n   * @param {number} x the x position of the mouse cursor\n   * @param {number} y the y position of the mouse cursor\n   */\n  mouseMoved(x, y) {\n    for (const i of this.items) {\n      i.mouseMoved(x, y);\n    }\n    this.heading.mouseMoved(x, y);\n  }\n\n  /**\n   * This function gets called if the user has clicked on the screen, it\n   * then checks if the user has clicked on an interactable item and if so\n   * activates the according following functions\n   *\n   * @return {boolean} true, if the user has clicked on an item\n   */\n  checkClick() {\n    let ret = false;\n    const s = this.s;\n    if (s.clickedItem) {\n      s.clickedItem = undefined;\n    }\n    for (const i of this.items) {\n      ret = i.checkClick() || ret;\n    }\n    if (!ret) {\n      s.clickedItem = undefined;\n    }\n    ret = this.heading.checkClick() || ret;\n    return ret;\n  }\n}\n","import Cookies from 'universal-cookie';\n\n/**\n * Get the state of the Intro for this user.\n *\n * @return {object} the state of the introduction.\n */\nexport function getIntroState() {\n  const cookies = new Cookies();\n  const currentState = cookies.get('exploRNNIntroState');\n  return currentState;\n}\n\n/**\n * Set the state of the introduction for a user.\n *\n * @param {object} state the current state of the introduction\n */\nexport function setIntroState(state) {\n  const cookies = new Cookies();\n  cookies.set('exploRNNIntroState', state);\n}\n\n/**\n * Remove the cookie so that the intro can be shown from the beginning.\n */\nexport function removeIntroState() {\n  const cookies = new Cookies();\n  cookies.remove('exploRNNIntroState');\n}\n","import globalConstants from '../components/constants/global';\nimport * as Cookies from '../helpers/Cookies';\n\n/**\n * Returns the props for the current onboarding element.\n *\n * @param {object} uiState the state of the ui of the application\n * @param {object} cookiesState state of the cookies saved by the application\n * @param {object} appState the state of the application\n * @param {object} trainingState the state of the training process\n * @param {object} networkState the state of the network\n * @return {object} the props for the current onboarding element\n */\nexport function getCurrentOnboardingElementProps(uiState, cookiesState,\n    appState, trainingState, networkState) {\n  let open = false;\n  const constants = globalConstants[appState.language].strings;\n  let state = constants.onboarding.welcome;\n  if (cookiesState.intro === '') {\n    open = uiState.detail ? false : true;\n  } else if (cookiesState.intro === 'input') {\n    open = uiState.detail ? false : true;\n    state = constants.onboarding.input;\n  } else if (cookiesState.intro === 'network') {\n    open = uiState.detail ? false : true;\n    state = constants.onboarding.network;\n  } else if (cookiesState.intro === 'sliders') {\n    open = true;\n    state = constants.onboarding.sliders;\n  } else if (cookiesState.intro === 'startTraining') {\n    open = uiState.detail ? false : true;\n    state = constants.onboarding.startTraining;\n  } else if (cookiesState.intro === 'output') {\n    open = uiState.detail ? false : true && (networkState.iteration > 1);\n    state = constants.onboarding.output;\n  } else if (cookiesState.intro === 'cellTransition') {\n    open = uiState.detail ? false : true && (networkState.iteration > 9);\n    state = constants.onboarding.cellTransition;\n  } else if (cookiesState.intro === 'detailOutput') {\n    open = uiState.detail ? true : false;\n    state = constants.onboarding.detailOutput;\n  } else if (cookiesState.intro === 'detailCell') {\n    open = uiState.detail ? true : false;\n    state = constants.onboarding.detailCell;\n  } else if (cookiesState.intro === 'detailProcess') {\n    open = true;\n    state = constants.onboarding.detailProcess;\n  } else if (cookiesState.intro === 'headingExplanation') {\n    open = true;\n    state = constants.onboarding.headingExplanation;\n  }\n  return {\n    open: open,\n    state: state,\n  };\n}\n\n/**\n * Returns the next intro state.\n *\n * @param {String} introState the current state of the onboarding\n * @param {object} cookiesState the current cookiestate\n * @param {function} action the action for updating the cookiestate\n */\nexport function getNextIntroState(introState, cookiesState, action) {\n  let newIntroState = introState;\n  if (introState === '' || introState === undefined) {\n    newIntroState = 'input';\n  } else if (introState === 'input') {\n    newIntroState = 'network';\n  } else if (introState === 'network') {\n    newIntroState = 'sliders';\n  } else if (introState === 'sliders') {\n    newIntroState = 'startTraining';\n  } else if (introState === 'startTraining') {\n    newIntroState = 'output';\n  } else if (introState === 'output') {\n    newIntroState = 'cellTransition';\n  } else if (introState === 'cellTransition') {\n    newIntroState = 'detailCell';\n  } else if (introState === 'detailCell') {\n    newIntroState = 'detailOutput';\n  } else if (introState === 'detailOutput') {\n    newIntroState = 'detailProcess';\n  } else if (introState === 'detailProcess') {\n    newIntroState = 'headingExplanation';\n  } else {\n    newIntroState = 'done';\n  }\n  Cookies.setIntroState(newIntroState);\n  action({...cookiesState, intro: newIntroState});\n}\n","import {getNextIntroState} from '../../../../../../helpers/OnboardingState';\n\n/**\n * This class represents a layer in the network model\n */\nexport class Layer {\n  /**\n   * The construcor function of the layer class\n   *\n   * @param {object} s the p5 sketch\n   * @param {number} layers the amount of layers in the network\n   * @param {number} i the index of this layer\n   * @param {object} nodes an object containing the type and size of this layer\n   */\n  constructor(s, layers, i, nodes) {\n    this.s = s;\n    this.i = i;\n    this.layers = layers - 2;\n    this.layerwidth = nodes.size;\n    this.nodes = [];\n    this.layerType = nodes.type;\n    this.active = false;\n    this.hover = false;\n    this.hover_left = false;\n    this.hover_right = false;\n    this.clicked = false;\n    this.x = s.netProps.left + s.netProps.width * (this.i)/(this.layers + 1);\n    this.y = s.netProps.midY;\n    this.w = s.netProps.width / (2 * this.layers + 1) * 0.8;\n    this.h = this.w * 0.8;\n    this.clSize = this.w * 0.3;\n  }\n\n  /**\n   * This function is responsible of drawing the current layer onto\n   * the p5 canvas\n   */\n  draw() {\n    if (!(this.layerType === 'input' || this.layerType === 'output')) {\n      const s = this.s;\n      // draw layer with correct parameters\n      let w = this.w;\n      let h = this.h;\n      s.textAlign(s.CENTER, s.CENTER);\n      s.noFill();\n      s.stroke(s.colors.bluegrey);\n      if (s.netAnim) {\n        s.stroke(s.colors.overview);\n        s.drawingContext.lineDashOffset = this.s.rev ?\n          s.frameCount/2 : -s.frameCount/2;\n        s.drawingContext.setLineDash([10, 10]);\n      }\n      s.rect(this.x, this.y+h/2, w * 1.4, h, 20);\n      s.drawingContext.setLineDash([]);\n      s.noStroke();\n      s.fill(s.colors.darkbluegrey);\n      if (this.hover) {\n        s.fill(s.colors.bluegrey);\n        s.cursor(s.HAND);\n      }\n      if (this.active) {\n        s.fill(s.colors.overview);\n        w = 1.2 * this.w;\n        h = 1.2 * this.h;\n      }\n      s.rect(this.x, this.y, w, h);\n      // draw inside of layer block\n      s.noStroke();\n      s.fill(s.colors.white);\n      s.strokeWeight(2);\n      const left = this.x - w/2;\n      const top = this.y - h/2;\n      for (let i = 0; i < 5; i++) {\n        s.ellipse(left + (i+1) * w / 6, top + h / 3,\n            w / (i === 0 || i === 2 ? 20 : 10));\n      }\n      s.rect(left + (3) * w / 6, top + 2 * h / 3, w / (10), w / (10));\n      // draw hover info\n      if (this.hover_left) {\n        s.noStroke();\n        if (this.s.props.network.layers > 1) {\n          s.stroke(s.colors.red);\n          s.fill(s.colors.red);\n          s.textSize(this.clSize/2);\n          s.text('X', this.x + w/2 - this.clSize / 2,\n              this.y - h/2 + this.clSize / 2);\n          s.textSize(s.typography.fontsize);\n        }\n        s.noStroke();\n        s.fill(s.colors.darkbluegrey);\n        s.rect(s.mx, s.my + s.typography.tooltipoffset, 110, 25);\n        s.fill(255);\n        s.text(s.global.strings.tooltipCell, s.mx,\n            s.my + s.typography.tooltipoffset);\n      } else if (this.hover_right && this.s.props.network.layers > 1) {\n        s.noStroke();\n        s.fill(s.colors.red);\n        s.rect(this.x + w/2 - this.clSize / 2, this.y - h/2 + this.clSize / 2,\n            this.clSize, this.clSize);\n        s.textAlign(s.CENTER, s.CENTER);\n        s.fill(s.colors.darkbluegrey);\n        s.rect(s.mx, s.my + s.typography.tooltipoffset, 120, 25);\n        s.fill(255);\n        s.textSize(this.clSize/2);\n        s.text('X', this.x + w/2 - this.clSize / 2,\n            this.y - h/2 + this.clSize / 2);\n        s.textSize(s.typography.fontsize);\n        s.text(s.global.strings.tooltipDelete, s.mx,\n            s.my + s.typography.tooltipoffset);\n      }\n    }\n  }\n\n  /**\n   * This function gets called if the mouse has been moved and checks\n   * if this current layer is being hovered over\n   *\n   * @param {number} x the x position of the cursor\n   * @param {number} y the y position of the cursor\n   */\n  mouseMoved(x, y) {\n    if (this.layerType === 'input' || this.layerType === 'output') {\n      return;\n    }\n    if (x > this.x - this.w / 2 && x < this.x + this.w / 2 &&\n        y > this.y - this.h / 2 && y < this.y + this.h / 2) {\n      this.hover = true;\n      const w = this.w;\n      const h = this.h;\n      this.hover_left = !(this.hover_right =\n          (x > this.x + w / 2 - this.clSize &&\n          y < this.y - h / 2 + this.clSize) &&\n          this.s.props.network.layers > 1);\n      // If not yet allowed to go to detail\n      const introEarly = [\n        'input',\n        'network',\n        'startTraining',\n        'output',\n        undefined,\n        '',\n      ].includes(this.s.props.cookiesState.intro);\n      if (introEarly && this.hover_left) {\n        this.hover_left = false;\n        this.hover = false;\n      }\n    } else {\n      this.hover = this.hover_left = this.hover_right = false;\n    }\n  }\n\n  /**\n   * This function is called when the user clicks on the canvas, it then\n   * checks if this layer is being clicked on\n   */\n  checkClick() {\n    // Do not handle clicks for input and output layers\n    if (this.layerType === 'input' || this.layerType === 'output') {\n      return;\n    }\n    // If this layer is hovered, handle the click\n    if (this.hover) {\n      this.clicked = true;\n      this.s.clickedBlock = this;\n      // Clicked on the cell itself\n      if (this.hover_left) {\n        this.s.detail = true;\n        this.s.props.actions.updateUI({...this.s.props.ui, detail: true,\n          anim: this.s.props.training.running});\n        this.s.props.actions.stopTraining(this.s.props.training);\n        if (this.s.props.cookiesState.intro === 'cellTransition') {\n          getNextIntroState(this.s.props.cookiesState.intro,\n              this.s.props.cookiesState,\n              this.s.props.actions.updateCookiesState);\n        }\n      // Clicked on cell removal icon with more than one cell\n      } else if (this.s.props.network.layers > 1) {\n        // Stop the training\n        this.s.props.actions.stopTraining(this.s.props.training);\n        // Update the network by removing a layer\n        this.s.props.actions.updateNetwork({...this.s.props.network,\n          layers: this.s.props.network.layers - 1});\n        // Reset the training state\n        this.s.props.actions.updateTraining({...this.s.props.training,\n          reset: true});\n      }\n    } else {\n      this.clicked = false;\n    }\n    this.hover = false;\n  }\n\n  /**\n   * Deactivates the current layer if needed and reports back which index\n   * layer should be activated next\n   *\n   * @return {number} the next index\n   */\n  update() {\n    if (this.active) {\n      this.active = false;\n      return this.i + 1;\n    } else {\n      return -1;\n    }\n  }\n\n  /**\n   * Sets this layer to be active\n   */\n  activate() {\n    this.active = true;\n  }\n\n  /**\n   * Sets this layer to be active\n   */\n  deactivate() {\n    this.active = false;\n  }\n}\n","/**\n * This class represents a so called fake layer, meaning a layer\n * that is not currently in the network but can be added to the network\n * if the user clicks on it\n */\nexport class FakeLayer {\n  /**\n   * The constructor function of the fake layer class\n   *\n   * @param {object} s the p5 sketch\n   * @param {number} layers the total amount of layers in the network\n   * @param {number} i the index of this fake layer, not necessarily an integer\n   */\n  constructor(s, layers, i) {\n    this.s = s;\n    this.i = i;\n    this.layers = layers - 2;\n    this.layerwidth = 1;\n    this.nodes = [];\n    this.hover = false;\n    this.clicked = false;\n    this.x = s.netProps.left + s.netProps.width * (this.i) / (this.layers + 1);\n    this.y = s.netProps.midY;\n    this.w = s.netProps.width / (2 * this.layers + 1) * 0.25;\n    this.h = this.w;\n  }\n\n  /**\n   * This function will draw the fake layer object onto th canvas\n   */\n  draw() {\n    if (this.s.props.network.layers >= 7) {\n      return;\n    }\n    const s = this.s;\n    s.textAlign(s.CENTER, s.CENTER);\n    const d = s.dist(s.mx, s.my, this.x, this.y);\n    let alpha = (2 * this.w - d) / (this.w) * 255;\n    if (alpha > 255) {\n      alpha = 255;\n    } else if (alpha <= 0) {\n      alpha = 0;\n    }\n    s.fill(255, alpha);\n    if (this.hover) {\n      s.fill(s.colors.bluegrey);\n      s.cursor(s.HAND);\n    }\n    s.ellipse(this.x, this.y, this.w, this.h);\n    if (this.hover) {\n      s.fill(s.colors.white);\n      s.textSize(this.w);\n      s.text('+', this.x, this.y - (this.w / 20.0));\n      s.cursor(s.HAND);\n    } else {\n      s.colors.darkbluegrey.setAlpha(alpha);\n      s.fill(s.colors.darkbluegrey);\n      s.textSize(this.w);\n      s.text('+', this.x, this.y - (this.w / 20.0));\n    }\n    s.noStroke();\n    s.textSize(s.typography.fontsize);\n    s.colors.darkbluegrey.setAlpha(255);\n    if (this.hover) {\n      s.fill(s.colors.darkbluegrey);\n      s.noStroke();\n      s.rect(s.mx, s.my + s.typography.tooltipoffset, 100, 25);\n      s.fill(255);\n      s.text(s.global.strings.tooltipAdd, s.mx,\n          s.my + s.typography.tooltipoffset);\n    }\n  }\n\n  /**\n   * This functions checks if the mouse cursor is near the fake layer\n   * and will cause the draw function to draw the fake layer more visible\n   * if the cursor is closer to it\n   *\n   * @param {number} x the x position of the cursor\n   * @param {number} y the y position of the cursor\n   */\n  mouseMoved(x, y) {\n    if (x > this.x - this.w / 2 && x < this.x + this.w / 2 &&\n        y > this.y - this.h / 2 && y < this.y + this.h / 2) {\n      this.hover = true;\n    } else {\n      this.hover = false;\n    }\n  }\n\n  /**\n   * This function checks if the current fake layer component has been\n   * clicked on\n   */\n  checkClick() {\n    if (this.hover && !this.clicked && this.s.props.network.layers < 7) {\n      // Stop the training\n      this.s.props.actions.stopTraining(this.s.props.training);\n      // Update the network by adding a layer\n      this.s.props.actions.updateNetwork({...this.s.props.network,\n        layers: this.s.props.network.layers + 1});\n      // Reset the training state\n      this.s.props.actions.updateTraining({...this.s.props.training,\n        reset: true});\n    }\n    this.clicked = this.hover;\n  }\n}\n","import {Layer} from './layerplots/Layer';\nimport {FakeLayer} from './layerplots/FakeLayer';\nimport {Heading} from '../Heading';\n\n/**\n * This class represents the network model to be drawn on the drawing canvas\n */\nexport class Network {\n  /**\n   * The constructor function of the network class\n   *\n   * @param {object} s the p5 sketch\n   */\n  constructor(s) {\n    this.s = s;\n    this.layers = [];\n    this.fakeLayers = [];\n    this.loss = false;\n    this.s.rev = false;\n    const layercount = s.network.length;\n    if (layercount === 0) {\n      return;\n    }\n    let nodes = s.network[0];\n    this.active = false;\n    this.layers.push(new Layer(s, layercount, 0, nodes));\n    this.fakeLayers.push(new FakeLayer(s, layercount, 0.5));\n    for (let i = 1; i < layercount - 1; i++) {\n      nodes = s.network[i];\n      this.layers.push(new Layer(s, layercount, i, nodes));\n      this.fakeLayers.push(new FakeLayer(s, layercount, i + 0.5));\n    }\n    nodes = s.network[layercount-1];\n    this.layers.push(new Layer(s, layercount, layercount - 1, nodes));\n    this.heading = new Heading(this.s, this.s.netProps.left + 20,\n        this.s.height * this.s.typography.titleOffsetRatio / 2, 'network');\n  }\n\n  /**\n   * This functions is responsible for drawing the network model\n   * onto the dedicated canvas\n   */\n  draw() {\n    const s = this.s;\n    s.stroke(s.colors.lightgrey);\n    s.line(s.netProps.right, 0, s.netProps.right, s.netProps.height);\n    s.strokeWeight(2 * s.netScale);\n    if (s.netAnim) {\n      s.stroke(s.colors.overview);\n      s.drawingContext.lineDashOffset = this.s.rev ?\n        s.frameCount/2 : -s.frameCount/2;\n      s.drawingContext.setLineDash([10, 10]);\n    } else {\n      s.stroke(s.colors.bluegrey);\n    }\n    this.s.noFill();\n    this.s.line(s.netProps.left, s.netProps.midY, s.netProps.right,\n        s.netProps.midY);\n    s.drawingContext.setLineDash([]);\n    this.updatePause = Math.round(s.netPredFrames /\n      (this.layers.length));\n    this.updatePauseRev = Math.round(s.netTrainFrames /\n      (this.layers.length));\n    this.s.rev = s.netFrame > s.netPredFrames + s.netLossFrames;\n\n    if (!this.s.rev && s.netAnim && s.props.training.running &&\n        s.netFrame % this.updatePause === 0) {\n      this.update();\n    }\n    if (this.s.rev && s.netAnim && s.props.training.running &&\n        (s.netFrame - (s.netPredFrames + s.netLossFrames)) %\n        this.updatePauseRev === 0) {\n      this.update();\n    }\n    for (const l of this.layers) {\n      l.draw();\n    }\n    for (const l of this.fakeLayers) {\n      l.draw();\n    }\n    this.heading.draw(s.global.strings.headings[1].title);\n  }\n\n  /**\n   * This function is being called by the p5 sketch if the user has moved\n   * the cursor across the canvas and then updates the network accordingly\n   *\n   * @param {number} x the x position of the mouse cursor\n   * @param {number} y the y position of the mouse cursor\n   */\n  mouseMoved(x, y) {\n    for (const l of this.layers) {\n      l.mouseMoved(x, y);\n    }\n    for (const l of this.fakeLayers) {\n      l.mouseMoved(x, y);\n    }\n    this.heading.mouseMoved(x, y);\n  }\n\n  /**\n   * This function is being called when the user clicks on the canvas\n   */\n  checkClick() {\n    for (const l of this.layers) {\n      l.checkClick();\n    }\n    for (const l of this.fakeLayers) {\n      l.checkClick();\n    }\n    this.heading.checkClick();\n  }\n\n  /**\n   * This function is being called as a means to create an animated network\n   */\n  update() {\n    const s = this.s;\n    let next = -1;\n    let buff = 0;\n    for (const l of this.layers) {\n      buff = l.update();\n      if (buff > next) {\n        next = buff;\n      }\n    }\n    if (!s.rev && next >= 0 && next < this.layers.length) {\n      this.layers[next].activate();\n    } else if (s.rev && next >= 2 && next <= this.layers.length) {\n      this.layers[next - 2].activate();\n    } else {\n      this.layers[this.layers.length - 1].activate();\n    }\n  }\n\n  /**\n   * Initializes the animation of the network\n   */\n  start() {\n    for (const l of this.layers) {\n      l.deactivate();\n    }\n    this.s.rev = false;\n    this.layers[1].activate();\n  }\n}\n","/**\n * Used for drawing the text plot in the overview.\n */\nexport class TextPlot {\n  /**\n   * Draws the plot with all calculated values\n   *\n   * @param {object} s the p5 js sketch\n   */\n  drawTextPlot(s) {\n    let data = '';\n    let offset = 1;\n    let showSteps = this.in + this.out;\n    // only draw the current and the previous plot\n    if (s.plotAnim && s.plotFrame < s.plotMoveFrames) {\n      // calc the offset of a transitioning plot\n      offset = s.plotFrame / s.plotMoveFrames;\n    }\n    if (s.plotAnim && s.plotFrame > s.plotMoveFrames &&\n      s.plotFrame < s.plotMoveFrames + s.plotScanFrames) {\n      // calc the amount of plot values to show\n      showSteps = ((s.plotFrame - s.plotMoveFrames) / s.plotScanFrames) *\n        this.total;\n    }\n    if (showSteps > this.in + this.out) {\n      showSteps = this.in + this.out;\n    }\n    this.vis = offset * 255;\n    // actually draw stuff\n    s.push();\n    s.translate(this.cx - this.halfW, this.cy);\n    // draw the scan box while animating\n    if (s.plotAnim && s.plotFrame > s.plotMoveFrames &&\n      s.plotFrame < s.plotMoveFrames + s.plotScanFrames) {\n      const right = showSteps * this.stepWidth;\n      let left = right - (this.in * this.stepWidth);\n      if (left < 0) {\n        left = 0;\n      }\n      s.noStroke();\n      s.colors.lightgrey.setAlpha(200);\n      s.fill(s.colors.lightgrey);\n      s.colors.lightgrey.setAlpha(255);\n      s.rect(left + (right - left) / 2, 0, (right - left),\n          4 * s.typography.fontsize, 10);\n    }\n    // draw input for validation\n    if (s.props.ui.data && s.props.ui.data[this.index].chartPrediction) {\n      s.textSize(s.typography.fontsize);\n      s.colors.black.setAlpha(this.vis);\n      s.fill(s.colors.black);\n      s.colors.black.setAlpha(255);\n      for (let i = 0; i <= this.in; i++) {\n        data = s.props.ui.data[this.index].chartPrediction[i];\n        if (data) {\n          // draw the word \"input\" to the left\n          if (i === 0) {\n            s.push();\n            s.noStroke();\n            s.textAlign(s.LEFT, s.BOTTOM);\n            s.text(s.global.strings.plotInput, 0,\n                -2 * s.typography.fontsize - 5);\n            s.pop();\n          }\n          if (Object.prototype.hasOwnProperty.call(s.props.textData,\n              'textString')) {\n            data = s.props.textData.getFromOneHot(data);\n            s.textSize(s.typography.fontsize);\n            s.noStroke();\n            s.text(data, i * this.stepWidth, 0);\n          }\n        } else {\n          data = '';\n        }\n      }\n    }\n    // draw the test output for validation\n    if (s.props.ui.data &&\n      s.props.ui.data[this.index].chartOutput) {\n      s.colors.grey.setAlpha(this.vis);\n      s.fill(s.colors.grey);\n      s.colors.grey.setAlpha(255);\n      for (let i = 0; i < this.out; i++) {\n        data = s.props.ui.data[this.index].chartOutput[i];\n        if (data) {\n          if (Object.prototype.hasOwnProperty.call(s.props.textData,\n              'textString')) {\n            data = s.props.textData.getFromOneHot(data);\n            s.text(data, (i + this.in) * this.stepWidth,\n                -s.typography.fontsize);\n          }\n        }\n      }\n      if (s.props.ui.data[this.index].chartOutput[0]) {\n        // draw word \"target\" to the right\n        s.push();\n        s.noStroke();\n        s.textAlign(s.RIGHT, s.BOTTOM);\n        s.text(s.global.strings.plotOutput,\n            (this.out - 1 + this.in) * this.stepWidth + 10,\n            -2 * s.typography.fontsize - 5);\n        s.pop();\n      }\n    }\n    // draw net prediction for validation\n    if (s.props.ui.data && s.props.ui.data[this.index].prediction &&\n      (s.plotAnim === false || (s.plotAnim === true &&\n        s.plotFrame > s.plotMoveFrames))) {\n      s.colors.overview.setAlpha(this.vis);\n      s.fill(s.colors.overview);\n      s.colors.overview.setAlpha(255);\n      for (let i = 0; i < this.out && i < showSteps - this.in; i++) {\n        if (s.props.ui.data[this.index].prediction) {\n          data = s.props.ui.data[this.index].prediction[i];\n          if (data) {\n            if (Object.prototype.hasOwnProperty.call(s.props.textData,\n                'textString')) {\n              data = s.props.textData.getFromOneHot(data);\n              s.text(data, (i + this.in) * this.stepWidth,\n                  s.typography.fontsize);\n            }\n          }\n        }\n      }\n      s.endShape();\n      s.push();\n      if (showSteps - this.in > 0 &&\n          s.props.ui.data[this.index].prediction[0]) {\n        // draw word \"prediction\" at last prediction pos\n        s.noStroke();\n        s.textAlign(s.RIGHT, s.TOP);\n        s.text(s.global.strings.plotPrediction,\n            (showSteps - 1) * this.stepWidth + 10,\n            2 * s.typography.fontsize + 5);\n      }\n      s.pop();\n    }\n    s.pop();\n  }\n}\n\n","/**\n * Used for drawing the function plot in the overview.\n */\nexport class FunctionPlot {\n  /**\n   * Draws the plot with all calculated values\n   *\n   * @param {object} s the p5 js sketch\n   */\n  drawFunctionPlot(s) {\n    let data;\n    let offset = 1;\n    let showSteps = this.in + this.out;\n\n    // only draw the current and the previous plot\n    if (s.plotAnim && s.plotFrame < s.plotMoveFrames) {\n    // calc the offset of a transitioning plot\n      offset = s.plotFrame / s.plotMoveFrames;\n    }\n    if (s.plotAnim && s.plotFrame > s.plotMoveFrames &&\n      s.plotFrame < s.plotMoveFrames + s.plotScanFrames) {\n    // calc the amount of plot values to show\n      showSteps = ((s.plotFrame - s.plotMoveFrames) / s.plotScanFrames) *\n        this.total;\n    }\n    if (showSteps > this.in + this.out) {\n      showSteps = this.in + this.out;\n    }\n    this.vis = offset * 255;\n\n    // actually draw stuff\n    s.push();\n    s.translate(this.cx, this.cy);\n\n    // draw the scan box while animating\n    if (s.plotAnim && s.plotFrame > s.plotMoveFrames &&\n    s.plotFrame < s.plotMoveFrames + s.plotScanFrames) {\n      const right = (-this.halfW) + (showSteps * this.stepWidth);\n      let left = right - (this.in * this.stepWidth);\n      if (left < -this.halfW) {\n        left = -this.halfW;\n      }\n      s.noStroke();\n      s.colors.lightgrey.setAlpha(200);\n      s.fill(s.colors.lightgrey);\n      s.colors.lightgrey.setAlpha(255);\n      s.rect(left + (right - left) / 2, 0, (right-left), 1.8 * this.halfH, 10);\n    }\n\n    // draw the plot axes\n    s.colors.darkbluegrey.setAlpha(this.vis);\n    s.stroke(s.colors.darkbluegrey);\n    s.colors.darkbluegrey.setAlpha(255);\n    s.line(-this.halfW, 0, this.halfW, 0);\n    s.line(((-this.halfW) + (this.in * this.stepWidth)), -(this.halfH-20),\n        (-this.halfW + (this.in * this.stepWidth)), (this.halfH-20));\n\n    if (s.props.ui.data &&\n        s.props.ui.data[this.index].chartPrediction) {\n      s.colors.darkgrey.setAlpha(this.vis);\n      s.stroke(s.colors.darkgrey);\n      s.colors.darkgrey.setAlpha(255);\n      s.noFill();\n      s.beginShape();\n      // draw input for validation\n      s.strokeWeight(2);\n      for (let i = 0; i <= this.in; i++) {\n        data = s.props.ui.data[this.index].chartPrediction[i];\n        // draw the word \"input\" to the left\n        if (i === 0) {\n          s.push();\n          s.noStroke();\n          s.textAlign(s.RIGHT, s.BOTTOM);\n          s.textStyle(s.BOLD);\n          s.colors.darkgrey.setAlpha(this.vis);\n          s.fill(s.colors.darkgrey);\n          s.colors.darkgrey.setAlpha(255);\n          s.text(this.s.global.strings.plotInput, -this.halfW - 5,\n              -this.halfH / 2 * data);\n          s.pop();\n        }\n        s.vertex(-this.halfW + i * this.stepWidth, -this.halfH / 2 * data);\n      }\n      data = s.props.ui.data[this.index].chartOutput[0];\n      s.vertex(-this.halfW + (this.in * this.stepWidth),\n          -this.halfH / 2 * data);\n      s.endShape();\n    }\n\n    // draw the test output for validation\n    s.strokeWeight(1);\n    if (s.props.ui.data &&\n    s.props.ui.data[this.index].chartOutput) {\n      s.colors.grey.setAlpha(this.vis);\n      s.stroke(s.colors.grey);\n      s.colors.grey.setAlpha(255);\n      s.noFill();\n      s.beginShape();\n      for (let i = 0; i < this.out; i++) {\n        data = s.props.ui.data[this.index].chartOutput[i];\n        s.vertex((-this.halfW + ((i + this.in) * this.stepWidth)),\n            (-this.halfH / 2 * data));\n      }\n      s.endShape();\n      // draw word \"target\" to the right\n      s.push();\n      s.noStroke();\n      s.colors.grey.setAlpha(this.vis);\n      s.fill(s.colors.grey);\n      s.colors.grey.setAlpha(255);\n      s.textAlign(s.LEFT, s.BOTTOM);\n      s.text(s.global.strings.plotOutput,\n          -this.halfW + (this.total * this.stepWidth),\n          -this.halfH / 2 * data + 5);\n      s.pop();\n    }\n\n    // draw net prediction for validation\n    s.strokeWeight(3);\n    if (s.props.ui.data && s.props.ui.data[this.index].prediction &&\n    ((s.plotAnim === false ||\n      (s.plotAnim === true && s.plotFrame > s.plotMoveFrames)))) {\n      s.colors.overview.setAlpha(this.vis);\n      s.stroke(s.colors.overview);\n      s.colors.overview.setAlpha(255);\n      s.noFill();\n      s.beginShape();\n      for (let i = 0; i < this.out && i < showSteps - this.in; i++) {\n        if (s.props.ui.data[this.index].prediction) {\n          data = s.props.ui.data[this.index].prediction[i];\n          s.vertex(\n              (-this.halfW + ((i + this.in) * this.stepWidth)),\n              (-this.halfH / 2 * data));\n        }\n      }\n      s.endShape();\n\n      // draw word \"prediction\" at last prediction pos\n      data = s.props.ui.data[this.index].prediction[Math.round(\n          showSteps) - this.in];\n      s.push();\n      s.noStroke();\n      s.textAlign(s.LEFT, s.TOP);\n      s.textStyle(s.BOLD);\n      s.fill(s.colors.overview);\n      s.text(s.global.strings.plotPrediction,\n          -this.halfW + showSteps * this.stepWidth,\n          -this.halfH / 2 * data);\n      s.pop();\n    }\n\n    // Draw the error bars for training\n    s.strokeWeight(2);\n    if (this.s.netFrame > this.s.netPredFrames + this.s.netLossFrames) {\n      if (s.props.ui.data &&\n    s.props.ui.data[this.index].prediction && (this.index > 2 ||\n      (this.index === 2 && (s.plotAnim === false || (s.plotAnim === true &&\n        s.plotFrame > s.plotMoveFrames))))) {\n        s.colors.overviewlight.setAlpha(this.vis);\n        s.stroke(s.colors.overviewlight);\n        s.colors.overview.setAlpha(255);\n        for (let i = 0; i < this.out; i++) {\n          if (s.props.ui.data[this.index].prediction) {\n            const dataPred = s.props.ui.data[this.index].prediction[i];\n            const dataOut = s.props.ui.data[this.index].chartOutput[i];\n            const from = -this.halfH / 2 * dataPred;\n            const to = -this.halfH / 2 * dataOut;\n            const ratio = (this.s.netFrame - (this.s.netPredFrames +\n            this.s.netLossFrames)) / this.s.netTrainFrames;\n            s.line((-this.halfW + ((i + this.in) * this.stepWidth)), from,\n                (-this.halfW + ((i + this.in) * this.stepWidth)),\n                (from + (to - from) * ratio));\n          }\n        }\n        s.noStroke();\n      }\n    }\n    s.pop();\n  }\n}\n","/**\n * Plots an animation for incoming data.\n *\n * @param {String} type the type of data that we need to plot for\n * @param {object} s the p5 js sketch\n * @param {number} halfH half the height of the plot\n */\nexport function plotIncomingData(type, s, halfH) {\n  let height = halfH;\n  if (type === 'text') {\n    height = 3.5 * s.typography.fontsize;\n  }\n  const originX = s.outProps.left;\n  const originY = s.outProps.midY;\n  s.push();\n\n  // Draw background color\n  s.colors.lightgrey.setAlpha(100);\n  s.fill(s.colors.lightgrey);\n  s.colors.lightgrey.setAlpha(255);\n  for (let i = -1; i < 2; i=i+2) {\n    s.beginShape();\n    s.vertex(originX, originY);\n    s.bezierVertex(originX+80, originY, originX+20, originY+i*height,\n        originX+100, originY+i*height);\n    s.vertex(originX+100, originY);\n    s.endShape(s.CLOSE);\n  }\n  s.rectMode(s.CORNER);\n  s.rect(originX+100, originY-height, s.outProps.right-s.outProps.left-100,\n      2*height);\n\n  // Draw animated curves\n  s.noFill();\n  if (s.netAnim) {\n    s.stroke(s.colors.overview);\n    s.drawingContext.lineDashOffset = s.rev ?\n      s.frameCount/2 : -s.frameCount/2;\n    s.drawingContext.setLineDash([10, 10]);\n  } else {\n    s.stroke(s.colors.bluegrey);\n  }\n  for (let i = -1; i < 2; i=i+2) {\n    s.bezier(originX, originY, originX+80, originY, originX+20,\n        originY+i*height, originX+100, originY+i*height);\n  }\n  s.pop();\n}\n","/**\n * Plots an explanation for the shown data.\n *\n * @param {String} type the type of data that we need to plot for\n * @param {object} s the p5 js sketch\n * @param {number} halfH half the height of the plot\n */\nexport function plotDataExplanation(type, s, halfH) {\n  let height = halfH;\n  if (type === 'text') {\n    height = 3.5 * s.typography.fontsize;\n  }\n  const originY = s.outProps.midY;\n  s.push();\n  s.textAlign(s.RIGHT, s.TOP);\n  s.textSize(s.typography.fontsizesmall);\n  s.fill(s.colors.darkgrey);\n  s.noStroke();\n  s.text(s.global.strings.dataExplanation, s.outProps.right - 10,\n      originY + height + 10);\n  s.pop();\n}\n","import {Heading} from '../Heading';\nimport {TextPlot} from './subplots/TextPlot';\nimport {FunctionPlot} from './subplots/FunctionPlot';\nimport {plotIncomingData} from './subplots/IncomingData';\nimport {plotDataExplanation} from './subplots/DataExplanation';\n\n/**\n * This class represents the plots of the output side\n * of the network visualisation\n */\nexport class NetworkPlot {\n  /**\n   * The constructor function of the class plot\n   *\n   * @param {object} s the p5 js sketch\n   */\n  constructor(s) {\n    this.s = s;\n    this.index = 2;\n    this.cx = s.outProps.midX;\n    this.cy = s.outProps.midY;\n    this.scale = 1 - 0.5 * (Math.abs(s.height/2 - this.cy) / (s.height/2));\n    this.plotWidth = s.outProps.width * s.outProps.horRatio;\n    this.plotHeight = s.outProps.height * s.outProps.verRatio;\n    if (!s.props) {\n      return;\n    }\n    if (s.props.training.values + s.props.training.predictions === 0) {\n      this.stepWidth = 2;\n    } else {\n      this.total = s.props.training.values + s.props.training.predictions;\n      this.stepWidth = this.plotWidth / this.total;\n    }\n    this.heading = new Heading(this.s, this.s.outProps.left + 20,\n        this.s.height * this.s.typography.titleOffsetRatio / 2, 'prediction');\n    this.textPlot = new TextPlot();\n    this.functionPlot = new FunctionPlot();\n  }\n\n  /**\n   * Draws the heading of the output\n   */\n  plotHeading() {\n    this.heading.draw(this.s.global.strings.headings[2].title);\n  }\n\n  /**\n   * The drawing function of the plot class, responsible for drawing the plots\n   * onto the network canvas\n   */\n  draw() {\n    const s = this.s;\n    if (!s.props) {\n      return;\n    }\n    if (s.props.training.values + s.props.training.predictions === 0) {\n      this.stepWidth = 2;\n    } else {\n      this.total = s.props.training.values + s.props.training.predictions;\n      this.stepWidth = this.plotWidth / this.total;\n    }\n    this.in = s.props.training.values;\n    this.out = s.props.training.predictions;\n    this.total = this.in + this.out;\n    this.halfW = this.plotWidth / 2;\n    this.halfH = this.plotHeight / 2;\n    if (this.stepWidth === 2 && this.total !== 0) {\n      this.stepWidth = this.plotWidth / this.total;\n    }\n    if (this.s.props.training.inputType === 'Text Data') {\n      plotIncomingData('text', s, this.halfH);\n      this.plotHeading();\n      this.textPlot.drawTextPlot.call(this, s);\n      plotDataExplanation('text', s, this.halfH);\n    } else {\n      plotIncomingData('function', s, this.halfH);\n      this.plotHeading();\n      this.functionPlot.drawFunctionPlot.call(this, s);\n      plotDataExplanation('function', s, this.halfH);\n    }\n  }\n\n  /**\n   * This function is being called by the p5 sketch if the user has moved\n   * the cursor across the canvas and then updates the network accordingly\n   *\n   * @param {number} x the x position of the mouse cursor\n   * @param {number} y the y position of the mouse cursor\n   */\n  mouseMoved(x, y) {\n    this.heading.mouseMoved(x, y);\n  }\n\n  /**\n   * This function is being called when the user clicks on the canvas\n   */\n  checkClick() {\n    this.heading.checkClick();\n  }\n}\n","import {Heading} from '../Heading';\n\n/**\n * This class represents the visual component of the input selection for\n * the network\n */\nexport class Input {\n  /**\n  * The constructor of this class\n  *\n  * @param {object} s the p5.js sketch\n  */\n  constructor(s) {\n    this.s = s;\n    this.dist = 0.18 * s.inProps.height;\n    this.buttons = [];\n    this.steps = 30; // needed for the buttons' visual calculations\n    this.noises = [];\n    for (let i = 0; i < this.steps; i++) {\n      this.noises.push(-0.2 + 0.4 * Math.random());\n    }\n    if (s.props.training.inputType === 'Text Data') {\n      this.buttons.push(new Button(s, 'text', 1, 2, this.dist, 0, 0, 'abab'));\n      this.buttons.push(new Button(s, 'text', 2, 2, this.dist, 0, 0, 'lorem'));\n    } else {\n      this.buttons.push(new Button(s, 'sin', 1, 4, this.dist, this.steps,\n          this.noises));\n      this.buttons.push(new Button(s, 'saw', 2, 4, this.dist, this.steps,\n          this.noises));\n      this.buttons.push(new Button(s, 'sqr', 3, 4, this.dist, this.steps,\n          this.noises));\n      this.buttons.push(new Button(s, 'sinc', 4, 4, this.dist, this.steps,\n          this.noises));\n    }\n    this.heading = new Heading(this.s, this.s.inProps.left + 20,\n        this.s.height * this.s.typography.titleOffsetRatio / 2, 'input');\n  }\n\n  /**\n   * Draw input options\n   */\n  draw() {\n    const s = this.s;\n    for (const b of this.buttons) {\n      b.draw();\n    }\n    this.heading.draw(s.global.strings.headings[0].title);\n    s.stroke(s.colors.lightgrey);\n    s.line(s.inProps.right, 0, s.inProps.right, s.inProps.height);\n  }\n\n  /**\n   * Check if a mouse click interacts with an input button\n   */\n  checkClick() {\n    for (const b of this.buttons) {\n      b.checkClick();\n    }\n    this.heading.checkClick();\n  }\n\n  /**\n   * Check if a mouse movement occurs over an input button\n   *\n   * @param {number} mx the x position of the cursor\n   * @param {number} my the y position of the cursor\n   */\n  mouseMoved(mx, my) {\n    this.heading.mouseMoved(mx, my);\n    for (const b of this.buttons) {\n      b.mouseMoved(mx, my);\n    }\n  }\n}\n\n/**\n * This class represents a single input button\n */\nclass Button {\n  /**\n   * The constructor of this class\n   *\n   * @param {object} s the parent p5.js sketch\n   * @param {string} type the function type of this button\n   * @param {number} pos the position of this button\n   * @param {number} maxPos the maximum position for all buttons\n   * @param {number} dist the distance between two buttons\n   * @param {number} steps the amount of function steps used for the button\n   * image in this button\n   * @param {number[]} noises an array of random noise values to be added\n   * to the button image\n   * @param {String} textType the type of text input\n   */\n  constructor(s, type, pos, maxPos, dist, steps = 0, noises = 0,\n      textType = '') {\n    this.s = s;\n    this.type = type;\n    this.pos = pos;\n    this.maxPos = maxPos;\n    this.x = s.inProps.midX;\n    this.y = s.inProps.midY + (pos - 1) * dist - (maxPos / 2.0 - 0.5) * dist;\n    this.size = dist * 0.8;\n    this.left = this.x - this.size / 2;\n    this.right = this.x + this.size/2;\n    this.top = this.y - this.size / 2;\n    this.bot = this.y + this.size/2;\n    this.active = (s.props.training.dataTypes.includes(type));\n    this.steps = steps;\n    this.noises = noises;\n    this.textType = textType;\n  }\n\n  /**\n   * Draws a single input button on the canvas\n   */\n  draw() {\n    const s = this.s;\n    s.fill(s.colors.lightgrey);\n    s.noStroke();\n    s.strokeWeight(2);\n    this.active = (s.props.training.dataTypes.includes(this.type) ||\n      s.props.training.dataTypes.includes(this.textType));\n    if (this.active) {\n      s.noFill();\n      if (s.netAnim && !this.s.rev) {\n        s.stroke(s.colors.overview);\n        s.drawingContext.lineDashOffset = -s.frameCount/2;\n        s.drawingContext.setLineDash([10, 10]);\n      } else {\n        s.stroke(s.colors.bluegrey);\n      }\n      s.bezier(this.x + this.size / 2.0, this.y, s.inProps.right - 20, this.y,\n          this.x + this.size / 2.0 + 20, s.inProps.height / 2.0,\n          s.inProps.right, s.inProps.height / 2.0);\n      s.noStroke();\n      s.drawingContext.setLineDash([]);\n      s.fill(s.colors.overview);\n    }\n    if (this.hover) {\n      s.fill(s.colors.bluegrey);\n      if (this.active) {\n        s.fill(s.colors.overviewdark);\n      }\n      s.cursor(s.HAND);\n    }\n    s.rect(this.x, this.y, this.size, this.size);\n    const startX = this.x - this.size/2;\n    const startY = this.y;\n    s.noFill();\n    if (this.type === 'text') {\n      s.fill(s.colors.white);\n      s.textSize(30);\n      s.textAlign(s.CENTER, s.CENTER);\n      s.text(this.textType, startX + this.size/2, startY);\n      s.textSize(s.typography.fontsize);\n    } else {\n      const range = Math.PI * 2;\n      const ratio = this.size / range;\n      s.stroke(s.colors.white);\n      s.beginShape();\n      let noiseVal;\n      for (let i = 0; i < this.steps; i++) {\n        noiseVal = this.noises[i] * (this.s.props.training.noise / 100);\n        const x = i / this.steps * range;\n        const x_ = (i + s.frameCount/8) / this.steps * range;\n        const y = this.dataFunc((this.active && s.netAnim) ? x_ : x,\n            this.type) + noiseVal;\n        s.vertex(startX + this.size - x * ratio, startY + y * this.size / 4);\n      }\n      s.endShape();\n    }\n  }\n\n  /**\n   * A helper function that represents the currently chosen input function\n   *\n   * @param {number} x the current input value\n   * @param {string} type the type of function that should be applied to\n   *  the input values\n   * @return {number} y = type(x)\n   */\n  dataFunc(x, type) {\n    let y = Math.sin(x);\n    if (type === 'sinc') {\n      y = (Math.sin(1.5*x) + Math.sin(4.5 * x)) / 1.5;\n    }\n    if (type === 'saw') {\n      y = -1 + 2 * ((x % Math.PI) / Math.PI);\n    }\n    if (type === 'sqr') {\n      y = Math.sin((Math.PI/2)*x) >= 0 ? 1 : -1;\n    }\n    return y;\n  }\n\n  /**\n   * Checks if a mouse click interacts with this button\n   */\n  checkClick() {\n    const mx = this.s.mx;\n    const my = this.s.my;\n    let reset = false;\n    if (mx > this.left && mx < this.right && my > this.top && my < this.bot) {\n      const oldTypes = this.s.props.training.dataTypes;\n      let newTypes = oldTypes;\n      if ((this.type === 'text' && !oldTypes.includes(this.textType)) ||\n        (this.type !== 'text' && !oldTypes.includes(this.type))) {\n        if (this.s.props.network.iteration === 0) {\n          if (this.type === 'text') {\n            newTypes = [this.textType];\n          } else {\n            newTypes = [this.type];\n          }\n          reset = true;\n        } else {\n          this.s.props.actions.updateAlertSnack({open: true,\n            message: 'This change can only be made after a Network Reset.'});\n          newTypes = oldTypes;\n        }\n      }\n      this.s.props.actions.updateTraining(\n          {...this.s.props.training, dataTypes: newTypes, reset: reset}\n      );\n    }\n  }\n\n  /**\n   * Check if a mouse movement occurs over this specific input button\n   *\n   * @param {number} mx the x position of the cursor\n   * @param {number} my the y position of the cursor\n   */\n  mouseMoved(mx, my) {\n    if (mx > this.left && mx < this.right && my > this.top && my < this.bot) {\n      this.hover = true;\n    } else {\n      this.hover = false;\n    }\n  }\n}\n","/**\n * Used for drawing the text plot in the overview.\n */\nexport class TextPlot {\n  /**\n   * Draws the plot with all calculated values\n   *\n   * @param {object} s the p5 js sketch\n   */\n  drawTextPlot(s) {\n    let data;\n    if (!s.props || !s.props.ui.data) {\n      return;\n    }\n    // prepare plot parameters\n    if (s.props.training.values + s.props.training.predictions === 0) {\n      this.stepWidth = 2;\n    } else {\n      this.total = s.props.training.values + s.props.training.predictions;\n      this.stepWidth = this.plotWidth / this.total;\n    }\n    this.in = s.props.training.values;\n    this.out = s.props.training.predictions;\n    this.total = this.in + this.out;\n    this.halfW = this.plotWidth / 2;\n    this.halfH = this.plotHeight / 2;\n    if (this.stepWidth === 2 && this.total !== 0) {\n      this.stepWidth = this.plotWidth / this.total;\n    }\n    const scanPlot = s.props.ui.data[this.dataIndex].chartPrediction.concat(\n        s.props.ui.data[this.dataIndex].prediction\n    );\n    s.push();\n    s.translate(s.cellPlotProps.midX - this.halfW, s.cellPlotProps.midY);\n\n    // draw the scan box while animating\n    if (s.cellAnim.forward) {\n      s.noStroke();\n      s.rectMode(s.CORNER);\n      const left = -10 + s.cellAnim.predictionStep * this.stepWidth;\n      const right = this.in * this.stepWidth;\n      s.colors.lightgrey.setAlpha(120);\n      s.fill(s.colors.lightgrey);\n      s.colors.lightgrey.setAlpha(255);\n      s.rect(left, -2 * s.typography.fontsize, right,\n          4 * s.typography.fontsize, 10);\n    }\n\n    if (s.props.ui.data &&\n        s.props.ui.data[this.dataIndex].chartPrediction &&\n        s.props.ui.data[this.dataIndex].chartOutput &&\n        s.props.ui.data[this.dataIndex].prediction) {\n    // draw input part of the data\n      s.textSize(s.typography.fontsize);\n      s.fill(s.colors.black);\n      for (let i = 0; i <= this.in; i++) {\n        data = s.props.ui.data[this.dataIndex].chartPrediction[i];\n        if (data) {\n        // draw the word \"input\" to the left\n          if (i === 0) {\n            s.push();\n            s.noStroke();\n            s.textAlign(s.LEFT, s.BOTTOM);\n            s.text(s.global.strings.plotInput, 0,\n                -2 * s.typography.fontsize - 5);\n            s.pop();\n          }\n          if (Object.prototype.hasOwnProperty.call(\n              s.props.textData, 'textString')) {\n            data = s.props.textData.getFromOneHot(data);\n            s.textSize(s.typography.fontsize);\n            s.noStroke();\n            s.text(data, i * this.stepWidth, 0);\n          }\n        } else {\n          data = '';\n        }\n      }\n\n      // draw the test output part of the data\n      s.fill(s.colors.grey);\n      for (let i = 0; i < this.out; i++) {\n        data = s.props.ui.data[this.dataIndex].chartOutput[i];\n        if (data) {\n          if (Object.prototype.hasOwnProperty.call(\n              s.props.textData, 'textString')) {\n            data = s.props.textData.getFromOneHot(data);\n            s.text(data, (i + this.in) * this.stepWidth,\n                -s.typography.fontsize);\n          }\n        }\n      }\n      // draw word \"target\" to the right\n      s.push();\n      s.noStroke();\n      s.fill(s.colors.grey);\n      s.textAlign(s.RIGHT, s.BOTTOM);\n      s.text(s.global.strings.plotOutput,\n          (this.out - 1 + this.in) * this.stepWidth + 10,\n          -2 * s.typography.fontsize - 5);\n      s.pop();\n      // draw dots for all inputs\n      const leftIndex = s.cellAnim.predictionStep;\n      const rightIndex = s.cellAnim.predictionStep + s.cellAnim.inputStep;\n      if (s.cellAnim.forward) {\n      // draw the scanned points for that compute step in bold\n        s.noStroke();\n        s.fill(s.colors.darkbluegrey);\n        s.textStyle(s.BOLD);\n        for (let i = leftIndex; i <= rightIndex; i++) {\n          data = s.props.ui.data[this.dataIndex].chartPrediction[i];\n          if (data) {\n            if (Object.prototype.hasOwnProperty.call(\n                s.props.textData, 'textString')) {\n              data = s.props.textData.getFromOneHot(data);\n              s.textSize(s.typography.fontsize);\n              s.noStroke();\n              s.text(data, i * this.stepWidth, 0);\n            }\n          }\n        }\n        s.textStyle(s.NORMAL);\n\n        // Draw the vertical scan line\n        const left = -10;\n        s.stroke(s.colors.darkgrey);\n        s.noFill();\n        const buffX = left + ((rightIndex + 1) * this.stepWidth);\n        s.strokeWeight(1);\n        s.line(buffX, -1.5 * s.typography.fontsize, buffX,\n            1.5 * s.typography.fontsize);\n      }\n\n      // Calculate the end index for the prediction\n      const endIndex = s.cellAnim.forward ?\n        this.in + s.cellAnim.predictionStep : this.total;\n      s.noStroke();\n      s.fill(s.colors.detail);\n      // draw the predictions that thave already been made\n      if (s.props.ui.data &&\n      s.props.ui.data[this.dataIndex].chartOutput) {\n        for (let i = this.in; i < endIndex; i++) {\n          if (rightIndex >= i) {\n            s.textStyle(s.BOLD);\n          } else {\n            s.textStyle(s.NORMAL);\n          }\n          data = scanPlot[i];\n          if (data) {\n            if (Object.prototype.hasOwnProperty.call(\n                s.props.textData, 'textString')) {\n              data = s.props.textData.getFromOneHot(data);\n              s.text(data, i * this.stepWidth, s.typography.fontsize);\n            }\n          }\n        }\n        s.push();\n        if (endIndex > this.in) {\n        // draw word \"prediction\" at last prediction pos\n          s.noStroke();\n          s.textAlign(s.RIGHT, s.TOP);\n          s.fill(s.colors.detail);\n          s.text(s.global.strings.plotPrediction,\n              (endIndex - 1) * this.stepWidth + 10,\n              2 * s.typography.fontsize + 5);\n        }\n        s.pop();\n      }\n      s.textStyle(s.NORMAL);\n    }\n    s.pop();\n  }\n}\n","/**\n * Used for drawing the function plot in the overview.\n */\nexport class FunctionPlot {\n  /**\n   * Draws the plot with all calculated values\n   *\n   * @param {object} s the p5 js sketch\n   */\n  drawFunctionPlot(s) {\n    let data;\n    let truth;\n    let from;\n    let to;\n    if (!s.props || !s.props.ui.data) {\n      return;\n    }\n    // prepare plot parameters\n    if (s.props.training.values + s.props.training.predictions === 0) {\n      this.stepWidth = 2;\n    } else {\n      this.total = s.props.training.values + s.props.training.predictions;\n      this.stepWidth = this.plotWidth / this.total;\n    }\n    this.in = s.props.training.values;\n    this.out = s.props.training.predictions;\n    this.total = this.in + this.out;\n    this.halfW = this.plotWidth / 2;\n    this.halfH = this.plotHeight / 2;\n    if (this.stepWidth === 2 && this.total !== 0) {\n      this.stepWidth = this.plotWidth / this.total;\n    }\n\n    const detailStepWidth = this.stepWidth;\n    const groundTruth = s.props.ui.data[\n        this.dataIndex].chartPrediction.concat(\n        s.props.ui.data[this.dataIndex].chartOutput\n    );\n    const scanPlot = s.props.ui.data[this.dataIndex].chartPrediction.concat(\n        s.props.ui.data[this.dataIndex].prediction\n    );\n    // draw plot structure\n    s.push();\n    s.translate(s.cellPlotProps.midX, s.cellPlotProps.midY);\n    s.ellipseMode(s.CENTER);\n    // draw the scan box while animating\n    if (s.cellAnim.forward) {\n      s.noStroke();\n      const left = (-this.halfW) + (s.cellAnim.predictionStep *\n          this.stepWidth);\n      const right = left + ((this.in - 1) * this.stepWidth);\n      s.colors.lightgrey.setAlpha(120);\n      s.fill(s.colors.lightgrey);\n      s.colors.lightgrey.setAlpha(255);\n      s.rect(left + ((this.in - 1) * this.stepWidth) / 2, 0,\n          ((this.in - 1) * this.stepWidth), 1.2 * this.halfH);\n      const tween =\n        (s.cellAnim.step + s.cellAnim.inputStep * s.cellAnim.maxSteps) /\n        (s.cellAnim.maxSteps * this.in);\n      s.stroke(s.colors.darkgrey);\n      s.noFill();\n      let buffX = left + (this.in * this.stepWidth * tween);\n      if (buffX > right) {\n        buffX = right;\n      }\n      s.strokeWeight(1);\n      s.line(buffX, -0.6 * this.halfH, buffX, 0.6 * this.halfH);\n    }\n    // draw graph lines\n    s.noFill();\n    s.strokeWeight(2);\n    s.stroke(s.colors.darkgrey);\n    s.line(-this.halfW, 0, this.halfW, 0);\n    s.line((-this.halfW) + (this.in * this.stepWidth), -this.halfH,\n        -this.halfW + (this.in * this.stepWidth), this.halfH\n    );\n\n    if (s.props.ui.data &&\n        s.props.ui.data[this.dataIndex].chartPrediction &&\n        s.props.ui.data[this.dataIndex].chartOutput &&\n        s.props.ui.data[this.dataIndex].prediction) {\n    // draw input function part\n      s.beginShape();\n      for (let i = 0; i <= this.in; i++) {\n        data = groundTruth[i];\n        // draw the word \"input\" to the left\n        if (i === 0) {\n          s.noStroke();\n          s.textAlign(s.RIGHT, s.BOTTOM);\n          s.textStyle(s.BOLD);\n          s.fill(s.colors.darkgrey);\n          s.text(s.global.strings.plotInput,\n              -this.halfW - 5,\n              -this.halfH / 2 * data);\n          s.noFill();\n          s.strokeWeight(2);\n          s.stroke(s.colors.darkgrey);\n          s.textStyle(s.NORMAL);\n        }\n        s.vertex(-this.halfW + (i * detailStepWidth),\n            -this.halfH / 2 * data);\n      }\n      s.endShape();\n      // draw ground truth function part\n      s.beginShape();\n      s.stroke(s.colors.grey);\n      s.strokeWeight(1);\n      for (let i = this.in; i < this.total; i++) {\n        data = groundTruth[i];\n        s.vertex(-this.halfW + (i * detailStepWidth),\n            -this.halfH / 2 * data);\n      }\n      s.endShape();\n      // draw word \"target\" to the right\n      s.noStroke();\n      s.fill(s.colors.grey);\n      s.textAlign(s.LEFT, s.BOTTOM);\n      s.text(s.global.strings.plotOutput,\n          -this.halfW + (this.total * detailStepWidth),\n          -this.halfH / 2 * data + 5);\n      // draw dots for all inputs\n      s.noStroke();\n      s.fill(s.colors.darkgrey);\n      for (let i = 0; i < this.in; i++) {\n        data = groundTruth[i];\n        s.ellipse(-this.halfW + (i * detailStepWidth),\n            -this.halfH / 2 * data, 4);\n      }\n\n      // draw current prediction with error bars\n      s.strokeWeight(1);\n      s.noFill();\n      s.stroke(s.colors.detaillight);\n      const endIndex = s.cellAnim.forward ?\n        (this.in + s.cellAnim.predictionStep - 1) : this.total;\n      for (let i = this.in; i <= endIndex; i++) {\n        data = scanPlot[i];\n        truth = groundTruth[i];\n        s.line(-this.halfW + (i * detailStepWidth),\n            -this.halfH / 2 * data, -this.halfW + (i * detailStepWidth),\n            -this.halfH / 2 * truth);\n      }\n      s.noStroke();\n      s.fill(s.colors.grey);\n      for (let i = this.in; i <= endIndex; i++) {\n        data = groundTruth[i];\n        s.ellipse(-this.halfW + (i * detailStepWidth),\n            -this.halfH / 2 * data, 4);\n      }\n      if (!s.cellAnim.forward) {\n        let errorRatio = s.cellAnim.errorStep / s.cellAnim.maxErrorSteps;\n        if (s.cellAnim.back) {\n          errorRatio = 1 - s.cellAnim.backStep / s.cellAnim.maxBackSteps;\n        }\n        s.stroke(s.colors.darkgrey);\n        s.strokeWeight(1);\n        for (let i = this.in; i <= this.total; i++) {\n          data = scanPlot[i];\n          truth = groundTruth[i];\n          from = -this.halfH / 2 * data;\n          to = -this.halfH / 2 * truth;\n          if (s.cellAnim.back) {\n            const buff = from;\n            from = to;\n            to = buff;\n          }\n          s.line(-this.halfW + (i * detailStepWidth), from,\n              -this.halfW + (i * detailStepWidth),\n              from + (to - from) * errorRatio);\n        }\n        s.noStroke();\n        s.fill(s.colors.grey);\n        for (let i = this.in; i <= endIndex; i++) {\n          data = groundTruth[i];\n          s.ellipse(-this.halfW + (i * detailStepWidth),\n              -this.halfH / 2 * data, 4);\n        }\n      }\n      s.stroke(s.colors.detail);\n      s.strokeWeight(2);\n      s.noFill();\n      s.beginShape();\n      for (let i = this.in; i <= endIndex; i++) {\n        data = scanPlot[i];\n        s.vertex(-this.halfW + (i * detailStepWidth),\n            -this.halfH / 2 * data);\n      }\n      s.endShape();\n      if (endIndex >= this.in) {\n      // draw word \"prediction\" at last prediction pos\n        s.noStroke();\n        s.textAlign(s.LEFT, s.TOP);\n        s.textStyle(s.BOLD);\n        s.fill(s.colors.detail);\n        s.text(s.global.strings.plotPrediction,\n            -this.halfW + endIndex * detailStepWidth + 5,\n            -this.halfH / 2 * data);\n      }\n      // draw scanned points\n      if (s.cellAnim.forward) {\n        s.noStroke();\n        s.fill(s.colors.detaildark);\n        const leftIndex = s.cellAnim.predictionStep;\n        const rightIndex = s.cellAnim.predictionStep + s.cellAnim.inputStep;\n        for (let i = leftIndex; i <= rightIndex; i++) {\n          data = scanPlot[i];\n          if (i < this.in) {\n            s.fill(s.colors.darkgrey);\n          } else {\n            s.fill(s.colors.detaildark);\n          }\n          s.ellipse(-this.halfW + (i * detailStepWidth),\n              (-this.halfH / 2 * data), 6);\n        }\n        if (s.cellAnim.predictionStep > 0) {\n          data = scanPlot[this.in + (s.cellAnim.predictionStep - 1)];\n          if (s.cellAnim.inputStep === this.in - 1) {\n            s.fill(s.colors.detaildark);\n            s.ellipse(-this.halfW + (endIndex * detailStepWidth),\n                (-this.halfH / 2 * data), 12);\n          } else {\n            s.fill(s.colors.detail);\n            s.ellipse(-this.halfW + (endIndex * detailStepWidth),\n                (-this.halfH / 2 * data), 10);\n          }\n        }\n      }\n    }\n\n    s.pop();\n  }\n}\n","/**\n * Plots an explanation for the shown data.\n *\n * @param {String} type the type of data that we need to plot for\n * @param {object} s the p5 js sketch\n * @param {number} halfH half the height of the plot\n */\nexport function plotBackpropExplanation(type, s, halfH) {\n  let height = halfH;\n  if (type === 'text') {\n    height = 3 * s.typography.fontsize;\n  }\n  const originY = s.outProps.midY;\n  s.push();\n  s.textAlign(s.RIGHT, s.TOP);\n  s.textSize(s.typography.fontsizesmall);\n  s.fill(s.colors.darkgrey);\n  s.noStroke();\n  s.text(s.global.strings.backpropExplanation, s.outProps.right - 10,\n      originY + height + 10);\n  s.pop();\n}\n","import {Heading} from '../Heading';\nimport {TextPlot} from './subplots/TextPlot';\nimport {FunctionPlot} from './subplots/FunctionPlot';\nimport {plotBackpropExplanation} from './subplots/BackpropExplanation';\n\n/**\n * This class represents the Plot of the Detail View\n */\nexport class CellPlot {\n  /**\n   * The constructor function of the class CellPlot\n   *\n   * @param {object} s the p5 js sketch\n   */\n  constructor(s) {\n    this.s = s;\n    this.dataIndex = 2;\n    this.plotWidth = s.cellPlotProps.width * s.cellPlotProps.horRatio;\n    this.plotHeight = s.cellPlotProps.height * s.cellPlotProps.verRatio;\n    if (!s.props) {\n      return;\n    }\n    if (s.props.training.values + s.props.training.predictions === 0) {\n      this.stepWidth = 2;\n    } else {\n      this.total = s.props.training.values + s.props.training.predictions;\n      this.stepWidth = this.plotWidth / this.total;\n    }\n    this.heading = new Heading(this.s, this.s.cellPlotProps.left + 20,\n        this.s.height * this.s.typography.titleOffsetRatio / 2, 'cellPlot');\n    this.textPlot = new TextPlot();\n    this.functionPlot = new FunctionPlot();\n  }\n\n  /**\n   * Draw a plot with its specified data\n   */\n  draw() {\n    const s = this.s;\n    if (this.s.props.training.inputType === 'Text Data') {\n      this.textPlot.drawTextPlot.call(this, s);\n      plotBackpropExplanation('text', s, this.plotHeight/2);\n    } else {\n      this.functionPlot.drawFunctionPlot.call(this, s);\n      plotBackpropExplanation('function', s, this.plotHeight/2);\n    }\n    this.heading.draw(s.global.strings.headings[4].title);\n  }\n\n  /**\n   * A function that gets called if the user moves the mouse over the canvas\n   * and sends the trigger to all interactable items on the screen\n   *\n   * @param {number} x the x position of the mouse cursor\n   * @param {number} y the y position of the mouse cursor\n   */\n  mouseMoved(x, y) {\n    this.heading.mouseMoved(x, y);\n  }\n\n  /**\n   * This function gets called if the user has clicked on the screen, it\n   * then checks if the user has clicked on an interactable item and if so\n   * activates the according following functions\n   *\n   * @return {boolean} true, if the user has clicked on an item\n   */\n  checkClick() {\n    return this.heading.checkClick();\n  }\n}\n","import {LSTM} from './model/cellview/LSTM';\nimport {Network} from './model/overview/Network';\nimport {NetworkPlot} from './model/overview/NetworkPlot';\nimport {Input} from './model/overview/Input';\nimport {CellPlot} from './model/cellview/CellPlot';\n\nimport {getColors} from '../../constants/colors';\nimport {getCellAnimationValues} from '../../constants/animation';\nimport {getTypographyDefaults} from '../../constants/typography';\n\n/**\n * This function represents the sketch in which the network with user\n * interaction functionality is being drawn\n *\n * @param {object} s the p5.js sketch\n */\nexport default function(s) {\n  // the basic values needed throughout the drawing logic\n  s.props = {};\n  s.network = [];\n  s.lossValues = [];\n  s.constants = {};\n  s.scaleImage = 5;\n  s.detail = false;\n  s.transition = 0;\n  s.transitionSpeed = 7;\n  s.clickedBlock = undefined;\n  s.lstmAnim = true;\n  s.currfps = 0;\n  s.sideRatioLeft = 0.1;\n  s.sideRatioLoss = 0.1;\n  s.sideRatioRight = 0.3;\n  s.detailRatio = 0.5;\n  s.ctrRatio = 0.5;\n  s.globalScale = 1;\n  s.ready = false;\n  s.setupDone = false;\n  s.netAnim = {};\n  s.mx = 0;\n  s.my = 0;\n\n  // the new format of the cell animation values\n  s.cellAnim = getCellAnimationValues();\n  // some typography values\n  s.typography = getTypographyDefaults();\n  // the scheme colors related to the global style of the application\n  s.colors = getColors(s);\n\n  /**\n   * This function is called on the first time the parent component is\n   * initialized. It creates a canvas element that is the basis for all\n   * drawing commands of the sketch and its submodules.\n   */\n  s.setup = function() {\n    const netDiv = document.getElementById('networkDiv');\n    const valDiv = document.getElementById('valueDiv');\n    const appDiv = document.getElementById('appDiv');\n    const barDiv = document.getElementById('barDiv');\n    // Create and initialize the canvas with its draw params\n    s.cnv = s.createCanvas(netDiv.offsetWidth,\n        appDiv.offsetHeight - valDiv.offsetHeight - barDiv.offsetHeight);\n    s.initialize();\n    // Register listeners for this canvas on this class\n    s.cnv.mouseClicked(s.click);\n    s.cnv.mouseMoved(s.move);\n    s.updateMemory();\n  };\n\n  /**\n   * Prepares all necessary sketch-global values and objects used in the\n   * modules to render their components\n   */\n  s.initialize = function() {\n    s.frameRate(60);\n    s.textAlign(s.CENTER, s.BOTTOM);\n    s.textSize(s.typography.fontsize);\n    s.sideWidthLeft = s.sideRatioLeft * s.width;\n    s.sideWidthRight = s.sideRatioRight * s.width;\n    s.inProps = { // Properties for drawing the input to the network\n      left: 0,\n      right: s.sideRatioLeft * s.width,\n      width: s.sideRatioLeft * s.width,\n      midX: s.sideRatioLeft * s.width / 2,\n      midY: s.height/2,\n      height: s.height,\n    };\n    s.netProps = { // Properties for drawing the network\n      left: s.inProps.right,\n      right: s.inProps.right + s.width * s.ctrRatio,\n      midX: s.sideWidthLeft + s.width * s.ctrRatio * 0.5,\n      midY: s.height/2,\n      width: s.width * s.ctrRatio,\n      height: s.height,\n    };\n    s.outProps = { // Properties for drawing the output of the network\n      left: s.netProps.right,\n      right: s.width,\n      midX: s.netProps.right + (s.width - s.netProps.right) / 2,\n      midY: s.height/2,\n      width: s.sideRatioRight * s.width,\n      height: s.height,\n      verRatio: 0.6,\n      horRatio: 0.9,\n    };\n    s.lossProps = { // Properties for drawing the loss of the network\n      left: s.netProps.right,\n      right: s.netProps.right + s.width * s.sideRatioLoss,\n      midX: s.sideWidthLeft + s.width * s.ctrRatio * 0.5,\n      midY: s.height/2,\n      width: s.width * s.sideRatioLoss,\n      height: s.height,\n    };\n    s.detailProps = { // Properties for drawing the detail view\n      left: 0,\n      right: s.width * s.detailRatio,\n      midX: s.detailRatio * s.width / 2,\n      midY: s.height/2,\n      width: s.width * s.detailRatio,\n      height: s.height,\n      verRatio: 0.7,\n      horRatio: 0.55,\n    };\n    s.cellPlotProps = {// Properties for drawing the cell in the detail view\n      left: s.detailProps.right,\n      right: s.width,\n      midX: s.width - s.width * (1 - s.detailRatio) / 2,\n      midY: s.height/2,\n      width: s.width * (1 - s.detailRatio),\n      height: s.height,\n      verRatio: 0.6,\n      horRatio: 0.7,\n    };\n    s.net = new Network(s);\n    s.cell = new LSTM(s);\n    s.input = new Input(s);\n    s.cellPlot = new CellPlot(s);\n    s.outputPlot = new NetworkPlot(s);\n    s.pause = 0;\n    s.netFrame = 0;\n    s.netAnim = false;\n    s.netPredFrames = 100;\n    s.netLossFrames = 50;\n    s.netTrainFrames = 100;\n    s.MAX_NET_FRAMES = s.netPredFrames + s.netLossFrames + s.netTrainFrames;\n    s.plotFrame = 0;\n    s.plotAnim = false;\n    s.plotMoveFrames = 100;\n    s.plotScanFrames = 50;\n    s.plotStayFrames = 110;\n    s.netPause = s.plotMoveFrames / (s.props.network.layers + 2);\n    s.MAX_PLOT_FRAMES = s.plotMoveFrames + s.plotScanFrames + s.plotStayFrames;\n    s.imageMode(s.CENTER);\n    s.rectMode(s.CENTER);\n    s.setupDone = true;\n  };\n\n  /**\n   * This function is called once per frame. It handles the calling and\n   * organisation of all drawing commands and submodules.\n   */\n  s.draw = function() {\n    // Reset the canvas\n    s.background(s.colors.white);\n    s.cursor(s.ARROW);\n    s.fill(0);\n    // Check if the networksketch was correctly initialized\n    if (!s.props) {\n      return;\n    }\n    // Calculating a pause value to control the speed of the animations\n    s.pause = Math.round(10.0 / s.props.ui.detailSpeed);\n    // Check if the application is in detail view and should animate\n    if (s.detail && s.props.ui.anim) {\n      // Forward the activation of the cell\n      s.cell.update(false);\n    }\n    // Draw the individual components of the network sketch\n    s.drawPlots();\n    s.drawInput();\n    s.drawNetwork();\n    s.drawCell();\n    s.drawCellPlot();\n  };\n\n  /**\n   * This methd is called before the drawing starts and loads some important\n   * images used in the sketch\n   */\n  s.preload = function() {\n    s.receive = s.loadImage('./data/rec_black.png');\n    s.add = s.loadImage('./data/input_black.png');\n    s.save = s.loadImage('./data/rec_black.png');\n    s.forget = s.loadImage('./data/del_black.png');\n    s.cellImage = s.loadImage('./data/save_black.png');\n    s.output = s.loadImage('./data/output_black.png');\n  };\n\n  /**\n   * This function is called by the parent component when a change occurs in\n   * the global redux state. All necessary values are updated or reset\n   * according to the changes in the overall appication context\n   *\n   * @param {bool} start true, if the network animation should start\n   */\n  s.updateMemory = function(start) {\n    // Check if the network is ready to be animated and interactive\n    s.ready = (s.props !== undefined && s.setupDone);\n    if (!s.ready) {\n      return;\n    }\n    // Currently not in training mode\n    if (!s.props.training.running) {\n      // Add all the network layers\n      s.network = [];\n      s.network.push({size: 1, type: 'input'});\n      for (let i = 0; i < s.props.network.layers; i++) {\n        s.network.push({size: s.props.network.layerSize, type: 'hidden'});\n      }\n      s.network.push({size: 1, type: 'output'});\n      // If an animation step should be done, forward the animation\n      if (s.props.ui.animStep) {\n        s.props = {...s.props, ui: {...s.props.ui, animStep: false}};\n        s.cell.update(true);\n      }\n      // One training step should be done, animation needs to be set back\n      if (s.props.training.step) {\n        s.cellAnim = {\n          maxSteps: 11,\n          maxErrorSteps: 20,\n          maxBackSteps: 62,\n          frame: 0,\n          step: 0,\n          inputStep: 0,\n          predictionStep: 0,\n          errorStep: 0,\n          backStep: 0,\n          forward: true,\n          error: false,\n          back: false,\n        };\n      }\n      // If the network is currently within an animation, do not reset it\n      if (!s.netAnim) {\n        s.net = new Network(s);\n      }\n    // If training, detail view is not on and the cell in detail should reset\n    } else {\n      s.detail = false;\n      s.cell.reset();\n    }\n    // Detail of props can override p5 detail variable\n    if (s.props.ui.detail !== s.detail) {\n      s.detail = s.props.ui.detail;\n    }\n    // Start the animation of the cell for a training step\n    if (start) {\n      // prepare all values for the upcoming animation\n      s.plotFrame = 0;\n      s.plotAnim = true;\n      s.netFrame = 0;\n      s.netAnim = true;\n      s.lossValues = [];\n      // Get the prediction and ground truth for this training step\n      const pred = s.props.ui.data[2].prediction;\n      const out = s.props.ui.data[2].chartOutput;\n      // If a prediction exists, calculate the loss\n      if (pred) {\n        for (let i = 0; i < pred.length; i++) {\n          s.lossValues.push(pred[i] - out[i]);\n        }\n      }\n      // Start the network animation and update the ui accordingly\n      s.net.start();\n      s.props.actions.updateUI({...s.props.ui, netAnim: true});\n    }\n    // Set the language for the UI\n    s.global = s.constants[s.props.appState.language];\n    // Check where in the training loop we are (forw., loss., backw.)\n    for (let i = 0; i < s.props.ui.trigger.length; i++) {\n      if (s.props.ui.trigger[i]) {\n        // Forward, reset the cell to prepare the forward animation\n        if (i === 0) {\n          s.cellAnim.forward = true;\n          s.cell.reset();\n        // Loss, prepare the error calculation\n        } else if (i === 1) {\n          s.cellAnim.error = true;\n          s.cell.prepareError();\n        // Backward, prepare the backprop animation\n        } else {\n          s.cellAnim.back = true;\n          s.cell.prepareBackprop();\n        }\n        // Update the UI to match the training loop progress\n        s.props.actions.updateUI(\n            {...s.props.ui,\n              state: [s.cellAnim.forward, s.cellAnim.error, s.cellAnim.back],\n              trigger: [false, false, false],\n            }\n        );\n        break;\n      }\n    }\n    // If one of the Cell explanations are to be shown, check for mouse moves\n    if (!s.props.appState.cellDialog.includes(true)) {\n      s.move();\n    }\n  };\n\n  /**\n   * Resets the animation values to their ground state to prepare an upcoming\n   * animation process or to stop the animation\n   */\n  s.reset = function() {\n    s.plotFrame = 0;\n    s.plotAnim = false;\n    s.netFrame = 0;\n    s.netAnim = false;\n    s.lossValues = [];\n    s.cellAnim = {\n      maxSteps: 11,\n      maxErrorSteps: 20,\n      maxBackSteps: 62,\n      step: 0,\n      frame: 0,\n      inputStep: 0,\n      predictionStep: 0,\n      errorStep: 0,\n      backStep: 0,\n      forward: true,\n      error: false,\n      back: false,\n    };\n    s.initialize();\n  };\n\n  /**\n   * This function handles the resetting of all dependent values when the\n   * context window is resized\n   */\n  s.windowResized = function() {\n    const netDiv = document.getElementById('networkDiv');\n    const valDiv = document.getElementById('valueDiv');\n    s.resizeCanvas(netDiv.offsetWidth,\n        window.innerHeight - valDiv.offsetHeight - 50);\n    if (!s.props.ui.ready) {\n      s.props.actions.updateTraining({...s.props.training, step: true});\n    }\n    s.initialize();\n  };\n\n  /**\n   * Handles the drawing of the input component of the netview\n   */\n  s.drawInput = function() {\n    s.noStroke();\n    s.fill(s.colors.white);\n    s.rect(s.inLeft + s.sideWidthLeft / 2, s.height / 2, s.sideWidthLeft,\n        s.height);\n    s.input.draw();\n  };\n\n  /**\n   * Handles the drawing of the error plot in the netview\n   */\n  s.drawLoss = function() {\n    s.noStroke();\n    s.loss.draw();\n  };\n\n  /**\n   * Handles the drawing of the output plot(s) in the netview. Since the plot\n   * is visualised with a moving in and out animation multiple plots have\n   * to be stored and drawn\n   */\n  s.drawPlots = function() {\n    s.push();\n    const cb = {x: s.outProps.midX, y: s.outProps.midY};\n    s.netScale = (100 + s.transition) / 100;\n    const cx = cb.x + (cb.x - s.cellPlotProps.midX) * (s.transition / 100);\n    const cy = cb.y + (cb.y - s.cellPlotProps.midY) * (s.transition / 100);\n    s.translate(cx, cy);\n    s.scale(s.netScale);\n    s.translate(-cx, -cy);\n    s.noStroke();\n    s.fill(s.colors.white);\n    s.rect(s.outLeft + s.sideWidthRight / 2, s.height / 2, s.sideWidthRight,\n        s.height);\n    s.outputPlot.draw();\n    if (s.plotAnim && s.props.training.running) {\n      s.plotFrame++;\n      if (s.plotFrame > s.MAX_PLOT_FRAMES) {\n        s.plotAnim = false;\n        s.plotFrame = 0;\n        s.props.actions.updateUI({...s.props.ui, running: false, ready: true});\n      }\n    }\n    s.pop();\n  };\n\n  /**\n   * Handles the drawing of the cell in the detail view while also updating the\n   * scaling of the drawing canvas to form the zoom animations\n   */\n  s.drawCell = function() {\n    s.colors.white.setAlpha(s.cellAlpha);\n    s.fill(s.colors.white);\n    s.noStroke();\n    s.rect(s.width/2, s.height/2, s.width, s.height);\n    // Transition in and out of detail view\n    if (s.detail) {\n      if (s.transition < 100) {\n        s.transition += s.transitionSpeed;\n      }\n    } else {\n      if (s.transition > 0) {\n        s.transition -= s.transitionSpeed;\n      }\n    }\n    s.push();\n    // Get the layer on which the zoom is to be done\n    let cb = s.clickedBlock;\n    if (!cb) {\n      cb = s.net.layers[1];\n    }\n    // Get the current zoom state and zoom on the layer\n    if (cb) {\n      const cx = cb.x + (cb.x - s.detailProps.midX) * (s.transition / 100);\n      const cy = cb.y + (cb.y - s.detailProps.midY) * (s.transition / 100);\n      s.translate(cx, cy);\n    }\n    // Scale the view according to the state of the transition\n    s.scale(s.transition >= 100 ? 1 : s.transition / 100);\n    if (cb) {\n      const cx = cb.x + (cb.x - s.detailProps.midX) * (s.transition / 100);\n      const cy = cb.y + (cb.y - s.detailProps.midY) * (s.transition / 100);\n      s.translate(-cx, -cy);\n    }\n    // Fade in the cell during the transition\n    s.cellAlpha = 255 * s.transition / 100;\n    s.cell.draw();\n    s.pop();\n    s.colors.white.setAlpha(255);\n  };\n\n  /**\n   * Handles the drawing of the output plot in the detail view\n   */\n  s.drawCellPlot = function() {\n    s.push();\n    const cb = {x: s.outProps.midX, y: s.outProps.midY};\n    const cx = cb.x + (cb.x - s.cellPlotProps.midX) * (s.transition / 100);\n    const cy = cb.y + (cb.y - s.cellPlotProps.midY) * (s.transition / 100);\n    s.translate(cx, cy);\n    s.scale(s.transition >= 100 ? 1 : s.transition / 100);\n    s.translate(-cx, -cy);\n    s.cellPlot.draw();\n    s.pop();\n  };\n\n  /**\n   * Handles the drawing of the rnn overview in the net view\n   */\n  s.drawNetwork = function() {\n    s.push();\n    // Get the block if to be zoomed on one of those\n    const cb = s.clickedBlock;\n    s.netScale = (100 + s.transition) / 100;\n    // handle correct scaling on zoom transition animation\n    if (cb) {\n      const cx = cb.x + (cb.x - s.detailProps.midX) * (s.transition / 100);\n      const cy = cb.y + (cb.y - s.detailProps.midY) * (s.transition / 100);\n      s.translate(cx, cy);\n    }\n    s.scale(s.netScale);\n    if (cb) {\n      const cx = cb.x + (cb.x - s.detailProps.midX) * (s.transition / 100);\n      const cy = cb.y + (cb.y - s.detailProps.midY) * (s.transition / 100);\n      s.translate(-cx, -cy);\n    }\n    // Training is running, advance the animation\n    let sendTrainStep = 0;\n    if (s.netAnim && s.props.training.running) {\n      s.netFrame++;\n      // If the animation has been finished, reset the network visualization\n      if (s.netFrame > s.MAX_NET_FRAMES) {\n        s.netAnim = false;\n        s.netFrame = 0;\n      }\n    }\n    // If we are still in the forward pass\n    if (s.netFrame < s.netPredFrames) {\n      sendTrainStep = 1;\n    // Already in the loss calculation\n    } else if (s.netFrame < s.netLossFrames + s.netPredFrames) {\n      sendTrainStep = 2;\n    // In backprop\n    } else {\n      sendTrainStep = 3;\n    }\n    // Update the UI if it does not match the animation progress\n    if (s.props.training.running &&\n        (sendTrainStep !== s.props.ui.trainingStep ||\n        s.netAnim !== s.props.ui.netAnim)) {\n      s.props.actions.updateUI(\n          {...s.props.ui, trainingStep: sendTrainStep, netAnim: s.netAnim}\n      );\n    }\n    s.net.draw();\n    s.pop();\n  };\n\n  /**\n   * Handles move events occuring when canvas is in focus\n   */\n  s.move = function() {\n    // Only handle move events if p5 is ready\n    if (s.ready) {\n      // If we are in the help UI, ignore the mousemove events\n      if (!s.props.ui.help) {\n        s.mx = s.mouseX;\n        s.my = s.mouseY;\n        // Forward the mousemove events to the correct network view\n        if (s.detail) {\n          s.cell.mouseMoved(s.mx, s.my);\n          s.cellPlot.mouseMoved(s.mx, s.my);\n        } else {\n          s.net.mouseMoved(s.mx, s.my);\n          if (s.input) {\n            s.input.mouseMoved(s.mx, s.my);\n          }\n          s.outputPlot.mouseMoved(s.mx, s.my);\n        }\n      }\n    }\n  };\n\n  /**\n   * Handles click events when canvas is in focus\n   */\n  s.click = function() {\n    // Only handle move events if p5 is ready\n    if (s.ready) {\n      // If we are in the help UI, ignore the mouseclick events\n      if (!s.props.ui.help) {\n        // If the mouse is not inside the canvas, return\n        if (s.mx < 0 || s.my < 0 ||\n            s.mx > s.width || s.my > s.height) {\n          return;\n        }\n        // Forward the click to the correct network view\n        if (s.detail) {\n          s.detail = s.cell.checkClick();\n          s.detail = s.cellPlot.checkClick() || s.detail;\n          if (!s.detail) {\n            s.props.actions.updateUI({...s.props.ui, detail: false});\n            s.props.actions.updateTraining({...s.props.training,\n              running: s.props.ui.anim});\n          }\n        } else {\n          s.net.checkClick();\n          s.input.checkClick();\n          s.net.mouseMoved(s.mx, s.my);\n          s.outputPlot.checkClick();\n        }\n      }\n    }\n  };\n}\n","/**\n * Returns the default animation settings for a cell.\n *\n * @return {object} the animation configuration for a network cell\n */\nexport function getCellAnimationValues() {\n  return {\n    maxSteps: 11,\n    maxErrorSteps: 20,\n    maxBackSteps: 62,\n    step: 0,\n    frame: 0,\n    inputStep: 0,\n    predictionStep: 0,\n    errorStep: 0,\n    backStep: 0,\n    forward: true,\n    error: false,\n    back: false,\n  };\n}\n","/**\n * Returns the typography configuration defaults for p5.\n *\n * @return {object} the typography configuration for p5\n */\nexport function getTypographyDefaults() {\n  return {\n    fontsize: 16,\n    fontsizelarge: 20,\n    fontsizesmall: 12,\n    tooltipoffset: 60,\n    titleOffsetRatio: 0.1,\n  };\n}\n","import createMuiTheme from '../../theme/globalTheme';\n\n/**\n * The colors used by p5 sketches.\n *\n * @param {object} s the p5.js sketch\n * @return {object} the color palette for p5 sketches\n */\nexport function getColors(s) {\n  return {\n    white: s.color(255),\n    grey: s.color(createMuiTheme.palette.secondary.main),\n    lightgrey: s.color(createMuiTheme.palette.secondary.light),\n    darkgrey: s.color(createMuiTheme.palette.secondary.dark),\n    black: s.color(0),\n    bluegrey: s.color(createMuiTheme.palette.primary.main),\n    lightbluegrey: s.color(createMuiTheme.palette.primary.light),\n    darkbluegrey: s.color(createMuiTheme.palette.primary.dark),\n    red: s.color(255, 50, 50),\n    overview: s.color(createMuiTheme.palette.overview.main),\n    overviewlight: s.color(createMuiTheme.palette.overview.light),\n    overviewdark: s.color(createMuiTheme.palette.overview.dark),\n    detail: s.color(createMuiTheme.palette.detail.main),\n    detaillight: s.color(createMuiTheme.palette.detail.light),\n    detaildark: s.color(createMuiTheme.palette.detail.dark),\n  };\n}\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport PropTypes from 'prop-types';\n\nimport {Grid} from '@material-ui/core';\nimport {withStyles} from '@material-ui/core/styles';\n\nimport styles from '../../styles/themedStyles';\nimport * as actions from '../../actions';\nimport CellDialogs from './dialogs/CellDialogs';\nimport HeadingDialogs from './dialogs/HeadingDialogs';\nimport networkSketch from './sketches/NetworkSketch';\nimport globalConstants from '../constants/global';\n\n/**\n * This class handles the initialization and updating of the drawing\n * canvas(-es), that implement the animation and interaction with the\n * network itself\n */\nclass VisualWrapper extends React.Component {\n  /**\n   * The constructor function for the P5Wrapper, creates the necessary\n   * sketches and sets the initial properties\n   */\n  constructor() {\n    super();\n    // eslint-disable-next-line new-cap\n    this.networkSketch = new window.p5(networkSketch, 'networkDiv');\n  }\n\n  /**\n   *  As soon as the component is mounted the sketches can be initialized\n   */\n  componentDidMount() {\n    this.networkSketch.props = this.props;\n    this.networkSketch.constants = globalConstants;\n    this.networkSketch.updateMemory(false);\n  }\n\n  /**\n   * This method is called if the global properties have changed, it\n   * then sends the new properties to the related canvas sketches\n   *\n   * @param {object} prevProps the previous state before the update\n   */\n  componentDidUpdate(prevProps) {\n    this.networkSketch.props = this.props;\n    this.networkSketch.updateMemory(\n        (prevProps.ui.running !== this.props.ui.running) &&\n        this.props.ui.running);\n    if (this.props.ui.reset) {\n      this.networkSketch.reset();\n      this.props.actions.updateUI({...this.props.ui, reset: false});\n    }\n  }\n\n  /**\n   * This function will remove all active sketches if the component\n   * is about to be unmounted\n   */\n  componentWillUnmount() {\n    this.networkSketch.remove();\n  }\n\n  /**\n   * Creates a placeholder div component for the canvas to be put in\n   *\n   * @return {object} the rendered div for the sketch canvas\n   */\n  render() {\n    return (\n      <Grid container direction=\"row\" justify='space-between'>\n        <Grid item xs={12}>\n          <div id=\"networkDiv\" style={{fontSize: '0'}}/>\n        </Grid>\n        <CellDialogs/>\n        <HeadingDialogs/>\n      </Grid>\n    );\n  }\n}\n\nVisualWrapper.propTypes = {\n  network: PropTypes.object.isRequired,\n  training: PropTypes.object.isRequired,\n  ui: PropTypes.object.isRequired,\n  appState: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n  textData: PropTypes.object.isRequired,\n  cookiesState: PropTypes.object.isRequired,\n};\n\n/**\n * Map the states from redux to this property.\n *\n * @param {object} state - the global redux state.\n * @param {object} ownProps - the properties of this component.\n * @return {object} - the new props of this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    network: state.network,\n    training: state.training,\n    ui: state.ui,\n    appState: state.appState,\n    textData: state.textData,\n    cookiesState: state.cookiesState,\n  };\n}\n\n/**\n * Maps the actions to this property.\n *\n * @param {function} dispatch - the function that is used to call an action.\n * @return {object} - the actions that can be used in this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    withStyles(styles)(VisualWrapper)\n);\n","import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport PropTypes from 'prop-types';\n\nimport {withStyles} from '@material-ui/core/styles';\nimport {Grid, Typography, Link} from '@material-ui/core';\n\nimport * as actions from '../../../actions';\nimport styles from '../../../styles/themedStyles';\nimport globalConstants from '../../constants/global';\nimport ComplexDialog from '../../dialogs/ComplexDialog';\n\n/**\n * Training Process information panel at bottom of the Application\n */\nclass ProcessPanel extends React.Component {\n  /**\n   * Is called when the user interacts with one of the process step titles,\n   * opens the corresponding dialog\n   *\n   * @param {number} id the id of the training step\n   */\n  onClick(id) {\n    const dialogs = this.props.appState.inputDialog;\n    dialogs[id] = !dialogs[id];\n    this.props.actions.updateAppState({\n      ...this.props.appState,\n      inputDialog: dialogs,\n    });\n  }\n\n  /**\n   * Handles the closing of the dialogs for this element, updates the\n   * global state accordingly\n   */\n  handleClose = () => {\n    const dialogs = [false, false, false];\n    this.props.actions.updateAppState({\n      ...this.props.appState,\n      inputDialog: dialogs,\n    });\n  }\n\n  /**\n   * Maps the calling components id with the current appState to a style class\n   *\n   * @param {number} id the id of the components training step\n   * @return {object} the style for the given id\n   */\n  getClass(id) {\n    if (!this.props.ui.detail) {\n      if (!this.props.ui.ready &&\n          this.props.ui.trainingStep === (id + 1) ) {\n        return this.props.classes.typoOv;\n      } else {\n        return this.props.classes.typoOvOff;\n      }\n    } else {\n      if (this.props.ui.state[id]) {\n        return this.props.classes.typoCv;\n      } else {\n        return this.props.classes.typoCvOff;\n      }\n    }\n  }\n\n  /**\n   * React render function controlling the look of the\n   * process information element of the Application\n   *\n   * @return {object} the react components rendered form\n   */\n  render() {\n    const global = globalConstants[this.props.appState.language];\n    return (\n      <Grid item xs id='inppan'\n        className={this.props.classes.smallPanelWrapper}>\n        <Grid container style={{height: '100%'}} direcion='column'\n          justify='space-between' alignItems=\"center\">\n          {\n            global.strings.trainSteps.map((step) => (\n              <Grid item key={step.id}\n                className={this.props.classes.fullWidth}>\n                <Grid item>\n                  <Typography align='left'>\n                    <Link className = {this.getClass(step.id)}\n                      href=\"#\" onClick={(event) => this.onClick(step.id)}\n                    >\n                      {step.title}\n                    </Link>\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"body1\"\n                    className={this.props.classes.typoStd}\n                    align='left'\n                  >\n                    {step.description}\n                  </Typography>\n                </Grid>\n                <ComplexDialog closeFunction={this.handleClose}\n                  open={this.props.appState.inputDialog[step.id]}\n                  title={step.title} description={step.longDescription} />\n              </Grid>\n            ))\n          }\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\n// Controls state of the Application\nProcessPanel.propTypes = {\n  training: PropTypes.object.isRequired,\n  network: PropTypes.object.isRequired,\n  ui: PropTypes.object.isRequired,\n  appState: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n};\n\n/**\n * Map the states from redux to this property.\n *\n * @param {object} state - the global redux state.\n * @return {object} - the new props of this component.\n */\nfunction mapStateToProps(state) {\n  return {\n    training: state.training,\n    network: state.network,\n    ui: state.ui,\n    appState: state.appState,\n  };\n}\n\n/**\n * Maps the actions to this property.\n *\n * @param {function} dispatch - the function that is used to call an action.\n * @return {object} - the actions that can be used in this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    withStyles(styles)(ProcessPanel)\n);\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {withStyles} from '@material-ui/core/styles';\nimport {IconButton} from '@material-ui/core/';\n\nimport styles from '../../../styles/themedStyles';\n\n/**\n * Generating function for the individual styled buttons\n *\n * @param {object} props the parent properties\n * @return {object} rendered styled button\n */\nfunction StyledButtonRaw(props) {\n  const {classes, properties, icon, action, disabled} = props;\n  return (\n    <IconButton disabled={disabled} variant=\"outlined\"\n      className={\n        properties.ui.detail ? classes.button_cell : classes.button_net\n      }\n      onClick={action}>\n      {icon}\n    </IconButton>\n  );\n}\n\nStyledButtonRaw.propTypes = {\n  properties: PropTypes.object.isRequired,\n  icon: PropTypes.object.isRequired,\n  action: PropTypes.func.isRequired,\n  disabled: PropTypes.bool.isRequired,\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(StyledButtonRaw);\n","import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport PropTypes from 'prop-types';\n\nimport {Grid, Typography, Link, IconButton} from '@material-ui/core';\nimport Start from '@material-ui/icons/PlayArrow';\nimport Pause from '@material-ui/icons/Pause';\nimport Reset from '@material-ui/icons/Replay';\nimport Plus from '@material-ui/icons/Add';\nimport Minus from '@material-ui/icons/Remove';\nimport SkipNext from '@material-ui/icons/SkipNext';\nimport {withStyles} from '@material-ui/core/styles';\n\nimport styles from '../../../styles/themedStyles';\nimport * as actions from '../../../actions';\nimport globalConstants from '../../constants/global';\nimport StyledButton from '../comps/StyledButton';\nimport ComplexDialog from '../../dialogs/ComplexDialog';\nimport {getNextIntroState} from '../../../helpers/OnboardingState';\n\n/**\n * Controls at bottom of the application, allows user to control\n * the training process\n */\nclass ControlPanel extends React.Component {\n  /**\n   * Toggles wether the training of the network is currently\n   * on or off\n   */\n  toggleTraining = () => {\n    if (this.props.ui.detail) {\n      this.props.actions.updateUI({...this.props.ui,\n        anim: !this.props.ui.anim});\n    } else {\n      this.props.actions.toggleTraining(this.props.training);\n      if (this.props.cookiesState.intro === 'startTraining') {\n        getNextIntroState(this.props.cookiesState.intro,\n            this.props.cookiesState, this.props.actions.updateCookiesState);\n      }\n    }\n  }\n\n  /**\n   * Handles the interaction with the reset button, lets the network\n   * know that it needs to be reset\n   */\n  resetButtonPressed = () => {\n    this.props.actions.updateTraining({...this.props.training, reset: true});\n  }\n\n  /**\n   * This function makes the training run for only one training step\n   */\n  nextStep = () => {\n    if (this.props.ui.detail) {\n      this.props.actions.updateUI({...this.props.ui, animStep: true});\n    } else {\n      this.props.actions.updateTraining({...this.props.training, step: true});\n    }\n  }\n\n  /**\n   * Handles speedup of the cell animation.\n   */\n  plusButtonPressed = () => {\n    const newSpeed = this.props.ui.detailSpeed * 2;\n    this.props.actions.updateUI({...this.props.ui, detailSpeed: newSpeed});\n  }\n\n  /**\n   * Handles slowdown of the cell animation.\n   */\n  minusButtonPressed = () => {\n    const newSpeed = this.props.ui.detailSpeed / 2;\n    this.props.actions.updateUI({...this.props.ui, detailSpeed: newSpeed});\n  }\n\n  /**\n   * Gets called if the user interacts with the epoch title and opens the\n   * corresponding dialog\n   */\n  onClick() {\n    let dialog = this.props.appState.epochDialog;\n    dialog = !dialog;\n    this.props.actions.updateAppState({\n      ...this.props.appState,\n      epochDialog: dialog,\n    });\n  }\n\n  /**\n   * Handles the closing of the epoch dialog\n   */\n  handleClose = () => {\n    this.props.actions.updateAppState({\n      ...this.props.appState,\n      epochDialog: false,\n    });\n  }\n\n  /**\n   * React render function controlling the look of the\n   * control element of the Application\n   *\n   * @return {object} the react components rendered form\n   */\n  render() {\n    const {classes} = this.props;\n    const global = globalConstants[this.props.appState.language];\n    return (\n      <Grid className={this.props.classes.panelWrapper} item xs={2}>\n        <Grid container style={{height: '100%'}} justify='center'\n          alignItems='center'>\n          <Grid container justify='center'>\n            <Grid container item justify='center' alignItems='center'>\n              <Grid item>\n                <StyledButton disabled={this.props.ui.detail ||\n                      !this.props.training.workerReady}\n                properties={this.props}\n                action={this.resetButtonPressed}\n                icon={\n                  <Reset fontSize=\"small\" style={{color: 'white'}} />\n                } />\n              </Grid>\n              <Grid item>\n                <StyledButton properties={this.props}\n                  disabled = {!this.props.training.workerReady &&\n                      !this.props.ui.netAnim}\n                  action={this.toggleTraining}\n                  icon={(this.props.ui.detail && this.props.ui.anim) ||\n                      (!this.props.ui.detail && this.props.training.running) ?\n                      <Pause fontSize=\"large\" style={{color: 'white'}} /> :\n                      <Start fontSize=\"large\" style={{color: 'white'}} />\n                  }>\n                </StyledButton>\n              </Grid>\n              <Grid item>\n                <StyledButton properties={this.props}\n                  disabled={(this.props.ui.detail && this.props.ui.anim) ||\n                    (!this.props.ui.detail && this.props.training.running) ||\n                    !this.props.training.workerReady}\n                  action={this.nextStep}\n                  icon={\n                    <SkipNext fontSize=\"small\" style={{color: 'white'}}/>\n                  } />\n              </Grid>\n            </Grid>\n            { this.props.ui.detail ?\n              <Grid container item justify='center' alignItems='center'>\n                <Grid item>\n                  <IconButton\n                    size=\"small\"\n                    variant=\"outlined\"\n                    disabled={this.props.ui.detailSpeed < 1}\n                    style={null}\n                    className={this.props.classes.button_cell}\n                    onClick={() => this.minusButtonPressed()}>\n                    <Minus fontSize='small' style={{color: 'white'}}/>\n                  </IconButton>\n                </Grid>\n                <Grid item>\n                  <Typography className={this.props.classes.typoStd}>\n                    {this.props.ui.detailSpeed + 'x'}\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <IconButton\n                    size=\"small\"\n                    variant=\"outlined\"\n                    disabled={this.props.ui.detailSpeed > 4}\n                    style={null}\n                    className={this.props.classes.button_cell}\n                    onClick={() => this.plusButtonPressed()}>\n                    <Plus fontSize='small' style={{color: 'white'}}/>\n                  </IconButton>\n                </Grid>\n              </Grid> : null\n            }\n            <Grid container item xs={12} alignItems='center' direction='column'>\n              <Grid item>\n                <Typography>\n                  <Link href={'#'} className =\n                    {this.props.ui.detail ?\n                        classes.typoCvBig : classes.typoOvBig}\n                  onClick={() => this.onClick()}>\n                    {global.strings.epoch.title}\n                  </Link>\n                </Typography>\n                <ComplexDialog closeFunction={this.handleClose}\n                  open={this.props.appState.epochDialog}\n                  title={global.strings.epoch.title}\n                  description={global.strings.epoch.description}/>\n              </Grid>\n              <Grid item>\n                <Typography className={this.props.classes.typoStdBig}>\n                  {this.props.network.iteration}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\n// Controls state of the Application\nControlPanel.propTypes = {\n  training: PropTypes.object.isRequired,\n  network: PropTypes.object.isRequired,\n  ui: PropTypes.object.isRequired,\n  appState: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n  cookiesState: PropTypes.object.isRequired,\n};\n\n/**\n * Map the states from redux to this property.\n *\n * @param {object} state - the global redux state.\n * @return {object} - the new props of this component.\n */\nfunction mapStateToProps(state) {\n  return {\n    training: state.training,\n    network: state.network,\n    ui: state.ui,\n    appState: state.appState,\n    cookiesState: state.cookiesState,\n  };\n}\n\n/**\n * Maps the actions to this property.\n *\n * @param {function} dispatch - the function that is used to call an action.\n * @return {object} - the actions that can be used in this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    withStyles(styles)(ControlPanel)\n);\n","import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport PropTypes from 'prop-types';\n\nimport {Grid, Typography, Slider, Tooltip, Link} from '@material-ui/core';\nimport {withStyles} from '@material-ui/core/styles';\n\nimport * as actions from '../../../actions';\nimport styles from '../../../styles/themedStyles';\nimport globalConstants from '../../constants/global';\nimport ComplexDialog from '../../dialogs/ComplexDialog';\n\n/**\n * Slider input panel for the training parameters at bottom of the Application\n */\nclass SliderPanel extends React.Component {\n  /**\n   * Handles the interaction with the sliders\n   *\n   * @param {number} sliderId the id of the changed slider\n   * @param {number} value the new value of the learning rate\n   */\n  handleSliderChange = (sliderId, value) => {\n    const global = globalConstants[this.props.appState.language];\n    switch (sliderId) {\n      case global.sliders[0].key:\n        this.props.actions.updateNetwork({\n          ...this.props.network,\n          learningRate: (Math.pow(10, value) / 10),\n        });\n        break;\n      case global.sliders[1].key:\n        this.props.actions.updateTraining({\n          ...this.props.training,\n          batchSize: value,\n        });\n        break;\n      case global.sliders[2].key:\n        this.props.actions.updateTraining({\n          ...this.props.training,\n          noise: value,\n        });\n        break;\n      default:\n    }\n  }\n\n  /**\n   * Is called when the user clicks on the name of a parameter in this panel,\n   * opens a corresponding dialog\n   *\n   * @param {number} id the id of the training parameter\n   */\n  onClick(id) {\n    const dialog = this.props.appState.sliderDialog;\n    dialog[id] = !dialog[id];\n    this.props.actions.updateAppState({\n      ...this.props.appState,\n      sliderDialog: dialog,\n    });\n  }\n\n  /**\n   * Handles the closing of the dialogs for this element, updates the\n   * global state accordingly\n   */\n  handleClose = () => {\n    this.props.actions.updateAppState({\n      ...this.props.appState,\n      sliderDialog: [false, false, false],\n    });\n  }\n\n  /**\n   * Formats the value x to be of only necessary length\n   *\n   * @param {number} x the slider value\n   * @return {string} a truncated version of x\n   */\n  getFormattedValue(x) {\n    const actual = Math.pow(10, x) / 10;\n    const log = Math.floor(x);\n    const sol = actual.toFixed(Math.abs(log - 2));\n    return sol;\n  }\n\n  /**\n   * React render function controlling the look of the\n   * slider panel of the Application\n   *\n   * @return {object} the react components rendered form\n   */\n  render() {\n    const global = globalConstants[this.props.appState.language];\n    // Check the sliders, we cant add noise to text\n    const sliders = [];\n    for (const slider of global.sliders) {\n      if (slider.title !== global.sliders[2].title ||\n        this.props.training.inputType !== 'Text Data') {\n        sliders.push(slider);\n      }\n    }\n    return (\n      <Grid item xs className={this.props.classes.smallPanelWrapper}>\n        <Grid container style={{height: '100%'}} direcion='column'\n          justify='space-between' alignItems=\"center\">\n          {\n            sliders.map((slider) => (\n              <Grid item key={slider.key}\n                className={this.props.classes.fullWidth}>\n                <Typography align='left'>\n                  <Link href={'#'} onClick={() => this.onClick(slider.key)}\n                    className={this.props.ui.detail ?\n                      this.props.classes.typoCv :\n                        !this.props.training.running ?\n                             this.props.classes.typoOv :\n                             this.props.classes.typoOvOff\n                    }>\n                    {slider.title}\n                  </Link>\n                </Typography>\n                <ComplexDialog closeFunction={this.handleClose}\n                  open={this.props.appState.sliderDialog[slider.key]}\n                  title={slider.title} description={slider.description} />\n                <Slider\n                  className={this.props.classes.defSlider}\n                  marks={slider.marks}\n                  disabled={\n                    this.props.training.running\n                  }\n                  value={\n                        slider.key === 0 ?\n                        Math.log10(this.props.network.learningRate * 10):\n                        (slider.key === 1 ? this.props.training.batchSize :\n                          this.props.training.noise)\n                  }\n                  valueLabelDisplay=\"auto\"\n                  valueLabelFormat={(x) => slider.key === 0 ?\n                        this.getFormattedValue(x) : x}\n                  ValueLabelComponent={ValueLabelComponent}\n                  step={slider.step}\n                  min={slider.min}\n                  max={slider.max}\n                  onChange={\n                    (event, value) =>\n                      this.handleSliderChange(slider.key, value)\n                  }/>\n              </Grid>\n            ))\n          }\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\n/**\n * The Value Label for the sliders\n *\n * @param {object} props the properties of the label\n * @return {object} the rendering for the label\n */\nfunction ValueLabelComponent(props) {\n  const {children, open, value} = props;\n\n  const popperRef = React.useRef(null);\n  React.useEffect(() => {\n    if (popperRef.current) {\n      popperRef.current.update();\n    }\n  });\n\n  return (\n    <LightTooltip\n      PopperProps={{\n        popperRef,\n      }}\n      open={open}\n      enterTouchDelay={0}\n      placement=\"top\"\n      title={value}\n    >\n      {children}\n    </LightTooltip>\n  );\n}\n\nValueLabelComponent.propTypes = {\n  children: PropTypes.element.isRequired,\n  open: PropTypes.bool.isRequired,\n  value: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n  ]),\n};\n\nconst LightTooltip = withStyles((theme) => ({\n  tooltip: {\n    backgroundColor: theme.palette.common.white,\n    color: 'rgba(0, 0, 0, 0.87)',\n    boxShadow: theme.shadows[1],\n    fontSize: 11,\n  },\n}))(Tooltip);\n\n// Controls state of the Application\nSliderPanel.propTypes = {\n  training: PropTypes.object.isRequired,\n  network: PropTypes.object.isRequired,\n  ui: PropTypes.object.isRequired,\n  appState: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n};\n\n/**\n * Map the states from redux to this property.\n *\n * @param {object} state - the global redux state.\n * @return {object} - the new props of this component.\n */\nfunction mapStateToProps(state) {\n  return {\n    training: state.training,\n    network: state.network,\n    ui: state.ui,\n    appState: state.appState,\n  };\n}\n\n/**\n * Maps the actions to this property.\n *\n * @param {function} dispatch - the function that is used to call an action.\n * @return {object} - the actions that can be used in this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    withStyles(styles)(SliderPanel)\n);\n","import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport PropTypes from 'prop-types';\n\nimport {withStyles} from '@material-ui/core/styles';\nimport {Grid, Typography, Link} from '@material-ui/core';\n\nimport * as actions from '../../../actions';\nimport styles from '../../../styles/themedStyles';\nimport ComplexDialog from '../../dialogs/ComplexDialog';\n\n/**\n * Description Elements at bottom of the Application in the cell view\n */\nclass DescriptionElement extends React.Component {\n  /**\n   * Is called when any of the description titles is clicked on, opens the\n   * corresponding dialog\n   *\n   * @param {number} id the id of the clicked element\n   */\n  onClick(id) {\n    const dialogs = this.props.appState.stepDialog;\n    dialogs[id] = !dialogs[id];\n    this.props.actions.updateAppState({\n      ...this.props.appState,\n      stepDialog: dialogs,\n    });\n  }\n\n  /**\n   * Handles the closing of the dialogs for this element, updates the\n   * global state accordingly\n   */\n  handleClose = () => {\n    const dialogs = [false, false, false, false];\n    this.props.actions.updateAppState({\n      ...this.props.appState,\n      stepDialog: dialogs,\n    });\n  }\n\n  /**\n   * React render function controlling the look of the\n   * description element\n   *\n   * @return {object} the react components rendered form\n   */\n  render() {\n    return (\n      <Grid item>\n        <Typography align='left'>\n          <Link className = {this.props.step.id === this.props.ui.lstmStep &&\n              this.props.ui.state[0] ?\n            this.props.classes.typoCvSmall : this.props.classes.typoCvOffSmall}\n          href=\"#\" onClick={(event) => this.onClick(this.props.step.id)}>\n            {(this.props.step.id + 1) + ' ' + this.props.step.title}\n          </Link>\n        </Typography>\n        <ComplexDialog closeFunction={this.handleClose}\n          open={this.props.appState.stepDialog[this.props.step.id]}\n          title={this.props.step.title}\n          description={this.props.step.longDescription} />\n      </Grid>\n    );\n  }\n}\n\n// Controls state of the Application\nDescriptionElement.propTypes = {\n  training: PropTypes.object.isRequired,\n  network: PropTypes.object.isRequired,\n  ui: PropTypes.object.isRequired,\n  appState: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired,\n  step: PropTypes.object.isRequired,\n};\n\n/**\n * Map the states from redux to this property.\n *\n * @param {object} state - the global redux state.\n * @return {object} - the new props of this component.\n */\nfunction mapStateToProps(state) {\n  return {\n    training: state.training,\n    network: state.network,\n    ui: state.ui,\n    appState: state.appState,\n  };\n}\n\n/**\n * Maps the actions to this property.\n *\n * @param {function} dispatch - the function that is used to call an action.\n * @return {object} - the actions that can be used in this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    withStyles(styles)(DescriptionElement)\n);\n","import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport PropTypes from 'prop-types';\n\nimport {withStyles} from '@material-ui/core/styles';\nimport {Grid, Typography, IconButton, Link} from '@material-ui/core';\nimport Jump from '@material-ui/icons/FastForward';\n\nimport * as actions from '../../../actions';\nimport styles from '../../../styles/themedStyles';\nimport globalConstants from '../../constants/global';\nimport DescriptionElement from '../comps/DescriptionElement';\nimport ComplexDialog from '../../dialogs/ComplexDialog';\n\n/**\n * Descriptions at bottom of the Application, only visible in the cell view\n */\nclass DescriptionPanel extends React.Component {\n  /**\n   * Is called when the user interacts with one of the process step titles,\n   * opens the corresponding dialog\n   *\n   * @param {number} id the id of the training step\n   */\n  onClick(id) {\n    const dialogs = this.props.appState.inputDialog;\n    dialogs[id] = !dialogs[id];\n    this.props.actions.updateAppState({\n      ...this.props.appState,\n      inputDialog: dialogs,\n    });\n  }\n\n  /**\n   * Is called when the user clicks on the button beside the title of a training\n   * step, updates the currently running training process\n   *\n   * @param {number} id the id of the training step\n   */\n  onJump(id) {\n    const trigger = [false, false, false];\n    trigger[id] = true;\n    this.props.actions.updateUI({\n      ...this.props.ui,\n      trigger: trigger,\n    });\n  }\n\n  /**\n   * Handles the closing of the dialogs for this element, updates the\n   * global state accordingly\n   */\n  handleClose = () => {\n    const dialogs = [false, false, false];\n    this.props.actions.updateAppState({\n      ...this.props.appState,\n      inputDialog: dialogs,\n    });\n  }\n\n  /**\n   * Maps the calling components id with the current appState to a style class\n   *\n   * @param {number} id the id of the components training step\n   * @return {object} the style for the given id\n   */\n  getClass(id) {\n    if (!this.props.ui.detail) {\n      if (!this.props.ui.ready &&\n          this.props.ui.trainingStep === (id + 1) ) {\n        return this.props.classes.typoOv;\n      } else {\n        return this.props.classes.typoOvOff;\n      }\n    } else {\n      if (this.props.ui.state[id]) {\n        return this.props.classes.typoCv;\n      } else {\n        return this.props.classes.typoCvOff;\n      }\n    }\n  }\n\n  /**\n   * React render function controlling the look of the\n   * description panel of the Application\n   *\n   * @return {object} the react components rendered form\n   */\n  render() {\n    const global = globalConstants[this.props.appState.language];\n    return (\n      <Grid item xs id='inppan'\n        className={this.props.classes.smallPanelWrapper}>\n        <Grid container style={{height: '100%'}} direcion='column'\n          justify='space-between' alignItems=\"center\">\n          {\n            global.strings.trainSteps.map((step) => (\n              <Grid item key={step.id} className={this.props.classes.fullWidth}>\n                <Grid item>\n                  <Typography align='left'>\n                    <Link className = {this.getClass(step.id)}\n                      href=\"#\" onClick={(event) => this.onClick(step.id)}>\n                      {step.title}\n                    </Link>\n                    <IconButton\n                      size=\"small\"\n                      variant=\"outlined\"\n                      disabled ={this.props.ui.state[step.id]}\n                      style={{marginLeft: '12px'}}\n                      className={this.props.classes.button_cell}\n                      onClick={(event) => this.onJump(step.id)}>\n                      <Jump fontSize='small' style={{color: 'white'}}/>\n                    </IconButton>\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"body1\"\n                    className={this.props.classes.typoStd}\n                    align='left'>\n                    {step.description}\n                  </Typography>\n                </Grid>\n                { step.id === 0 ?\n                  <Grid item container spacing={3}\n                    style={{marginTop: '-5px'}}>\n                    {global.strings.lstmSteps.map((elementStep) => (\n                      <DescriptionElement key={elementStep.id}\n                        step={elementStep}/>\n                    ))}\n                  </Grid> : null\n                }\n                <ComplexDialog closeFunction={this.handleClose}\n                  open={this.props.appState.inputDialog[step.id]}\n                  title={step.title} description={step.longDescription}/>\n              </Grid>\n            ))\n          }\n        </Grid>\n      </Grid>\n    );\n  }\n}\n\n// Controls state of the Application\nDescriptionPanel.propTypes = {\n  training: PropTypes.object.isRequired,\n  network: PropTypes.object.isRequired,\n  ui: PropTypes.object.isRequired,\n  appState: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired,\n};\n\n/**\n * Map the states from redux to this property.\n *\n * @param {object} state - the global redux state.\n * @return {object} - the new props of this component.\n */\nfunction mapStateToProps(state) {\n  return {\n    training: state.training,\n    network: state.network,\n    ui: state.ui,\n    appState: state.appState,\n  };\n}\n\n/**\n * Maps the actions to this property.\n *\n * @param {function} dispatch - the function that is used to call an action.\n * @return {object} - the actions that can be used in this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    withStyles(styles)(DescriptionPanel)\n);\n","import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport PropTypes from 'prop-types';\n\nimport {withStyles} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Divider from '@material-ui/core/Divider';\n\nimport * as actions from '../../actions';\nimport styles from '../../styles/themedStyles';\n\nimport ProcessPanel from './panels/ProcessPanel';\nimport ControlPanel from './panels/ControlPanel';\nimport SliderPanel from './panels/SliderPanel';\nimport DescriptionPanel from './panels/DescriptionPanel';\n\n/**\n * The current Component holding all the input elements to change the Network\n * for Training.\n */\nclass BottomPanel extends React.Component {\n  /**\n   * The render function for this react component\n   *\n   * @return {object} the rendered component\n   */\n  render() {\n    return (\n      <Grid container justify='space-evenly' alignItems='center' id='valueDiv'\n        className='noselect'>\n        { this.props.ui.detail ?\n          <DescriptionPanel/> :\n          <ProcessPanel/>\n        }\n        <Divider orientation=\"vertical\" flexItem />\n        <ControlPanel/>\n        <Divider orientation=\"vertical\" flexItem />\n        <SliderPanel/>\n      </Grid>\n    );\n  }\n}\n\n// Controls state of the Application\nBottomPanel.propTypes = {\n  network: PropTypes.object.isRequired,\n  training: PropTypes.object.isRequired,\n  ui: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n};\n\n/**\n * Map the states from redux to this property.\n *\n * @param {object} state - the global redux state.\n * @return {object} - the new props of this component.\n */\nfunction mapStateToProps(state) {\n  return {\n    network: state.network,\n    training: state.training,\n    ui: state.ui,\n  };\n}\n\n/**\n * Maps the actions to this property.\n *\n * @param {function} dispatch - the function that is used to call an action.\n * @return {object} - the actions that can be used in this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    withStyles(styles)(BottomPanel)\n);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {bindActionCreators} from 'redux';\n\nimport * as actions from '../actions';\n\nimport CloseIcon from '@material-ui/icons/Close';\nimport {IconButton, Snackbar} from '@material-ui/core';\n\n/**\n * Alert Snack is used to communicate Messages inside the App.\n */\nclass AlertSnack extends React.Component {\n  /**\n   * Handle the closing of this Alert Popup.\n   *\n   * @param {object} event the event that triggered this function\n   * @param {object} reason the reason for this event\n   */\n  handleClose = (event, reason) => {\n    // This prevents a bug that causes immediate closing\n    if (reason !== 'clickaway') {\n      this.props.actions.updateAlertSnack({open: false, message: ''});\n    }\n  };\n\n  /**\n   * Renders the Alert inside the App.\n   *\n   * @return {object} AlertSnack component to be rendered\n   */\n  render() {\n    return (\n      <Snackbar\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'center',\n        }}\n        open={this.props.alertSnack.open}\n        autoHideDuration={3000}\n        onClose={this.handleClose}\n        ContentProps={{\n          'aria-describedby': 'message-id',\n        }}\n        message={<span id=\"message-id\">{this.props.alertSnack.message}</span>}\n        action={[\n          <IconButton key=\"close\" aria-label=\"Close\" color=\"inherit\"\n            onClick={this.handleClose} >\n            <CloseIcon />\n          </IconButton>,\n        ]}\n      />\n    );\n  }\n}\n\n// Prop Types holding all the Preferences\nAlertSnack.propTypes = {\n  alertSnack: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired,\n};\n\n/**\n * Map the State to the Properties of this Component\n *\n * @param {object} state the state that is to be mapped to this component\n * @param {object} _ the props of this component\n * @return {object} the props that this component holds\n */\nfunction mapStateToProps(state, _) {\n  return {\n    alertSnack: state.alertSnack,\n  };\n}\n\n/**\n * Map the actions of the State to the Props of this Class\n *\n * @param {object} dispatch the function that is used to call actions\n * @return {object} the actions that this component can call\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AlertSnack);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport PropTypes from 'prop-types';\nimport {bindActionCreators} from 'redux';\n\nimport {Box, Typography, Grid, Button, Paper} from '@material-ui/core';\nimport NavigateNextIcon from '@material-ui/icons/NavigateNext';\nimport {withStyles} from '@material-ui/core/styles';\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\n\nimport styles from '../../styles/themedStyles';\nimport * as actions from '../../actions';\nimport DescriptionElement from './elements/DescriptionElement';\nimport * as Cookies from '../../helpers/Cookies';\nimport createMuiTheme from '../../theme/globalTheme';\nimport {getCurrentOnboardingElementProps,\n  getNextIntroState} from '../../helpers/OnboardingState';\n\n/**\n * Onboarding is used to explain the App.\n *\n * @param {String} introState the current intro state\n * @return {String} the intro state after the current one\n */\nclass OnboardingDialog extends React.Component {\n  /**\n   * Handles the closing of the dialogs for this element, updates the\n   * global state accordingly\n   *\n   * @param {object} event the event triggering this function\n   */\n  handleNext = (event) => {\n    const introState = Cookies.getIntroState();\n    getNextIntroState(introState, this.props.cookiesState,\n        this.props.actions.updateCookiesState);\n  }\n\n  /**\n   * Handles the deactivation of the dialogs for this element, updates the\n   * global state accordingly\n   *\n   * @param {object} event the event triggering this function\n   */\n  handleSkip = (event) => {\n    Cookies.setIntroState('skipped');\n    const introState = Cookies.getIntroState();\n    this.props.actions.updateCookiesState({...this.props.cookiesState,\n      intro: introState});\n  }\n\n  /**\n   * Renders the Onboarding Screen inside the App.\n   *\n   * @return {object} AlertSnack component to be rendered\n   */\n  render() {\n    const onProps = getCurrentOnboardingElementProps(this.props.ui,\n        this.props.cookiesState, this.props.appState, this.props.training,\n        this.props.network);\n    if (onProps.open) {\n      return (\n        <Grid container alignItems='center'\n          style={onProps.state.style}>\n          {\n            onProps.state.arrow === 'left' ?\n              <Grid item>\n                <ArrowBackIcon\n                  style={{color: this.props.ui.detail ?\n                  createMuiTheme.palette.detail.main :\n                  createMuiTheme.palette.overview.main}}\n                  fontSize=\"large\" >\n                </ArrowBackIcon>\n              </Grid> : null\n          }\n          <Grid container item direction='column' alignItems='center'\n            style={{width: '500px'}}>\n            {\n            onProps.state.arrow === 'up' ?\n              <Grid item>\n                <ArrowUpwardIcon\n                  style={{color: this.props.ui.detail ?\n                  createMuiTheme.palette.detail.main :\n                  createMuiTheme.palette.overview.main}}\n                  fontSize=\"large\" >\n                </ArrowUpwardIcon>\n              </Grid> : null\n            }\n            <Grid item>\n              <Paper style={{background: this.props.ui.detail ?\n                createMuiTheme.palette.secondary.superLight :\n                createMuiTheme.palette.secondary.superLight}}>\n                <Box p={2} style={{width: '500px'}}>\n                  <Grid container directiton='column' spacing={2}>\n                    <Grid item>\n                      <Typography variant=\"h5\">\n                        {onProps.state.title}\n                      </Typography>\n                    </Grid>\n                    {\n                      onProps.state.description.map((descriptionElement,\n                          index) => (\n                        <DescriptionElement key={index}\n                          descriptionElement={descriptionElement} />\n                      ))\n                    }\n                    <Grid item style={{width: '100%'}}>\n                      <Grid container justify='flex-end'>\n                        <Grid item>\n                          <Button variant=\"contained\"\n                            className={this.props.ui.detail ?\n                    this.props.classes.text_button_detail :\n                    this.props.classes.text_button_overview}\n                            onClick={this.handleSkip}>\n                            {onProps.state.buttonTitles.skip}\n                          </Button>\n                          <Button variant=\"contained\"\n                            className={this.props.ui.detail ?\n                    this.props.classes.text_button_cell :\n                    this.props.classes.text_button_net}\n                            onClick={this.handleNext}\n                            endIcon={<NavigateNextIcon/>}>\n                            {onProps.state.buttonTitles.next}\n                          </Button>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Box>\n              </Paper>\n            </Grid>\n            {\n            onProps.state.arrow === 'down' ?\n              <Grid item>\n                <ArrowDownwardIcon\n                  style={{color: this.props.ui.detail ?\n                  createMuiTheme.palette.detail.main :\n                  createMuiTheme.palette.overview.main}}\n                  fontSize=\"large\" >\n                </ArrowDownwardIcon>\n              </Grid> : null\n            }\n          </Grid>\n          {\n            onProps.state.arrow === 'right' ?\n              <Grid item>\n                <ArrowForwardIcon\n                  style={{color: this.props.ui.detail ?\n                  createMuiTheme.palette.detail.main :\n                  createMuiTheme.palette.overview.main}}\n                  fontSize=\"large\" >\n                </ArrowForwardIcon>\n              </Grid> : null\n          }\n        </Grid>\n      );\n    } else {\n      return null;\n    }\n  }\n}\n\n// Prop Types holding all the Preferences\nOnboardingDialog.propTypes = {\n  cookiesState: PropTypes.object.isRequired,\n  appState: PropTypes.object.isRequired,\n  training: PropTypes.object.isRequired,\n  network: PropTypes.object.isRequired,\n  ui: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n};\n\n/**\n * Map the State to the Properties of this Component\n *\n * @param {object} state the state that is to be mapped to this component\n * @param {object} _ the props of this component\n * @return {object} the props that this component holds\n */\nfunction mapStateToProps(state, _) {\n  return {\n    cookiesState: state.cookiesState,\n    appState: state.appState,\n    training: state.training,\n    network: state.network,\n    ui: state.ui,\n  };\n}\n\n/**\n * Map the actions of the State to the Props of this Class\n *\n * @param {object} dispatch the function that is used to call actions\n * @return {object} the actions that this component can call\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    withStyles(styles)(OnboardingDialog));\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport PropTypes from 'prop-types';\n\nimport {Grid} from '@material-ui/core';\nimport Divider from '@material-ui/core/Divider';\nimport {withStyles} from '@material-ui/core/styles';\n\nimport * as actions from '../actions';\nimport styles from '../styles/themedStyles';\nimport Training from './training/Training';\nimport VisualWrapper from './visualisation/VisualWrapper';\nimport BottomPanel from './controls/BottomComponent';\nimport AlertSnack from './AlertSnack';\nimport OnboardingDialog from './dialogs/OnboardingDialog';\nimport * as Cookies from '../helpers/Cookies';\n\n/**\n * Main component of the Application that displays all content dependant on the\n * Controls State.\n */\nclass Main extends React.Component {\n  /**\n   * Constructing the Main app Comopnent and Initializing the Tutorial State.\n   *\n   * @param {object} props how this component will be generated\n   */\n  constructor(props) {\n    super(props);\n    const introState = Cookies.getIntroState();\n    if (introState !== undefined) {\n      this.props.actions.updateCookiesState({...this.props.cookiesState,\n        intro: introState});\n    }\n  }\n\n  /**\n   * Render the Main Content and call other Elements.\n   *\n   * @return {object} - the main component to be rendered.\n   */\n  render() {\n    return (\n      <Grid container className='mainGrid' style={{height: '100%'}}>\n        <Grid item className={this.props.classes.fullWidth} id='netArea'>\n          <Training/>\n          <VisualWrapper/>\n        </Grid>\n        <Grid item className={this.props.classes.panelWrapper}>\n          <Divider/>\n          <BottomPanel/>\n        </Grid>\n        <AlertSnack/>\n        <OnboardingDialog/>\n      </Grid>\n    );\n  }\n}\n\nMain.propTypes = {\n  network: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired,\n  cookiesState: PropTypes.object.isRequired,\n};\n\n/**\n * Map the states from redux to this property.\n *\n * @param {object} state - the global redux state.\n * @param {object} ownProps - the properties of this component.\n * @return {object} - the new props of this component.\n */\nfunction mapStateToProps(state, ownProps) {\n  return {\n    network: state.network,\n    cookiesState: state.cookiesState,\n  };\n}\n\n/**\n * Maps the actions to this property.\n *\n * @param {function} dispatch - the function that is used to call an action.\n * @return {object} - the actions that can be used in this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    withStyles(styles)(Main)\n);\n","import * as React from 'react';\nimport {BrowserRouter as Router, Route} from 'react-router-dom';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Main from './components/MainComponent';\n\n/**\n * AppRouter Calling other Components dependant on Route.\n */\nclass AppRouter extends React.Component {\n  /**\n   * Renders the component for a route.\n   *\n   * @return {object} - the component to be rendered for this route.\n   */\n  render() {\n    return (\n      <div className='wrap'>\n        <Toolbar/>\n        <div className='content' id='visDiv'>\n          <Router>\n            <div className='full'>\n              <Route exact={true} path=\"\" component={Main} />\n            </div>\n          </Router>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AppRouter;\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport {withStyles} from '@material-ui/core/styles';\nimport {Select} from '@material-ui/core/';\nimport styles from '../../../styles/themedStyles';\n\n/**\n * The generating function for the individual styled select components\n *\n * @param {object} props the parent properties\n * @return {object} rendered styled select element\n */\nfunction StyledSelectRaw(props) {\n  const {classes, main, ...other} = props;\n  return (\n    <div style={ main ?\n      {display: 'inline-flex', marginRight: '12px', flexGrow: '1'} :\n      {marginRight: '12px'}}\n    >\n      <Select className={classes.select} inputProps={{\n        classes: {\n          icon: classes.selectIcon,\n        },\n        color: 'white',\n      }} {...other} />\n    </div>\n  );\n}\n\nStyledSelectRaw.propTypes = {\n  classes: PropTypes.object.isRequired,\n  main: PropTypes.bool.isRequired,\n};\n\nexport default withStyles(styles)(StyledSelectRaw);\n\n","import * as React from 'react';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport PropTypes from 'prop-types';\n\nimport {withStyles} from '@material-ui/core/styles';\nimport {AppBar, Toolbar, Button, Typography,\n  MenuItem} from '@material-ui/core/';\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\n\nimport * as actions from '../../actions';\nimport styles from '../../styles/themedStyles';\nimport globalConstants from '../constants/global';\nimport StyledSelect from './comps/StyledSelect';\nimport * as Cookies from '../../helpers/Cookies';\n\n/**\n * Bar at top of the Application, 'The Toolbar'\n */\nclass TopBar extends React.Component {\n  /**\n   * When the component is mounted we need to connect the keyboard\n   * input actions to this element to handle incoming key presses\n   */\n  componentDidMount() {\n    document.addEventListener('keydown', this.handleKeyDown);\n  }\n\n  /**\n   * Handles keyboard inputs for the application\n   *\n   * @param {obect} event the key input event\n   */\n  handleKeyDown = (event) => {\n    if (!this.props) {\n      return;\n    }\n    let callDefault = false;\n    switch (event.key) {\n      case ' ': // 'play/pause'\n        if (!this.props.training.workerReady && !this.props.ui.netAnim) return;\n        if (!this.props.ui.detail) {\n          this.props.actions.toggleTraining(this.props.training);\n        } else {\n          this.props.actions.updateUI({...this.props.ui,\n            anim: !this.props.ui.anim});\n        }\n        break;\n      case 'Enter': // 'step'\n        if ((this.props.ui.detail && this.props.ui.anim) ||\n            (!this.props.ui.detail && this.props.training.running) ||\n            !this.props.training.workerReady) return;\n        if (this.props.ui.detail) {\n          this.props.actions.updateUI({...this.props.ui, animStep: true});\n        } else if (!this.props.training.running) {\n          this.props.actions.updateTraining(\n              {...this.props.training, step: true});\n        }\n        break;\n      case 'Backspace': // 'reset'\n        if (this.props.ui.detail || !this.props.training.workerReady) return;\n        this.props.actions.updateTraining(\n            {...this.props.training, reset: true}\n        );\n        break;\n      // network size\n      case '-':\n        if (!this.props.ui.detail && !this.props.training.running &&\n            this.props.network.layers > 1) {\n          this.props.actions.updateNetwork({...this.props.network,\n            layers: this.props.network.layers - 1});\n        }\n        break;\n      case '+':\n        if (!this.props.ui.detail && !this.props.training.running &&\n            this.props.network.layers <= 6) {\n          this.props.actions.updateNetwork({...this.props.network,\n            layers: this.props.network.layers + 1});\n        }\n        break;\n      // view mode (netview <-> cell view)\n      case 'Tab':\n        if (!this.props.ui.detail) {\n          this.props.actions.updateUI({...this.props.ui, detail: true,\n            anim: this.props.training.running});\n          this.props.actions.stopTraining(this.props.training);\n        } else {\n          this.props.actions.updateUI({...this.props.ui,\n            detail: false});\n          this.props.actions.updateTraining({...this.props.training,\n            running: this.props.ui.anim});\n        }\n        break;\n      default:\n        callDefault = true;\n    }\n    if (!callDefault) {\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Adds or removes a chosen type to the global state\n   *\n   * @param {string} type the data type to be added or removed\n   */\n  updateDataTypes = (type) => {\n    if (!this.props.ui.detail && !this.props.training.running) {\n      const oldTypes = this.props.training.dataTypes;\n      let newTypes = [];\n      if (oldTypes.includes(type) && oldTypes.length > 1) {\n        for (const item of oldTypes) {\n          if (item !== type) {\n            newTypes.push(item);\n          }\n        }\n      } else if (oldTypes.includes(type) && oldTypes.length === 1) {\n        newTypes = oldTypes;\n      } else {\n        oldTypes.push(type);\n        newTypes = oldTypes;\n      }\n      this.props.actions.updateTraining(\n          {...this.props.training, dataTypes: newTypes}\n      );\n    }\n  }\n\n  /**\n   * Handles the selection of the input type select component\n   *\n   * @param {object} event the event containing the information about the\n   * selected type element\n   */\n  inputTypeSelect = (event) => {\n    const newDataTypes = event.target.value === 'Text Data' ?\n      ['abab'] : ['sin'];\n    this.props.actions.updateTraining({...this.props.training,\n      inputType: event.target.value, reset: true, dataTypes: newDataTypes});\n  };\n\n  /**\n   * Resets the onboarding state to get the intro again.\n   *\n   * @param {object} event the event triggering this function\n   */\n  resetOnboarding = (event) => {\n    Cookies.removeIntroState();\n    this.props.actions.updateCookiesState({...this.props.cookiesState,\n      intro: ''});\n  }\n\n  /**\n   * React render function controlling the look of the\n   * AppBar of the Application\n   *\n   * @return {object} the react components rendered form\n   */\n  render() {\n    const {classes} = this.props;\n    const global = globalConstants[this.props.appState.language];\n    return (\n      <AppBar className={ this.props.ui.detail ? classes.cVheader :\n        classes.oVheader} id='barDiv'>\n        <Toolbar className='noselect'>\n          <Typography variant=\"h3\" className = { classes.typoHeader }>\n            {global.title}\n          </Typography>\n          <StyledSelect value={this.props.training.inputType}\n            onChange={ this.inputTypeSelect }\n            main={true} disabled={this.props.ui.detail}>\n            {\n              global.inputTypes.map((x) => (\n                <MenuItem key={x.name} disabled={x.disabled}\n                  value={x.name}>{x.name}</MenuItem>\n              ))\n            }\n          </StyledSelect>\n          <Button variant=\"contained\"\n            className={this.props.ui.detail ?\n              this.props.classes.text_button_cell_inverted :\n              this.props.classes.text_button_net_inverted}\n            onClick={this.resetOnboarding}\n            startIcon={<RotateLeftIcon/>}>\n            Reset Intro\n          </Button>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\n// TopBar state of the Application\nTopBar.propTypes = {\n  training: PropTypes.object.isRequired,\n  network: PropTypes.object.isRequired,\n  ui: PropTypes.object.isRequired,\n  appState: PropTypes.object.isRequired,\n  actions: PropTypes.object.isRequired,\n  classes: PropTypes.object.isRequired,\n  cookiesState: PropTypes.object.isRequired,\n};\n\n/**\n * Map the states from redux to this property.\n *\n * @param {object} state - the global redux state.\n * @return {object} - the new props of this component.\n */\nfunction mapStateToProps(state) {\n  return {\n    training: state.training,\n    network: state.network,\n    ui: state.ui,\n    appState: state.appState,\n    actions: state.actions,\n    cookiesState: state.cookiesState,\n  };\n}\n\n/**\n * Maps the actions to this property.\n *\n * @param {function} dispatch - the function that is used to call an action.\n * @return {object} - the actions that can be used in this component.\n */\nfunction mapDispatchToProps(dispatch) {\n  return {actions: bindActionCreators(actions, dispatch)};\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(\n    withStyles(styles)(TopBar)\n);\n","// Set the initial State of the Application\nexport default {\n  network: {\n    // State of the input and predictions\n    data: {\n      chartIn: [],\n      chartOut: [],\n      chartPred: [],\n    },\n    layerSize: 16, // amount of memory cells per block\n    layers: 3, // amount of blocks\n    learningRate: 0.025, // initial learning rate\n    iteration: 0, // equal to the amount of epochs\n    type: 'LSTM', // layer type\n    activation: 'tanh', // activation function\n  },\n  training: {\n    running: false, // currently training\n    inputType: 'Function Data', // Type of input the network can handle\n    dataTypes: ['sin'], // data used for this training\n    noise: 0.0, // max noise to be added to the data\n    values: 0, // how many datapoints are fed into the network\n    predictions: 0, // how many values to predict, calculated by the period\n    dataSetSize: 100, // how many datapoints one epoch contains\n    batchSize: 25, // how many items to feed to the network per batch\n    stepSize: 0.2, // distance between two datapoints from the functions\n    reset: false, // whether to reset the model\n    step: false, // whether a training step is to be made\n    workerReady: true, // the worker is ready for training commands\n  },\n  ui: {\n    running: false, // Training running\n    ready: true, // At beginning of training step, ready to start training\n    detail: false, // Currently in detail view\n    data: new Array(5).fill({}), // Data to be trained on\n    netAnim: false, // Network currently animating\n    anim: true, // Detail cell currently animating\n    animStep: false, // Detail cell step is executed\n    lstmStep: 0, // Current step in the detail cell\n    trainingStep: 0, // Whether in forward, prediction, or backward pass (1,2,3)\n    state: [true, false, false], // Cell View: Forward/Prediction/Backward pass\n    trigger: [false, false, false], // Animation trigger (forw./pred./backw.)\n    detailSpeed: 1.0, // The speed at which animations in detail advance\n  },\n  /*\n  * for dialog boolean arrays check the global constants\n  * (src/components/constants/global.js) to compare the id\n  * values of the corresponding objects\n  */\n  appState: {\n    // Help opened\n    help: false,\n    // App language\n    language: 'ENG',\n    // Dialogs on the steps prediction, validation, training, overview right\n    inputDialog: [false, false, false],\n    // Dialogs on LR, noise, batch size, overview left\n    sliderDialog: [false, false, false],\n    // Dialogs for the detail cell components\n    cellDialog: [false, false, false, false, false, false],\n    // Dialogs for the steps in the detail cell\n    stepDialog: [false, false, false, false],\n    // Dialog for epochs at bottom center\n    epochDialog: false,\n    // Dialog for the about section in the drawer\n    aboutDialog: false,\n    // Dialog for the faq section in the drawer\n    faqDialog: false,\n    // Dialog for the imprint section in the drawer\n    impressumDialog: false,\n    // Dialog for the headings of the sketch\n    headingDialog: '',\n  },\n  alertSnack: {\n    open: false,\n    message: '',\n  },\n  textData: {},\n  cookiesState: {\n    intro: '',\n  },\n};\n","// Import all Reducers\nimport {combineReducers} from 'redux';\nimport training from './TrainingReducer';\nimport network from './NetworkReducer';\nimport ui from './UIReducer';\nimport appState from './AppStateReducer';\nimport alertSnack from './AlertSnackReducer';\nimport textData from './TextDataReducer';\nimport cookiesState from './CookiesStateReducer';\n\n// Combine all Reducers\nexport default combineReducers({\n  network,\n  training,\n  ui,\n  appState,\n  alertSnack,\n  textData,\n  cookiesState,\n});\n","import initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * This function is called every time the global state has changed\n * and checks the action message to see if the Network object in the\n * state needs to be updated\n *\n * @param {object} state the current global state of this application\n * @param {object} action the action message sent by the redux state change\n * @return {object} the new value for the network object\n */\nexport default function networkReducer(state = initialState.network, action) {\n  switch (action.type) {\n    case types.UPDATE_NETWORK:\n      return action.network;\n    default:\n      return state;\n  }\n}\n","import initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * This function is called every time the global state has changed\n * and checks the action message to see if the Training object in the\n * state needs to be updated\n *\n * @param {object} state the current global state of this application\n * @param {object} action the action message sent by the redux state change\n * @return {object} the new value for the training object\n */\nexport default function trainingReducer(\n    state = initialState.training, action) {\n  switch (action.type) {\n    case types.TOGGLE_TRAINING:\n      return {\n        ...(action.training),\n        running: !(action.training.running),\n      };\n    case types.STOP_TRAINING:\n      return {\n        ...action.training,\n        running: false,\n      };\n    case types.UPDATE_TRAINING:\n      return action.training;\n    default:\n      return state;\n  }\n}\n","import initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * This function is called every time the global state has changed\n * and checks the action message to see if the UI object in the\n * state needs to be updated\n *\n * @param {object} state the current global state of this application\n * @param {object} action the action message sent by the redux state change\n * @return {object} the new value for the UI object\n */\nexport default function uiReducer(state = initialState.ui, action) {\n  switch (action.type) {\n    case types.UPDATE_UI:\n      return action.ui;\n    default:\n      return state;\n  }\n}\n","import initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * This function is called every time the global state has changed\n * and checks the action message to see if the appState object in the\n * state needs to be updated\n *\n * @param {object} state the current global state of this application\n * @param {object} action the action message sent by the redux state change\n * @return {object} the new value for the appState object\n */\nexport default function appStateReducer(state = initialState.appState, action) {\n  switch (action.type) {\n    case types.UPDATE_APP_STATE:\n      return action.appState;\n    default:\n      return state;\n  }\n}\n","import initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * This function is called every time the global state has changed\n * and checks the action message to see if the alertSnack object in the\n * state needs to be updated\n *\n * @param {object} state the current global state of this application\n * @param {object} action the action message sent by the redux state change\n * @return {object} the new value for the appState object\n */\nexport default function alertSnackReducer(state = initialState.alertSnack,\n    action) {\n  switch (action.type) {\n    case types.UPDATE_ALERT_SNACK:\n      return action.alertSnack;\n    default:\n      return state;\n  }\n}\n","import initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * This function is called every time the global state has changed\n * and checks the action message to see if the textData object in the\n * state needs to be updated\n *\n * @param {object} state the current global state of this application\n * @param {object} action the action message sent by the redux state change\n * @return {object} the new value for the textData object\n */\nexport default function textDataReducer(state = initialState.textData, action) {\n  switch (action.type) {\n    case types.UPDATE_TEXT_DATA:\n      return action.textData;\n    default:\n      return state;\n  }\n}\n","import initialState from './initialState';\nimport * as types from '../actions/types';\n\n/**\n * This function is called every time the global state has changed\n * and checks the action message to see if the cookiesState object in the\n * state needs to be updated\n *\n * @param {object} state the current global state of this application\n * @param {object} action the action message sent by the redux state change\n * @return {object} the new value for the cookiesState object\n */\nexport default function cookiesStateReducer(state = initialState.cookiesState,\n    action) {\n  switch (action.type) {\n    case types.UPDATE_COOKIES_STATE:\n      return action.cookiesState;\n    default:\n      return state;\n  }\n}\n","import React from 'react';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware, compose} from 'redux';\nimport thunk from 'redux-thunk';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport {MuiThemeProvider} from '@material-ui/core/styles';\nimport theme from './theme/globalTheme';\nimport AppRouter from './AppRouter';\nimport TopBar from './components/controls/TopBarComponent';\nimport combinedReducers from './reducers';\n\n// Create the Store using all the Reducers and applying the Middleware\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(combinedReducers, composeEnhancers(\n    applyMiddleware(thunk)\n));\n\n\n// Render the App\n// The App provides the Store to the following components.\n// Controls as well as Routed Content are rendered.\nconst App = () => (\n  <MuiThemeProvider theme={theme}>\n    <Provider store={store}>\n      <div className='full' id='appDiv'>\n        <CssBaseline />\n        <header>\n          <TopBar/>\n        </header>\n        <AppRouter/>\n      </div>\n    </Provider>\n  </MuiThemeProvider>\n);\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n/* eslint-disable no-undef */\n/* eslint-disable require-jsdoc */\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still\n        // exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n              'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n      .register(swUrl)\n      .then((registration) => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch((error) => {\n        console.error('Error during service worker registration:', error);\n      });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n      .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n        // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n        // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n            'No internet connection found. App is running in offline mode.'\n        );\n      });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport './styles/index.css';\n\n// Render the Application into the html 'root' element\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}